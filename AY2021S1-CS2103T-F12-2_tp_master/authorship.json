[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-F12-2/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-F12-2/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "StudyBananas is a **desktop study companion app that helps students centralize all their study tasks and set up focused study sessions in one place, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "For detailed documentation of this project, refer to the [StudyBananas Website](https://ay2021s1-cs2103t-f12-2.github.io/tp/)."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "## About Us"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "For details on our project team members, do check out the [AboutUs](https://github.com/AY2021S1-CS2103T-F12-2/tp/blob/master/docs/AboutUs.md) page."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "## User Guide"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "Curious to know how to use StudyBananas? We\u0027ve got you! You may refer to the [User Guide](https://github.com/AY2021S1-CS2103T-F12-2/tp/blob/master/docs/UserGuide.md) for more details."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "## Developer Guide"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "If you would like to contribute to this project, do head over to [Developer Guide](https://github.com/AY2021S1-CS2103T-F12-2/tp/blob/master/docs/DeveloperGuide.md) to get started!"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "## Acknowledgments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "This project is morphed from the AddressBook-Level3 project, created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 16,
      "-": 3
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jdk8\u0027, version: \u00272.12.0-rc1\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    archiveName \u003d \u0027StudyBananas.jar\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "run {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 1,
      "bowei-yu": 5,
      "-": 71
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "You may reach us through the following email addresses:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "* Joe Teddy Yosua Sanjaya: joe.teddy@u.nus.edu"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "* Yu Bowei: e0425419@u.nus.edu"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "* Eddy Chu: e0418218@u.nus.edu"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "* Ngo Duc Binh: e0271216@u.nus.edu"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "* Petrick Jerico Gustendi: e0425802@u.nus.edu"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "### Joe Teddy Yosua Sanjaya"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "\u003cimg src\u003d\"images/cupofjoee.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "[[github](https://github.com/cupofjoee)]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "[[portfolio](team/joeteddy.md)]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "* Responsibilities: Dev Ops"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "### Yu Bowei"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "\u003cimg src\u003d\"images/bowei-yu.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "[[github](http://github.com/bowei-yu)]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "[[portfolio](team/yubowei.md)]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: UI"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "### Eddy Chu"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "\u003cimg src\u003d\"images/chuyiting.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "[[github](http://github.com/chuyiting)] "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "[[portfolio](team/eddychu.md)]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: Data"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "### Ngo Duc Binh"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "\u003cimg src\u003d\"images/ducbinh2611.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "[[github](http://github.com/ducbinh2611)]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "[[portfolio](team/ducbinh.md)]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: Dev Ops + Threading"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "### Petrick Jerico Gustendi"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "\u003cimg src\u003d\"images/petrickjerico.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "[[github](http://github.com/petrickjerico)]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "[[portfolio](team/petrickjerico.md)]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: UI"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 3,
      "petrickjerico": 9,
      "cupofjoee": 9,
      "bowei-yu": 6,
      "chuyiting": 3,
      "-": 36
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the address book data."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the address book data in json format and read it back."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "## **StudyBananas Architecture**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "StudyBananas is an integration of 4 systems, namely AddressBook3(AB3), Schedule, Quiz, Flashcard. Structure-wise, our team decided to stick to the original architecture of the AB3 (see architecture diagram above). Nonetheless, this decision incurs strong couplings between systems in each components. Therefore, we introduce layers of abstraction for each components to reduce the couplings. This section describes how we implement each component."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "![architectureDiagram](images/ArchitectureDiagram.png)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "### Model"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "#### Reasoning"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "In the original implementation of AB3, `ModelManager` which implements `Model` interface serves as the API to interact with other components. We preserve the convention and leave `ModelManager` as our **\"one and only\"** API for Model component. This decision has brought about the following pros and cons."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "  * Pros: It simplifies the system, as `Model` contains every methods that other components need. It makes cooperation easier and vastly reduces the time that other developers need to spend on understanding multiple APIs and makes the code cleaner when working with other components.  "
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "  * Cons: "
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    1. It breaks Single Responsibility Principle, for `Model`is no longer only responsible for the AB3, it holds accountable for 4 systems at the same time."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    2. It breaks Interface Segregation Principle when writing ModelStubs for the unit tests and incur tons of conflicts when 4 systems are developed at the same time. "
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "Hugely fond of the great advantage of single API Model system, our team built a structure which segregates the Model API into the 4 systems but at the same time integrates all Models with the **\"one and only one\"** API class ModelManager. The following is the step by step guide of how we create the structure and can be followed to integrate more systems to StudyBananas."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "Step1. Create XYZModel interfaces for each system which can be viewed as 4 APIs for 4 SystemModel, and have our API `Model` interface extends from all of them to make sure that `Model` still contains all the methods that other components require."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "![ModelStructure-Step1](images/ModelStructure-Step1.png)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "Step2. Create XYZModelManagers which implement the XYZModel and handles the real \"operations\" for XYZModels."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "![ModelStructure-Step2](images/ModelStructure-Step2.png)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "Step3. Create system-level Models (Addressbook, Schedule, Flashcard, Quiz) which are the \"real\" Models. (**Note:** XYZModelManagers are APIs for these system-level Models.) Then, have XYZModelManagers depend on these system-level Models. (**Note:** system-level models represents the persistence layer for each system and system-level is relative to lower level Models e.g. Address, Tag, Title...)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "![ModelStructure-Step3](images/ModelStructure-Step3.png)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "Step4. Finally, create our **\"one and only one\"** Model component API class - `ModelManager` which implements the `Model` interface and contains all the ModelManagers. In this way, although the `ModelManager` still contains all the methods from 4 individual systems. It can be viewed as a dummy class which does not contain any implementation. All implementations are in the ModelManagers. Therefore, during the unit tests, we create XYZModelStubs which contains only methods that are related to the SUT."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "![ModelStructure-Step4](images/ModelArchitectureDiagram.png)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "#### Analysis"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "  * Pros: "
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    1. It preserves the advantage of easier and faster cooperation from the reasoning section."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    2. It solves the second disadvantage in the reasoning section by one more layer of segregation."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    3. Although adding new systems still requires adding methods in the Model interface, it makes sure, there is no need to modify the old codes or modify the test case implementation. Therefore, it meets the Open-Closed Principle."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "  * Cons: "
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    1. It still breaks the Single Responsibility Principle, for `Model`is no longer only responsible for the AB3, it holds accountable for 4 systems at the same time."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "### [Proposed] Flashcard"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "The proposed mechanisms to manage is facilitated by `FlashcardBank`. The `FlashcardBank` contains a list of `FlashcardSet`. Each `FlashcardSet` contains a list of `Flashcard`."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "![Flashcard Class Diagram](diagrams/FlashcardClassDiagram.png)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` — Saves the current address book state in its history."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "### Edit Task feature"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "The edit mechanism is facilitated by `Schedule`, which contains a `UniqueTaskList` such that each task\u0027s information can be modified "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "after its creation and addition into the `UniqueTaskList`. It implements this following feature:  "
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "* `Schedule#setTask()` — Replaces an existing task in the `UniqueTaskList` with a new task."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "These operations are exposed in the `ScheduleModel` interface as `ScheduleModel#setTask()`."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Given below is the example usage scenario and how the edit task mechanism behaves at each step."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Step 1. The user launches the application. The `Schedule` is initialized with the user\u0027s saved Schedule, which is saved in the JSON file `schedule.json` locally."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "For example, the user already has 3 tasks in the beginning."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "![EditCommand0](images/EditCommand0.png) "
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Step 2. The user executes `add task T: CS2100 d: Tutorial 8 homework`, adding a new task with a title \"CS2100\", the description \"Tutorial 8 homework\" with the unspecified date into the schedule. This task is assigned the index 4 in the `Schedule`"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "![EditCommand1](images/EditCommand1.png) "
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Step 3. The user now knows what is the due date of the currently added task, and decides to edit the relevant time information of the task by executing the `edit task 4 t: 2020-10-21 10:00`. The `edit task` command calls `ScheduleEditCommand#execute()`"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " to generate a new task, containing the updated information, for the fields that is not specified in the `edit task` command, such as `title` or `description` in the example, the new task "
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " copies the existing fields of the to-be-replaced task. It is followed by calling `ScheduleModelManager#setTask()` to replace the to-be-replaced task at index 4 with the new edited task."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " "
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " ![EditCommand2](images/EditCommand2.png) "
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** `ScheduleEditCommand#execute()` creates a new task sharing some of the overlapped fields with the to-be-replaced task. Then `ScheduleModelManager#setTask()` sets the to-be-replaced task with the newly created task at index 4 of the `Schedule`.  "
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "\u003c/div\u003e "
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "The following sequence diagram shows how the edit task operation works:"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " ![EditTaskSeqDiagram](images/EditTaskSequenceDiagram.png)"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "##### Aspect: How edit task executes"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "* **Alternative 1 (current choice):** Creates the new edited task object to replace the to-be-replaced task object."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  * Pros: Update the Schedule consistently throughout the program so that side-effects, such as there are 2 versions of Schedule, can be avoided."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage as the replaced task object still remains in the memory."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "* **Alternative 2:** Mutate the task object itself in the Schedule at the corresponding index."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  * Pros: Will use less memory as there is no new creation of task object."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  * Cons: May result in side-effects such as there are out-of-dated versions of Schedule throughout the program."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "### \\[Proposed\\] Quiz with storage of answers feature"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "The proposed quiz with storage of answers mechanism is facilitated by `Quiz` and `QuizModelManager`, which implements the `QuizModel` interface. "
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "It makes use of an array of answer strings as an attribute, stored within a `Quiz` object as `userAnswers`."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "Additionally, it implements the following core operations with `Quiz`, which is called by `QuizModelManager`:"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* `QuizModelManager#start(Quiz quiz)` — Starts the quiz by initiating the quiz object in the model, "
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "iterating through the associated flashcard set and showing the first question in the flashcard set."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "The presence of at most one quiz object ensures that at most one quiz running at a time."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* `QuizModelManager#hasStarted()` — Checks if a quiz has started. "
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "This prevents multiple quizzes from running concurrently."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* `QuizModelManager#tallyScore(boolean isCorrect)` — Tallies the score after each answer is shown, "
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "depending on user\u0027s judgement of correctness."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* `QuizModelManager#getQuestion()` — Obtains the question of the next flashcard in the flashcard set."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* `QuizModelManager#getAnswer()` — Obtains the answer of the next flashcard in the flashcard set."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* `QuizModelManager#stopQuiz()` — Stops the quiz. This method is called at the end of the flashcard set iteration. "
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* `QuizModelManager#cancelQuiz()` — Cancels the quiz. "
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "This method is called when the user cancels the quiz before reaching the end of the flashcard set."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* `QuizModelManager#getQuizRecords(FlashcardSetName name)` — Fetches the quiz score based on the associated flashcard set\u0027s name. "
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "The score includes: "
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    * the number of correct answers out of the total score within the flashcard set, and percentage scored."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    * the set of questions, the corresponding correct answers and the answers provided by the user"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    * whether each question was answered correctly."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "These operations are as exactly written in the `QuizModel` and `Model` interface."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "#### Usage Scenario"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "Given below is an example usage scenario and how the quiz with storage of answers mechanism behaves at each step."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "##### Step 1"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "The user launches the application and starts the quiz for a non-empty, valid flashcard set. "
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "As a result, it creates a `QuizModelManager` object and a `StartCommand` object."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "Assume the flashcard set contains only two flashcards for simplicity."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "The call to `StartCommand#execute()` will allow the `Quiz` to be initialized with the initial quiz state with default values for score, "
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "the `currentIndex` pointing to the index of the first flashcard, "
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "and the current command result being the first question through the call of `Quiz#getQuestion()`."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "The `Quiz` is saved into the `QuizModelManager`object as an attribute named `quiz`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "![StartQuizClassDiagram](images/StartQuizClassDiagram.png)"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "![StartQuiz](images/StartQuiz.png)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "##### Step 2"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "The user executes `ans:\u003canswer\u003e` command to submit their answer to the question. "
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "The `AnswerCommand` object created calls `Quiz#saveAnswer()`, "
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "storing their answer into the `userAnswers` array attribute in Quiz "
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "for the question before moving on to the correct answer through the call of `Quiz#getAnswer()`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "The `currentIndex` attribute is incremented at this stage to point to the next flashcard."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "![StoreAnswerClassDiagram](images/StoreAnswerClassDiagram.png)"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "##### Step 3"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "After viewing the answer, the user executes either `c` or `w` to indicate whether the question is answered correctly. "
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "This creates either a `CorrectCommand` or `WrongCommand` object. "
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "In the case of the `CorrectCommand` class below, the call to `CorrectCommand#execute()`"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "calls the `Quiz:tallyScore()` method through the interaction with `QuizModel`."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "This increments the `pointsScored` attribute in quiz."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "The following sequence diagram shows how this step works:"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "![UpdateScoreSequenceDiagram](images/UpdateScoreSequenceDiagram.png)"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "The object created will check if the `currentIndex` (updated in the previous step) "
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "is within bounds to obtain the next flashcard."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If there are no flashcards left, the quiz exits."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "\u003c/div\u003e "
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "In the current scenario, the question of the next flashcard is fetched and displayed"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "by calling the `Quiz:getQuestion()` method,"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "through `QuizModelManager`, during the execution of `CorrectCommand:execute()`."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "![NextQuestion](images/NextQuestion.png)"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "##### Step 4"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "Assume that the user has reached the end of the flashcards as shown below:"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "![OutOfIndex](images/OutOfIndex.png)"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "From the `CorrectCommand:execute()` / `WrongCommand:execute()` operation, "
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "the `QuizModelManager:stopQuiz()` operation will be called."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "This stops the quiz by removing the `Quiz` object stored in the `quiz` "
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "attribute of `QuizModelManager`."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "This leads to also calling the `Quiz:toString()` operation to show the quiz score and statistics."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "![CommitActivityDiagram](images/QuizStorageActivityDiagram.png)"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "##### Aspect: How quiz with storage of answers executes"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* **Current choice** ."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "### Sidebar view"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "The implementation of the Sidebar view is designed using the Singleton pattern and the Observer Pattern. Global Ui state which stores the UiState is designed to be singleton - `SingletonUiState`. The `SingletonUiState` is created when the application is launched, and `SingletonUiState` implements `Observable` interface, making it observable to other ui components. `MainWindow` and `SidebarTab` implements the `Observer` interface and subscribe to the change of `SingletonUiState` to achieve the sidebar effect."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "* `Observable#register(Observer o)` — Register a certain Observer to an Observable object, after registration, the observer object will be notified on any update of the Observable object."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "* `Observable#inform()` — When the observable object is modified, use this method to inform all the subscribed observers."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "* `Observer#subscribe(Observable o)` — Help the Observer class subscribes to an Observable Object."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "* `Observer#update()` — This is the API for the Observer object to modify the Observable object and further helps inform all the subscribers."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "The concrete implementation of these methods lies in the `MainWindow`, `SidebarTab`, and `SingletonUiState`, with `MainWindow` and `SidebarTab` being `Observer` and `SingletonUiState` being Observable"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "Given below is an example usage scenario and how the sidebar view mechanism behaves at each step."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "Step 1. The user launches the application for the first time. The `MainWindow` will initialize the `SingletonUiState` with the default state `Schedule` which represents the view of Schedule system, and then subscribe to it."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "![SidebarStep1](images/SidebarStep1.png)"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "Step 2. When the `Sidebar` is initiated, the `SidebarTab`s contained will subscribe to the changes of SingleUiState. "
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "![SidebarStep2](images/SidebarStep2.png)"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "Step 3. When a user click on any `SidebarTab`, `SidebarTab` would update the `SingletonUiState`."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "![SidebarStep3](images/SidebarStep3.png)"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "Step 4. After the `SingletonUiState` is updated, it will then go ahead to update all the observers and change the view."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "![SidebarStep4](images/SidebarStep4.png)"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "The following sequence diagram shows how the switching between tabs works, the example clicks the schedule tab:"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "![UndoSequenceDiagram](images/SidebarSequenceDiagram.png)"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "* Multiple Ui components rely on the Global UiState, therefore, Singleton makes sense here."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "* Many components would be affected by the change of UiState, it makes sense to build it using Observer pattern."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* is a student, at upper secondary or tertiary education level"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* has a need to keep track of study tasks and test their understanding of what is learnt"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "* prefers desktop apps over other types"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "**Value proposition**: "
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* manage study tasks and test learnt knowledge faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* centralize all study tasks and set up focused study sessions in one place"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "| Priority | As a …                                                         | I want to …                                                                                 | So that I can…                                                                     |"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "| -------- | -------------------------------------------------------------- | ------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "| `* * *`  | Student                                                        | take advantage of the flashcard learning technique                                          | memorize important facts/parts of the notes more efficiently and organizedly.      |"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "| `* * *`  | Learner who takes advantage of flashcard learning              | be able to create custom flashcards                                                         | store my notes in the form of flashcards which optimises my flashcard learning.    |"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "| `* * *`  | User                                                           | delete my flashcards which are no longer in use                                             | manage my own flashcards.                                                          |"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "| `* * *`  | Student who learns by tests                                    | test myself                                                                                 | learn more effectively.                                                            |"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "| `* * *`  | Hard-working flashcard-learning user                           | create tests with the flashcard notes created by myself                                     | see how good my learning outcome is.                                               |"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "| `* * *`  | User who learns by quizzing his/herself a lot                  | look back on my quiz attempts                                                               | evaluate how much more efforts I need to put in the section.                       |"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "| `* * *`  | Student who regularly revises my concepts using flashcards     | see the detailed answering history for my past quiz attempts                                | evaluate which concepts are still unclear to me and spend more time on those.      |"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "| `* * *`  | Student who regularly revises my concepts using flashcards     | see my quiz statistics                                                                      | know which part I do well and where I need improvement on in an objective manner.  |"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "| `* * *`  | Student who has tons of homework and exams                     | have a to-do list that organizes my study plan                                              | plan my schedule more effectively.                                                 |"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "| `* * *`  | Student who has a lot of homework and assignments              | create a homework to-do list                                                                | keep track of what tasks I need to complete.                                       |"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "| `* * *`  | Student who frequently forgets my own homework and assignments | list out all the homework                                                                   | view what to do.                                                                   |"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "| `* * *`  | Student who wants to look up certain homework and assignments  | search or filter the list of homeworks and assignments                                      | see the information for a specific homework.                                       |"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "| `* *`    | Savvy learner who wishes to track my study sessions            | schedule my study plan                                                                      | play myself more effectively.                                                      |"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "| `* *`    | Savvy learner who wishes to track my study sessions            | put my todo task in my schedule                                                             | plan my todo tasks more organizedly without missing any deadlines.                 |"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "| `* *`    | Extremely organised learner                                    | have a timer which runs during the scheduled period of time                                 | make the best use of my time                                                       |"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "| `* *`    | Student who organises the schedule carefully                   | leave feedback for each of my study session                                                 | know my learning efficiency during each session and make my new plans based on it. |"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "| `*`      | Super busy student                                             | have AI to schedule my todo lists based on my past studying statistics automatically for me | rely on the AI to make the best use of my time.                                    |"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "(For all use cases below, the **System** is the `StudyBananas` and the **Actor** is the `user`, unless specified otherwise)  "
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "#### Use case: UC01 Create a set of flashcards"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "1. User adds a new empty set of flashcards with a given name."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "2. User \u003cins\u003e UC02 create and add an individual flashcard into a set \u003c/ins\u003e"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "3. Repeat 2 until all flashcards for the set are added.  "
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "**Extensions:**"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "* 1a. Missing parameter - empty set name. "
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "   * a1. StudyBananas shows a missing parameter error message.  "
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "#### Use case: UC02 Create and add an individual flashcard into a set"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "1. User defines the question and answer of the flashcard."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "2. User \u003cins\u003e UC03 see all existing flashcard sets \u003c/ins\u003e."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "3. User adds the flashcard to the set using the flashcard set index.  "
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "**Extensions:**"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* 1a. Missing parameter - question, answer or index of the flashcard set."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "   * a1. Shows missing parameter error message.  "
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "#### Use case: UC03 See all existing flashcard sets"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "1. User requests for the list of flashcards."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "2. StudyBananas shows the list of flashcards.  "
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "#### Use case: UC04 Delete a flashcard set"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "1. User \u003cins\u003e UC03 see all existing flashcard sets. \u003c/ins\u003e"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "2. User enters the index to delete the set.  "
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": " "
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "**Extensions**:"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "* 1a. There are no existing flashcard sets.  "
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* 2a. Invalid index"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  * a1. StudyBananas shows an error message.  "
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    "
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "#### Use case: UC05 See all flashcards in a flashcard set"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "**MSS**:"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "1. User \u003cins\u003e UC03 see all existing flashcard sets \u003c/ins\u003e."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "2. User requests for the list of flashcards using a given flashcard set index."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "3. StudyBananas shows the list of flashcards for the requested flashcard set.  "
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "**Extensions**:"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "* 1a. Flashcard set is not present at entered index."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    * a1. StudyBananas shows an error to indicate the invalid index.  "
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "#### Use case: UC06 Delete an individual flashcard from a set    "
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "**MSS**:"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "1. User \u003cins\u003e UC05 see all flashcards in a set. \u003c/ins\u003e"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "2. User enter the index of the set and the individual flashcard to delete it.  "
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "**Extensions**:"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* 1a. The list is empty.  "
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* 2a. The given index is invalid."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    * a1. StudyBananas shows an error message.  "
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "   Use case resumes at step 2."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "#### Use case: UC07 Quiz of flashcard set (no storage of answer)"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "1. User requests a quiz of a given flashcard set."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "2. StudyBananas shows the first question in the flashcard set."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "3. User manually answers the question."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "4. User flips the flashcard to check the answer."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "5. User indicates whether the input answer is correct or incorrect."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "6. StudyBananas loads the next flashcard.  "
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "   Step 2 - 6 are repeated until reaching the end of the flashcard set, or the User wants to stop the quiz halfway.  "
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "   Use case ends.  "
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    "
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "* 2a. The flashcard set is empty.  "
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "* 2b. The flashcard set does not exist.  "
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  * 2b1. StudyBananas shows an error message.  "
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  User case ends."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "* 5a. The answer indicator is invalid.  "
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  * 5a1. StudyBananas shows an error message.   "
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  User case resumes at step 5."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* *a. At any time, User chooses to cancel the quiz."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "   * *a1. StudyBananas requests to confirm the cancellation."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "   * *a2. User confirms the cancellation.  "
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "#### Use case: UC08 Quiz of flashcard set (with storage of answer)"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "1.  User requests a quiz of a given flashcard set."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "2.  StudyBananas shows the first question in the flashcard set."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "3.  User keys in their answer to the question."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "4.  User flips the flashcard to check the answer."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "5.  User indicates whether the input answer is correct or incorrect."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "6.  StudyBananas stores the answer to each question and whether the answer was correct."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "7.  StudyBananas loads the next flashcard.  "
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    Step 2 - 6 are repeated until reaching the end of the flashcard set, or the User wants to stop the quiz halfway.  "
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends.  "
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* 2a. The flashcard set is empty.  "
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* 2b. The flashcard set does not exist."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  * 2b1. StudyBananas shows an error message.  "
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* 5a. The answer indicator is invalid  "
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  * 5a1. StudyBananas shows an error message.  "
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  User case resumes at step 5."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* *a. At any time, User chooses to cancel the quiz."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    * *a1. StudyBananas requests to confirm the cancellation."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    * *a2. User confirms the cancellation.  "
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "#### Use case: UC09 Add a task to the task list"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "1.  User requests to add a new task to the list."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "2.  StudyBananas asks for confirmation."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "3.  User confirms it."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "4.  StudyBananas adds the task to the task list.  "
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* 2a. User disconfirms the request."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "   * a1. StudyBananas stops the process.  "
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* *a. Cancellation"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "   * a1. User asks for cancellation of current command.  "
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    "
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "#### Use case: UC10 Delete a task"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "1. The user requests to delete a certain task."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "2. The system asks for confirmation."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "3. The user confirms it."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "4. The system deletes the task.  "
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* 2a. Disconfirmation"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    * 2a1. User disconfirms it."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    * 2a2. System stops implementation.  "
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* 3a. Invalid task specified"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    * 3a1. System signals to the user that the task is invalid.  "
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* *a. Cancellation"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "   * a1. User asks for cancellation of current command.  "
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "#### Use case: UC11 Search for tasks"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "1. The user requests to search for tasks."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "2. The system asks for query key."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "3. The user types in the query key."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "4. The system replies with all the tasks that matched the query key.  "
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* *a. Cancellation"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "   * *a1. User asks for cancellation of current command.  "
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "#### Use case: UC12 View all tasks"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "**MSS**:"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "1. User requests to view all the tasks."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "2. StudyBananas shows all the tasks.  "
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "#### Use case: UC13 View quiz score and past attempt"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "**MSS**:"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "1. User requests to \u003cins\u003e UC03 see all available flashcard sets \u003c/ins\u003e"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "2. User requests for the score and past attempt of a quiz regarding a flashcard set using a given flashcard set index"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "3. StudyBananas shows the score and most recent past attempt for the requested flashcard set.  "
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "**Extensions**:"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* 2a. Flashcard set is not present at entered index"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "   * a1. StudyBananas shows an error to indicate the invalid index  "
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "   Use case resumes at step 2."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* 3a. Flashcard set has not been quizzed yet"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "   * a1. StudyBananas shows an error to indicate that flashcard set has not been quizzed  "
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "2.  Should work without requiring an installer."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "3.  The system should work on a 64-bit environment."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "4.  The system should start up in no more than 2 seconds."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "5.  The system should response to user input in less than 1 second."
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "6.  The product should be for a single user."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "7.  The product should be usable by a student who has little to much experience in using computer."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "8.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "9.  The data should be stored locally and should be in a human editable text file. "
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "* **CLI**: Command Line Interface"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "* **GUI**: Graphical User Interface"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "* **Flashcard**: An object containing a question and the corresponding answer."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "* **Flashcard Set**: A set of flashcards relevant to a specific topic. "
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "### Deleting a person"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "1. Deleting a person while all persons are being shown"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 141,
      "cupofjoee": 8,
      "petrickjerico": 2,
      "chuyiting": 117,
      "bowei-yu": 210,
      "-": 333
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "StudyBananas is a desktop study companion app that helps students centralize all their study tasks and sets up focused study sessions into one place, optimized for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). Our main target users are secondary and tertiary students who study and use computer frequently. This user guide aims to equip you with all necessary understanding to use StudyBananas effectively."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "- [**Quick start**](#quick-start)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "- [**Features**](#features)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  * [Viewing help: `help`](#viewing-help-help)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  * [Exit program: `exit`](#exit-program-exit)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  * [Add a flashcard set: `add flset`](#add-a-flashcard-set-add-flset)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  * [List all existing flashcard sets: `list flset`](#list-all-existing-flashcard-sets-list-flset)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  * [Delete a flashcard set: `delete flset`](#delete-a-flashcard-set-delete-flset)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  * [Add a flashcard into a flashcard set: `add fl`](#add-a-flashcard-into-a-flashcard-set-add-fl)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  * [List flashcards in a flashcard set: `list fl`](#list-flashcards-in-a-flashcard-set-list-fl)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  * [Delete a flashcard in a flashcard set: `delete fl`](#delete-a-flashcard-in-a-flashcard-set-delete-fl)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  * [Quiz of flashcard set: `quiz flset`](#quiz-of-flashcard-set-quiz-flset)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  * [View last quiz attempt: `view flset quiz`](#view-last-quiz-attempt-view-flset-quiz)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "  * [Add a task: `add task`](#add-a-task)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  * [List tasks: `list task`](#list-tasks)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  * [Delete a task: `delete task`](#delete-a-task)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  * [Search for a task: `search task`](#search-for-a-task)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  * [Saving the data](#saving-the-data)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  * [Archiving data files `[coming in v2.0]`](#archiving-data-files-coming-in-v20)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "- [**FAQ**](#faq)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "- [**Command summary**](#command-summary)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  * [General commands](#general-commands)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  * [Flashcard commands](#flashcard-commands)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  * [Quiz commands](#quiz-commands)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  * [Task list commands](#task-list-commands)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick start"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "2. Download the latest `study-bananas.jar` from [here]()."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "3. Copy the file to the folder you want to use as the _home folder_ for your StudyBananas."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "4. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "5. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "   * **`list`**`flset` : Lists all flashcard sets"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "   * **`add`**`flset Chemistry` : Add a new empty set with name `Chemistry`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "   * **`delete`**`flset:3` : Deletes the 3rd flashcard set in the current list of flashcard sets."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "   * **`add`**`task T:CS2100 d: Pipeline tutorial t:2020-10-10 11:00` : Adds Doing CS2100 task to the task list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`exit`** : Exits the app."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "6. Refer to the [Features](#features) below for details of each command."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "**Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "* Words wrapped with angled brackets `\u003c\u003e` are the parameters to be supplied by you.\u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "  e.g. in `add flset:\u003csetname\u003e`, `\u003csetname\u003e` is a parameter which can be used as `add flset:Chemistry`."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "* Words wrapped with square brackets `[]` are optional parameters to be supplied by you.\u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  e.g. in `add task T:\u003ctitle\u003e d:[description] t:[time]`, `[description]` and `[time]` are optional parameters."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "  e.g. if the command specifies `flset:\u003csetindex\u003e q:\u003cquestion\u003e a:\u003canswer\u003e`, `a:\u003canswer\u003e q:\u003cquestion\u003e flset:\u003csetindex\u003e` is also acceptable."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "\u003cp\u003e\u0026nbsp;\u003c/p\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "### **View help**: `help`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "Lists all available commands."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "\u003cp\u003e\u0026nbsp;\u003c/p\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "### **Exit program**: `exit`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "Exits the program"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "\u003cp\u003e\u0026nbsp;\u003c/p\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "### **Add a flashcard set**: `add flset`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "Adds a new flashcard set."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "Format: `add flset name:\u003csetname\u003e​`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "- `\u003csetname\u003e` can accept names separated with spaces."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "- if `\u003csetname\u003e` is already used, the app will request a new `\u003csetname\u003e`."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "- `add flset name:Japanese`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "- `add flset name:Economics – Micro`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "\u003cp\u003e\u0026nbsp;\u003c/p\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "### **List all existing flashcard sets**: `list flset`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "Shows all existing flashcard sets - index and name."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "Format: `list flset`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "\u003cp\u003e\u0026nbsp;\u003c/p\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "### **Delete a flashcard set**: `delete flset`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "Deletes an existing flashcard set and all flashcards that it contains."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "Format: `delete flset \u003csetindex\u003e`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "- `\u003csetindex\u003e` should be a positive integer."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "- `\u003csetindex\u003e` will throw an error if `setindex` does not exist."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "- `delete flset 1`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "- `delete flset 2`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "\u003cp\u003e\u0026nbsp;\u003c/p\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "### **Add a flashcard into a flashcard set**: `add fl`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Adds a single flashcard with a question and an answer in a specified flashcard set."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "Format:` add fl flset:\u003csetindex\u003e q:\u003cquestion\u003e a:\u003canswer\u003e`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "- `\u003cquestion\u003e`, `\u003canswer\u003e` and `\u003csetindex\u003e` fields are compulsory."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "- `\u003cquestion\u003e` and `\u003canswer\u003e` can accept strings that are capitalized or separated with spaces."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "- `\u003csetindex\u003e` should be a positive integer."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "- `\u003csetindex\u003e` will throw an error if `setindex` does not exist."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "- `add fl flset:1 q:konnichiwa a:hello `"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "- `add fl flset:2 q:When demand goes up, what happens to price? a:Price increases`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "\u003cp\u003e\u0026nbsp;\u003c/p\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "### **List flashcards in a flashcard set**: `list fl`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Shows the list of flashcards with details: question, answer and index."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "Format: `list fl \u003csetindex\u003e`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "- `\u003csetindex\u003e` should be a positive integer."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "- `\u003csetindex\u003e` will throw an error if `setindex` does not exist."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "- `list fl 1`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "- `list fl 2`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "\u003cp\u003e\u0026nbsp;\u003c/p\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "### **Delete a flashcard in a flashcard set**: `delete fl`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Deletes a single flashcard in a specified flashcard set."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "Format: `delete fl flset:\u003csetindex\u003e fl:\u003cindex\u003e`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "- `\u003csetindex\u003e` and `\u003cindex\u003e` fields are compulsory."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "- `\u003csetindex\u003e` and `\u003cindex\u003e` should be a positive integer."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "- `\u003csetindex\u003e` and `\u003cindex\u003e` will throw an error if either does not exist."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "- `delete fl flset:1 fl:3`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "\u003cp\u003e\u0026nbsp;\u003c/p\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "### **Quiz of flashcard set**: `quiz flset`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "Shows the questions of the specific flashcard set. Depending on the command, it stores the answers for reference in the last attempt. "
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "Follow-up commands are required to continue with the quiz."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Format: `quiz flset:\u003csetindex\u003e`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "Examples: "
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "`quiz flset:2`, `quiz flset:3`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "As seen below, the first question of the first flashcard within the flashcard set appears, as well as a prompt for you to type in the next command, `flip`, `ans:\u003canswer\u003e` or `cancel`."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "\u003cimg src\u003d\"images/question.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "- `flip`: Displays the answer to the flashcard question."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "- `ans:\u003canswer\u003e`: Stores your answer. Also, displays the answer to the flashcard question."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "- `cancel`: Stops the quiz "
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "If the command entered is `flip` or `ans:\u003canswer\u003e`, the correct answer will be displayed, and there will be a prompt to enter the next command, `c`, `w` or `cancel`."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "\u003cimg src\u003d\"images/answer.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "Result when `flip` command is entered"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "\u003cimg src\u003d\"images/saved answer.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "Result when `ans:\u003canswer\u003e` command is entered"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "Based on the correct answer displayed, evaluate the answer provided. If the question is answered correctly, type `c`. Else, type `w`. This will be taken into account when tabulating the quiz score."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "- `c`: Indicates that the question on the flashcard is answered correctly."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "- `w`: Indicates that the question is answered wrongly."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "- `cancel`: Stops the quiz"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "The next question of the next flashcard will be displayed. Steps 1-2 are repeated until all flashcards in the set are displayed and answered."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "Once the quiz stops, the score will be displayed. This score can be viewed when viewing the last attempt of the flashcard set."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "\u003cp\u003e\u0026nbsp;\u003c/p\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "At any point should you enter a command not pertaining to quiz, "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "they may key in `refresh` to see their current quiz question/answer."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "### **View last quiz attempt**: `quiz score flset`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "Shows the last attempt of a specific flashcard set."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "It comprises of the following information:"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "- Score (percentage out of 100%), and"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "- List of questions each followed by answers from the last attempt"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "- Indicators of whether the question is answered correctly (shown as tick and cross) beside each question"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "\u003cimg src\u003d\"images/view score.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "Format: `quiz score flset:\u003csetindex\u003e`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "Examples: "
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "`quiz score flset:9`, `quiz score flset:16`"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "\u003cp\u003e\u0026nbsp;\u003c/p\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "### **Add a task**: `add task`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "Adds a study task to the task list.  "
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "  "
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Format: `add task: T:\u003ctitle\u003e d:[description] t:[time]`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "- `\u003ctitle\u003e` field is compulsory."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "- `\u003ctitle\u003e` can accept strings that are capitalized or separated with spaces."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "- `[description]` field is optional."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "- `[time]` field is optional if you want to set a deadline or time limit for the task."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "- `add task T: CS2100 d: Pipeline tutorial`"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "- `add task T: CS2103T d: iP submission t: 2020-09-17 23:59`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "\u003cp\u003e\u0026nbsp;\u003c/p\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "### **List tasks**: `list task`"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "Shows a list of all the added study tasks.  "
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "Format: `list task`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "- `list task`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "\u003cp\u003e\u0026nbsp;\u003c/p\u003e"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "### **Delete a task**: `delete task`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "Deletes the specified task from the study bananas.  "
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Format: `delete task \u003cindex\u003e`  "
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "- Deletes the task at the specified index."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "- The index refers to the index number shown in the displayed task list."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "- The index must be a positive integer 1, 2, 3, …​"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "- `delete task 2`: Deletes the task at index 2 in the the displayed task list."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "- `delete task 6`: Deletes the task at index 6 in the the displayed task list."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "\u003cp\u003e\u0026nbsp;\u003c/p\u003e"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "### **Search for a task**: `search task`"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Finds the tasks of which information contains any of the given keywords (for `title`) "
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "or all of the given keywords (`description` and `dateTime`).  "
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Format: `search task \u003ckeyword\u003e`"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "Basic Usage: "
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "- The search is case-insensitive. e.g. `homework` matches `Homework`."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "- The order of the keywords does not matter. e.g. `CS2103T topics` matches `topics CS2103T`."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "- Start_time, period and name of the tasks are all searched."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "- Partial words match e.g. `CS2013` matches `CS2103T`."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "Advanced Usage:"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "- `or` search: Tasks matching at least one keyword will be returned e.g. `CS2103T`, `CS2101`, `ST2334` returns `CS2103T homework`, `CS2101 homework`, and `ST2334 homework`. "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "- `and` search (search is and search by default): Tasks matching all the keywords will be returned e.g. `CS2103t week 7` returns `CS2103T homework week 7`"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "Examples: \u003cbr /\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "`search task CS2103t` \u003cbr /\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "returns `CS2103T topics quiz week 7` and `CS2103T topics quiz week 8` \u003cbr /\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "or `search task CS2103t CS2101`  \u003cbr /\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "returns `CS2103t topics quiz week 7` and `CS2101 OP1`"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "\u003cp\u003e\u0026nbsp;\u003c/p\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "### **Edit a task**: `edit task`"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Edits the specified task\u0027s details with the input information.  "
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Format: `edit task \u003cindex\u003e T:[title] d:[description] t:[time] dur:[duration]`"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "- `\u003cindex\u003e` is the compulsory field."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "- `\u003cindex\u003e` refers to the index number shown in the displayed task list."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "- You can key in multiple `\u003cindex\u003e`, but only the task at the first `index` will be edited."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "- `[title]`, `[description]`, `[time]` and `[duration]` are the new information that you want to update the task at the specified index."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "- `[title]`, `[description]`, `[time]` and `[duration]` are optional but you need to include at least one of them in the command."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "- `[title]`, `[description]`, `[time]` and `[duration]` still need to conform to its respective expected format.  "
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "- You can key in multiple `[title]`, `[description]`, `[time]` and `[duration]`, but only the last information of each field will be updated to the task.  "
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "- `edit task 1 T: Internship`: Edits the original title of the task at `index 1` to be `Internship`."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "- `edit task 2 d: Pipleline Tutorial homework dur: 60`: Edits the original description and duration of the task at `index 2` to be `Pipeline Tutorial homework` and `60` respectively.  "
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "- `edit task 5 6 T: CS2103T d: Post-lecture quiz t: 2020-10-31 13:00 dur: 60`: Edits the original title, description, time and"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " duration of the task at `index 5` to be `CS2103T`, `Post-lecture quiz`, `2020-10-31 13:00` and `60` respectively.  "
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "- `edit task 2 d: Pipleline Tutorial homework dur: 60 d: Assignment Cache`: Edits the original description and duration of the task at `index 2` to be `Assigment Cache` and `60` respectively.  "
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "\u003cp\u003e\u0026nbsp;\u003c/p\u003e"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "### **Saving the data**"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "StudyBananas data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "\u003cp\u003e\u0026nbsp;\u003c/p\u003e"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "### Archiving data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "_{explain the feature here}_"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous StudyBananas home folder."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "### General commands"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "| Action               | Format, Examples |"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "| -------------------- | ---------------- |"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "| **Viewing Help**     | `help`           |"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "| **Exit application** | `exit`           |"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "\u003cp\u003e\u0026nbsp;\u003c/p\u003e"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "### Flashcard commands"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "| Action                                 | Format, Examples                                                                                                                         |"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "| -------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "| **Add flashcard set**                  | `add flset:\u003csetname\u003e` \u003cbr\u003e e.g., `add flset:Japanese`                                                                                    |"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "| **List all flashcard sets**            | `list flset` \u003cbr\u003e                                                                                                                        |"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "| **Delete flashcard set**               | `delete flset:\u003csetindex\u003e` \u003cbr\u003e  e.g., `delete flset:1`                                                                                   |"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "| **Add flashcard in a specified set**   | `add flset:\u003csetindex\u003e q:\u003cquestion\u003e a:\u003canswer\u003e` \u003cbr\u003e e.g., `add flset:2 q:When demand goes up, what happens to price? a:Price increases.` |"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "| **List flashcards in a specified set** | `list flset:\u003csetindex\u003e` \u003cbr\u003e e.g., `list fl:1`                                                                                           |"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "| **Delete flashcard in specified set**  | `delete flset:\u003csetindex\u003e fl:\u003cindex\u003e` \u003cbr\u003e e.g., `delete flset:1 fl:1`                                                                    |"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "\u003cp\u003e\u0026nbsp;\u003c/p\u003e"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "### Quiz commands"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "| Action                           | Format, Examples                                                                                     |"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "| -------------------------------- | ---------------------------------------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "| **Quiz flset**                   | `quiz flset:\u003csetindex\u003e` \u003cbr\u003e e.g., `quiz flset:7`, `flip`, `ans:\u003canswer\u003e`, `c/w`, `cancel`, `refresh`|"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "| **Quiz score flset**             | `quiz score flset` \u003cbr\u003e  e.g., `quiz score flset:6`                                                  |"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "\u003cp\u003e\u0026nbsp;\u003c/p\u003e"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "### Task list commands"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "| Action              | Format, Examples                                                                                                                           |"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------ |"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "| **Add task**        | `add task T:\u003ctitile\u003e d:[description] t:[time]` \u003cbr\u003e e.g., `add task T:CS2100 d: Pipeline tutorial`, `add task T:CS2103T d:iP submission t: 2020-09-17 23:59` |"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "| **List tasks**      | `list task` \u003cbr\u003e                                                                                                                           |"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "| **Delete task**     | `delete task \u003cindex\u003e` \u003cbr\u003e  e.g., `delete task 6`                                                                                          |"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "| **Search for task** | `search task \u003ckeywords\u003e` or `search \u003ckeywords\u003e` \u003cbr\u003e e.g., `search task CS2103T` or `search CS2103T`                                       |"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "| **Edit task**       | `edit task \u003cindex\u003e T:[title] d:[description] t:[time] dur:[duration]` \u003cbr\u003e e.g., `edit task 2 T: CS2103T`, `edit task 1 d: Debug remaining errors dur: 60` |"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 83,
      "cupofjoee": 120,
      "petrickjerico": 6,
      "chuyiting": 19,
      "bowei-yu": 45,
      "-": 98
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "title: StudyBananas"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-F12-2/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-F12-2/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-F12-2/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-F12-2/tp)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "**StudyBananas is a desktop study companion app that helps students centralize all their study tasks and set up focused study sessions in one place**. "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* If you are interested in using StudyBananas, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "* If you are interested about developing StudyBananas, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "**Acknowledgments**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "* This project is morphed from the AddressBook-Level3 project, created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "petrickjerico": 5,
      "bowei-yu": 4,
      "-": 12
    }
  },
  {
    "path": "docs/team/petrickjerico.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "title: Petrick Jerico\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "## Project: StudyBananas"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "StudyBananas is a **desktop study companion app that helps students centralize all their study tasks and set up focused study sessions into one place, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "Given below are my contributions to the project (to be updated)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "* **New Feature**:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "* **Code contributed**:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* **Tools**:"
      }
    ],
    "authorContributionMap": {
      "petrickjerico": 6,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.FlashcardBank;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.systemlevelmodel.QuizRecords;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlyFlashcardBank;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlyQuizRecords;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlySchedule;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.Schedule;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.storage.flashcardstorage.FlashcardBankStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.storage.flashcardstorage.JsonFlashcardBankStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.storage.quizstorage.JsonQuizRecordsStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.storage.quizstorage.QuizRecordsStorage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.storage.schedulestorage.JsonScheduleStorage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.storage.schedulestorage.ScheduleStorage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ScheduleStorage scheduleStorage \u003d new JsonScheduleStorage(userPrefs.getScheduleFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        FlashcardBankStorage flashcardBankStorage \u003d new JsonFlashcardBankStorage(userPrefs.getFlashcardBankFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        QuizRecordsStorage quizRecordsStorage \u003d new JsonQuizRecordsStorage(userPrefs.getQuizRecordsFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        storage \u003d new StorageManager(scheduleStorage, flashcardBankStorage,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                quizRecordsStorage, addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Optional\u003cReadOnlySchedule\u003e scheduleOptional;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        Optional\u003cReadOnlyFlashcardBank\u003e flashcardBankOptional;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Optional\u003cReadOnlyQuizRecords\u003e quizRecordsOptional;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ReadOnlyAddressBook initialAddressBookData;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ReadOnlySchedule initialScheduleData;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        ReadOnlyFlashcardBank initialFlashcardBankData;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        ReadOnlyQuizRecords initialQuizRecordsData;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            if (addressBookOptional.isEmpty()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                logger.info(\"AddressBook data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            initialAddressBookData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            initialAddressBookData \u003d new AddressBook();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            initialAddressBookData \u003d new AddressBook();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            scheduleOptional \u003d storage.readSchedule();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            if (scheduleOptional.isEmpty()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                logger.info(\"Schedule data file not found. Will be starting with a sample Schedule\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            initialScheduleData \u003d scheduleOptional.orElseGet(SampleDataUtil::getSampleSchedule);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty Schedule\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            initialScheduleData \u003d new Schedule();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Schedule\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            initialScheduleData \u003d new Schedule();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            flashcardBankOptional \u003d storage.readFlashcardBank();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            if (flashcardBankOptional.isEmpty()) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                logger.info(\"FlashcardBank data file not found. Will be starting with a sample FlashcardBank\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            initialFlashcardBankData \u003d flashcardBankOptional.orElseGet(SampleDataUtil::getSampleFlashcardBank);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty FlashcardBank\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            initialFlashcardBankData \u003d new FlashcardBank();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty FlashcardBank\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            initialFlashcardBankData \u003d new FlashcardBank();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            quizRecordsOptional \u003d storage.readQuizRecords();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            if (quizRecordsOptional.isEmpty()) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                logger.info(\"Quiz Records data file not found. Will be starting with a sample FlashcardBank\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            initialQuizRecordsData \u003d quizRecordsOptional.orElseGet(SampleDataUtil::getSampleQuizRecords);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty Quiz Record\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            initialQuizRecordsData \u003d new QuizRecords();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Quiz Record\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            initialQuizRecordsData \u003d new QuizRecords();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return new ModelManager(initialAddressBookData, userPrefs, initialScheduleData,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                initialFlashcardBankData, initialQuizRecordsData);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        logger.info(\"Starting Study Bananas \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Study Bananas ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            Platform.exit();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            System.exit(0);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 25,
      "chuyiting": 39,
      "bowei-yu": 28,
      "-": 171
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String MESSAGE_TASKS_LISTED_OVERVIEW \u003d \"%1$d tasks listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final String MESSAGE_INVALID_TASK_DISPLAYED_INDEX \u003d \"The task index provided is invalid\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final String MESSAGE_DUPLICATED_TASK \u003d \"Operation results in duplicated task\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final String MESSAGE_INVALID_FLASHCARDSET_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            \"The flashcard set index provided is invalid\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public static final String MESSAGE_INVALID_FLASHCARD_INDEX \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            \"The flashcard index provided is invalid\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 2,
      "cupofjoee": 2,
      "petrickjerico": 2,
      "chuyiting": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Version} with the given version details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                versionMatcher.group(4) !\u003d null);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 1,
      "-": 115
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import com.fasterxml.jackson.datatype.jdk8.Jdk8Module;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static final ObjectMapper objectMapper \u003d new ObjectMapper().registerModule(new Jdk8Module())"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            .findAndRegisterModules()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String myCheck \u003d toJsonString(objectToSerialize);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 4,
      "-": 142
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.address.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlyFlashcardBank;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlySchedule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Returns the Schedule."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @see seedu.address.model.Model#getSchedule()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    ReadOnlySchedule getSchedule();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of tasks */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of tasks */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    ObservableList\u003cTask\u003e getUpcomingTaskList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Returns the user prefs\u0027 schedule file path."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    Path getScheduleFilePath();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Returns the Flashcard Bank."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * @see seedu.address.model.Model#getSchedule()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    ReadOnlyFlashcardBank getFlashcardBank();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of flashcard sets */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    ObservableList\u003cFlashcardSet\u003e getFilteredFlashcardSetList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Returns the user prefs\u0027 flashcard bank file path."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    Path getFlashcardBankFilePath();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /** Returns the selected flashcards to view */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    FlashcardSet getFlashcardSetToView();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "petrickjerico": 24,
      "chuyiting": 24,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.parser.StudyBananasParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.address.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlyFlashcardBank;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlySchedule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final StudyBananasParser studyBananasParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        studyBananasParser \u003d new StudyBananasParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Command\u003c? super Model\u003e command \u003d studyBananasParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            storage.saveSchedule(model.getSchedule());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            storage.saveFlashcardBank(model.getFlashcardBank());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            storage.saveQuizRecords(model.getAllQuizRecords());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public ReadOnlySchedule getSchedule() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return model.getSchedule();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return model.getFilteredTaskList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public ObservableList\u003cTask\u003e getUpcomingTaskList() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return model.getUpcomingTaskList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Path getScheduleFilePath() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return model.getScheduleFilePath();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public ReadOnlyFlashcardBank getFlashcardBank() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        return model.getFlashcardBank();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public ObservableList\u003cFlashcardSet\u003e getFilteredFlashcardSetList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        return model.getFilteredFlashcardSetList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public Path getFlashcardBankFilePath() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        return model.getFlashcardBankFilePath();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public FlashcardSet getFlashcardSetToView() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        return model.getFlashcardSetToView();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "petrickjerico": 22,
      "cupofjoee": 1,
      "chuyiting": 28,
      "bowei-yu": 1,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public abstract class Command\u003cT\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param model which the command should operate on."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public abstract CommandResult execute(T model) throws CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 3,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExampleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " * Example command for parser structure."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class ExampleCommand extends Command\u003cModel\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/addressbookcommands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.logic.commands.addressbookcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.AddressBookModel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class AddCommand extends Command\u003cAddressBookModel\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public CommandResult execute(AddressBookModel model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 6,
      "-": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/addressbookcommands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.logic.commands.addressbookcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.AddressBookModel;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class ClearCommand extends Command\u003cAddressBookModel\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public CommandResult execute(AddressBookModel model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                || (other instanceof ClearCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 12,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/addressbookcommands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.logic.commands.addressbookcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.AddressBookModel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class DeleteCommand extends Command\u003cAddressBookModel\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public CommandResult execute(AddressBookModel model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 6,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/addressbookcommands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.logic.commands.addressbookcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.AddressBookModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class EditCommand extends Command\u003cAddressBookModel\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public CommandResult execute(AddressBookModel model) throws CommandException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 6,
      "-": 222
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/addressbookcommands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.logic.commands.addressbookcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.AddressBookModel;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class ExitCommand extends Command\u003cAddressBookModel\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public CommandResult execute(AddressBookModel model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 6,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/addressbookcommands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.logic.commands.addressbookcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.AddressBookModel;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class FindCommand extends Command\u003cAddressBookModel\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public CommandResult execute(AddressBookModel model) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 6,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/addressbookcommands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.logic.commands.addressbookcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.AddressBookModel;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class HelpCommand extends Command\u003cAddressBookModel\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public CommandResult execute(AddressBookModel model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 6,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/addressbookcommands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.logic.commands.addressbookcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.AddressBookModel;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class ListCommand extends Command\u003cAddressBookModel\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public CommandResult execute(AddressBookModel model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 6,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/flashcardcommands/AddFlashcardCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.address.logic.commands.flashcardcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FLASHCARDSET;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.FlashcardModel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.address.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": " * Regulates the behaviour of a {@code Command} that adds a {@code Flashcard}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": " * to a {@code FlashcardSet}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class AddFlashcardCommand extends Command\u003cFlashcardModel\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add fl\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New flashcard added: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FLASHCARD \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            \"This flashcard already exists in the given flashcard set.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a flashcard to a flashcard set. \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            + PREFIX_FLASHCARDSET + \"\u003cflashcardsetindex\u003e \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            + PREFIX_QUESTION + \"\u003cquestion\u003e \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            + PREFIX_ANSWER + \"\u003canswer\u003e \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            + PREFIX_FLASHCARDSET + \"1 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            + PREFIX_QUESTION + \"When demand goes up, what happens to price? \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            + PREFIX_ANSWER + \"Price increases \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final Flashcard toAdd;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final Index flashcardSetIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Creates a {@code Command} to add a {@code Flashcard}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * in the specified {@code FlashcardSet}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public AddFlashcardCommand(Flashcard flashcard, Index targetIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        requireNonNull(flashcard);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        toAdd \u003d flashcard;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        flashcardSetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public CommandResult execute(FlashcardModel model) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            FlashcardSet flashcardSet \u003d model.getFlashcardSet(flashcardSetIndex);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            if (model.hasFlashcard(flashcardSet, toAdd)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_FLASHCARD);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            model.addFlashcard(flashcardSet, toAdd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FLASHCARDSET_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                || (other instanceof AddFlashcardCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddFlashcardCommand) other).toAdd));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 51,
      "petrickjerico": 14,
      "bowei-yu": 6,
      "chuyiting": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/flashcardcommands/AddFlashcardSetCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.address.logic.commands.flashcardcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FLASHCARDSET_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.address.model.FlashcardModel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.address.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": " * Regulates the behaviour of a {@code Command} that adds a {@code FlashcardSet}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "public class AddFlashcardSetCommand extends Command\u003cFlashcardModel\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add flset\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New flashcard set added: %1$s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FLASHCARD_SET \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            \"This flashcard set already exists in the flashcard bank.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a flashcard set to the flashcard bank. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            + PREFIX_FLASHCARDSET_NAME + \"\u003cname\u003e\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            + COMMAND_WORD + \" \" + PREFIX_FLASHCARDSET_NAME + \"Japanese\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    private final FlashcardSet toAdd;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Creates a {@code Command} to add the specified {@code FlashcardSet}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public AddFlashcardSetCommand(FlashcardSet toAdd) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                || (other instanceof AddFlashcardSetCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddFlashcardSetCommand) other).toAdd));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public CommandResult execute(FlashcardModel model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        if (model.hasFlashcardSet(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_FLASHCARD_SET);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        model.addFlashcardSet(toAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 4,
      "petrickjerico": 50,
      "bowei-yu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/flashcardcommands/DeleteFlashcardCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.address.logic.commands.flashcardcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FLASHCARD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FLASHCARDSET;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.address.model.FlashcardModel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.address.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": " * Regulates the behaviour of a {@code Command} that deletes a {@code Flashcard}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": " * from a {@code FlashcardSet}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "public class DeleteFlashcardCommand extends Command\u003cFlashcardModel\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete fl\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public static final String MESSAGE_DELETE_FLASHCARD_SUCCESS \u003d \"Deleted flashcard: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            + \": Deletes a single flashcard in a specified flashcard set. \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            + \"identified by the index number used in the displayed flashcard set list.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            + PREFIX_FLASHCARDSET + \"\u003cindex (positive integer)\u003e\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            + PREFIX_FLASHCARD + \"\u003cindex (positive integer)\u003e\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            + PREFIX_FLASHCARDSET + \"1 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            + PREFIX_FLASHCARD + \"3\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    private final Index targetFlashcardSetIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    private final Index targetFlashcardIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Creates a {@code Command} to delete a specified {@code Flashcard}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * from a specified {@code FlashcardSet}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public DeleteFlashcardCommand(Index targetFlashcardSetIndex, Index targetFlashcardIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        this.targetFlashcardSetIndex \u003d targetFlashcardSetIndex;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        this.targetFlashcardIndex \u003d targetFlashcardIndex;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                || (other instanceof DeleteFlashcardCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                \u0026\u0026 targetFlashcardIndex.equals(((DeleteFlashcardCommand) other).targetFlashcardIndex) // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                \u0026\u0026 targetFlashcardSetIndex.equals(((DeleteFlashcardCommand) other).targetFlashcardSetIndex));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public CommandResult execute(FlashcardModel model) throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        List\u003cFlashcardSet\u003e lastShownFlashcardSetList \u003d model.getFilteredFlashcardSetList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        if (targetFlashcardSetIndex.getZeroBased() \u003e\u003d lastShownFlashcardSetList.size()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FLASHCARDSET_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        FlashcardSet flashcardSet \u003d model.getFlashcardSet(targetFlashcardSetIndex);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        if (targetFlashcardIndex.getZeroBased() \u003e\u003d flashcardSet.getSize()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FLASHCARD_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        Flashcard flashcardToDelete \u003d model.getFlashcard(flashcardSet, targetFlashcardIndex);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        model.deleteFlashcard(flashcardSet, targetFlashcardIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_FLASHCARD_SUCCESS, flashcardToDelete));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 3,
      "petrickjerico": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/flashcardcommands/DeleteFlashcardSetCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.address.logic.commands.flashcardcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.FlashcardModel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": " * Regulates the behaviour of a {@code Command} that deletes a {@code FlashcardSet}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class DeleteFlashcardSetCommand extends Command\u003cFlashcardModel\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete flset\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Flashcard set deleted: %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes a flashcard set.\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            + \"\u003cflashcardsetindex\u003e \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final Index flashcardSetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Creates a {@code Command} to delete a {@code FlashcardSet}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * with the specified {@code Index}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public DeleteFlashcardSetCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        flashcardSetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public CommandResult execute(FlashcardModel model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        List\u003cFlashcardSet\u003e flashcardSets \u003d model.getFilteredFlashcardSetList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        if (flashcardSetIndex.getZeroBased() \u003e\u003d flashcardSets.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FLASHCARDSET_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        FlashcardSet flashcardSetToDelete \u003d flashcardSets.get(flashcardSetIndex.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        model.deleteFlashcardSet(flashcardSetToDelete);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, flashcardSetToDelete));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                || (other instanceof DeleteFlashcardSetCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                \u0026\u0026 flashcardSetIndex.equals(((DeleteFlashcardSetCommand) other).flashcardSetIndex)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 45,
      "petrickjerico": 9,
      "chuyiting": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/flashcardcommands/ListFlashcardCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.address.logic.commands.flashcardcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_FLASHCARDS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.address.model.FlashcardModel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": " * Regulates the behaviour of a {@code Command} that lists down"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": " * {@code Flashcard}s of a {@code FlashcardSet}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "public class ListFlashcardCommand extends Command\u003cFlashcardModel\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list fl\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all flashcard in the selected flashcard set\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists flashcards in a flashcard set.\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            + \"\u003cflashcardsetindex\u003e \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    private final Index flashcardSetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Creates a {@code Command} to list all {@code Flashcard}s"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * of a {@code FlashcardSet} with a specified {@code Index}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public ListFlashcardCommand(Index flashcardSetIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        this.flashcardSetIndex \u003d flashcardSetIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public CommandResult execute(FlashcardModel model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        model.updateFilteredFlashcardSetList(PREDICATE_SHOW_ALL_FLASHCARDS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        FlashcardSet flashcardSet \u003d model.getFlashcardSet(flashcardSetIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        List\u003cFlashcard\u003e flashcards \u003d flashcardSet.getFlashcards();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        model.setFlashcardSetToView(flashcardSet);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        return new CommandResult(String.format("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                MESSAGE_SUCCESS + \"\\n\" + \"There are %d flashcards\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                flashcards.size()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                || (other instanceof ListFlashcardCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                \u0026\u0026 flashcardSetIndex.equals(((ListFlashcardCommand) other).flashcardSetIndex)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 19,
      "petrickjerico": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/flashcardcommands/ListFlashcardSetCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.address.logic.commands.flashcardcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_FLASHCARDSETS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.FlashcardModel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": " * Regulates the behaviour of a {@code Command} that lists down {@code FlashcardSet}s"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class ListFlashcardSetCommand extends Command\u003cFlashcardModel\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list flset\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all flashcard sets\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public CommandResult execute(FlashcardModel model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        model.updateFilteredFlashcardSetList(PREDICATE_SHOW_ALL_FLASHCARDSETS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        ObservableList\u003cFlashcardSet\u003e flashcardSets \u003d model.getFilteredFlashcardSetList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        StringBuilder details \u003d new StringBuilder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        details.append(\"\\nThere are \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        details.append(flashcardSets.size());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        details.append(\" sets\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        flashcardSets.forEach(flashcardSet -\u003e details.append(\"\\n\" + flashcardSet.toString()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + details.toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return obj instanceof ListFlashcardSetCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 36,
      "petrickjerico": 5,
      "chuyiting": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/quizcommands/AnswerCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.address.logic.commands.quizcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.QuizModel;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.flashcard.Answer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class AnswerCommand extends Command\u003cQuizModel\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final Status STATUS \u003d Status.ON_QUESTION;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final String answer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public AnswerCommand(String answer) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public CommandResult execute(QuizModel model) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (!model.hasStarted()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new CommandException(QuizCommand.MESSAGE_QUIZ_NEVER_STARTED);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (!QuizCommand.getStatus().equals(STATUS)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new CommandException(QuizCommand.MESSAGE_UNAVAIL_ON_ANSWER);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        model.saveAnswer(answer);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Answer answer \u003d model.getAnswer();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        QuizCommand.setStatus(Status.ON_ANSWER);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        QuizCommand.updateCommandResult(answer.toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return new CommandResult(answer.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/quizcommands/CancelCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.address.logic.commands.quizcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.QuizModel;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class CancelCommand extends Command\u003cQuizModel\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"cancel\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Quiz cancelled! \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            + \"Don\u0027t worry, your cancelled quiz scores are not recorded.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public CommandResult execute(QuizModel model) throws CommandException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (!model.hasStarted()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new CommandException(QuizCommand.MESSAGE_QUIZ_NEVER_STARTED);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        model.cancelQuiz();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        QuizCommand.updateCommandResult(QuizCommand.MESSAGE_QUIZ_NEVER_STARTED);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 26,
      "chuyiting": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/quizcommands/CorrectCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.address.logic.commands.quizcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.QuizModel;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.flashcard.Question;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class CorrectCommand extends Command\u003cQuizModel\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final Status STATUS \u003d Status.ON_ANSWER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public CommandResult execute(QuizModel model) throws CommandException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (!model.hasStarted()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new CommandException(QuizCommand.MESSAGE_QUIZ_NEVER_STARTED);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (!QuizCommand.getStatus().equals(STATUS)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new CommandException(QuizCommand.MESSAGE_UNAVAIL_ON_QUESTION);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            model.tallyScore(true);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            Question nextQuestion \u003d model.getQuestion();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            QuizCommand.setStatus(Status.ON_QUESTION);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            QuizCommand.updateCommandResult(nextQuestion.toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            return new CommandResult(nextQuestion.toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        } catch (NullPointerException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            QuizCommand.updateCommandResult(null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            return new CommandResult(model.stopQuiz());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 38,
      "chuyiting": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/quizcommands/FlipCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.address.logic.commands.quizcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.QuizModel;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.flashcard.Answer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class FlipCommand extends Command\u003cQuizModel\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final Status STATUS \u003d Status.ON_QUESTION;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public CommandResult execute(QuizModel model) throws CommandException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (!model.hasStarted()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new CommandException(QuizCommand.MESSAGE_QUIZ_NEVER_STARTED);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (!QuizCommand.getStatus().equals(STATUS)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new CommandException(QuizCommand.MESSAGE_UNAVAIL_ON_ANSWER);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Answer answer \u003d model.getAnswer();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        QuizCommand.setStatus(Status.ON_ANSWER);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        QuizCommand.updateCommandResult(answer.toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return new CommandResult(answer.toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 31,
      "chuyiting": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/quizcommands/QuizCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.address.logic.commands.quizcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public abstract class QuizCommand {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String MESSAGE_QUIZ_NEVER_STARTED \u003d \"There are currently no ongoing quizzes\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String MESSAGE_UNAVAIL_ON_ANSWER \u003d"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            \"This command is not available now. Type \u0027c\u0027, \u0027w\u0027 or \u0027cancel\u0027 to continue\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String MESSAGE_UNAVAIL_ON_QUESTION \u003d"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            \"This command is not available now. Type \u0027flip\u0027 or \u0027cancel\u0027 to continue\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private static Status status;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private static String currentCommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static Status getStatus() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static void setStatus(Status state) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        status \u003d state;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Updates the current command result string"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @param commandResult provided after execution of quiz command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static void updateCommandResult(String commandResult) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (commandResult \u003d\u003d null) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            currentCommandResult \u003d MESSAGE_QUIZ_NEVER_STARTED;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        currentCommandResult \u003d commandResult;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static String getCurrentCommandResult() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (currentCommandResult \u003d\u003d null) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            currentCommandResult \u003d MESSAGE_QUIZ_NEVER_STARTED;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return currentCommandResult;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/quizcommands/RefreshCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.address.logic.commands.quizcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class RefreshCommand extends Command\u003cModel\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return new CommandResult(QuizCommand.getCurrentCommandResult());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/quizcommands/StartCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.address.logic.commands.quizcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.flashcard.Question;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.quiz.Quiz;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "//The abstraction has to be clarified."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class StartCommand extends Command\u003cModel\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String MESSAGE_QUIZ_IN_PROGRESS \u003d \"A quiz is already in progress! \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            + \"Key \u0027refresh\u0027 to see current question/answer. \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            + \"To stop the current quiz, key \u0027cancel\u0027.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String MESSAGE_FLASHCARD_SET_NONEXISTENT \u003d \"Flashcard set does not exist\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String MESSAGE_FLASHCARD_SET_EMPTY \u003d \"Flashcard set is empty\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public StartCommand(int index) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (model.hasStarted()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new CommandException(MESSAGE_QUIZ_IN_PROGRESS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            Index indexWrapper \u003d Index.fromOneBased(index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            FlashcardSet flashcardSet \u003d model.getFlashcardSet(indexWrapper);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            Quiz quiz \u003d new Quiz(this.index, flashcardSet);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            Question firstQuestion \u003d model.start(quiz);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            QuizCommand.setStatus(Status.ON_QUESTION);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            QuizCommand.updateCommandResult(firstQuestion.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            return new CommandResult(firstQuestion.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new CommandException(MESSAGE_FLASHCARD_SET_NONEXISTENT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new CommandException(MESSAGE_FLASHCARD_SET_EMPTY);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "petrickjerico": 3,
      "bowei-yu": 48,
      "chuyiting": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/quizcommands/Status.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.address.logic.commands.quizcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public enum Status {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    ON_ANSWER, ON_QUESTION"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 1,
      "bowei-yu": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/quizcommands/ViewScoreCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.address.logic.commands.quizcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.flashcard.FlashcardSetName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class ViewScoreCommand extends Command\u003cModel\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String MESSAGE_UNABLE_TO_VIEW \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            \"Unable to view score as quiz is in progress. \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                    + \"Cancel or finish the quiz to view recent quiz score.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String MESSAGE_QUIZ_NONEXISTENT \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            \"Quiz records for this flashcard set does not exist.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public ViewScoreCommand(int index) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (model.hasStarted()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new CommandException(MESSAGE_UNABLE_TO_VIEW);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            FlashcardSetName name \u003d model.getFlashcardSet(Index.fromOneBased(index)).getFlashcardSetName();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            String score \u003d model.getQuizRecords(name);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            QuizCommand.updateCommandResult(score);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            return new CommandResult(score);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new CommandException(MESSAGE_QUIZ_NONEXISTENT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/quizcommands/WrongCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.address.logic.commands.quizcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.QuizModel;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.flashcard.Question;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class WrongCommand extends Command\u003cQuizModel\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final Status STATUS \u003d Status.ON_ANSWER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public CommandResult execute(QuizModel model) throws CommandException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (!model.hasStarted()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new CommandException(QuizCommand.MESSAGE_QUIZ_NEVER_STARTED);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (!QuizCommand.getStatus().equals(STATUS)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new CommandException(QuizCommand.MESSAGE_UNAVAIL_ON_QUESTION);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            model.tallyScore(false);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            Question nextQuestion \u003d model.getQuestion();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            QuizCommand.setStatus(Status.ON_QUESTION);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            QuizCommand.updateCommandResult(nextQuestion.toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            return new CommandResult(nextQuestion.toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        } catch (NullPointerException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            QuizCommand.updateCommandResult(null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            return new CommandResult(model.stopQuiz());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 38,
      "chuyiting": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/schedulecommands/ScheduleAddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.logic.commands.schedulecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.ScheduleModel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class ScheduleAddCommand extends Command\u003cScheduleModel\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add task\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a task to the schedule. \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            + \"Parameters: \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            + PREFIX_TITLE + \"TITLE \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            + \"[\" + PREFIX_TIME + \"TIME] \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New task added: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in the schedule\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final Task toAdd;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Creates an ScheduleAddCommand to add the specified {@code Task}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public ScheduleAddCommand(Task task) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        toAdd \u003d task;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public CommandResult execute(ScheduleModel model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (model.hasTask(toAdd)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        model.addTask(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                || (other instanceof ScheduleAddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                \u0026\u0026 toAdd.equals(((ScheduleAddCommand) other).toAdd));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/schedulecommands/ScheduleDeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.logic.commands.schedulecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.ScheduleModel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class ScheduleDeleteCommand extends Command\u003cScheduleModel\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete task\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            + \": Deletes the task identified by the index number used in the displayed task list.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String MESSAGE_DELETE_TASK_SUCCESS \u003d \"Deleted Task: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public ScheduleDeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public CommandResult execute(ScheduleModel model) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        if (targetIndex.getOneBased() \u003e lastShownList.size()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Task taskToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        model.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_TASK_SUCCESS, taskToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                || (other instanceof ScheduleDeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ScheduleDeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 1,
      "cupofjoee": 1,
      "chuyiting": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/schedulecommands/ScheduleEditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "package seedu.address.logic.commands.schedulecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATED_TASK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.model.ScheduleModel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.model.task.DateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.model.task.Duration;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class ScheduleEditCommand extends Command\u003cScheduleModel\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit task\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            + \": Edits the task identified by the index number used in the displayed task list.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            + PREFIX_TITLE + \"TITLE (if any) \\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION (if any) \\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            + PREFIX_TIME + \"TIME (if any) \\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            + PREFIX_DURATION + \"DURATION (if any) \\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 T: Household dur: 60\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final String MESSAGE_EDIT_TASK_SUCCESS \u003d \"Edited Task: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private final Title title;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private final DateTime dateTime;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private final Duration duration;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Creates an ScheduleEditCommand to edit the specified task at {@code Index}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public ScheduleEditCommand("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            Index targetIndex, Title title, Description description, DateTime dateTime, Duration duration) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private Task generateEditedTask("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            Task taskToEdit, Title newTitle, Description newDescription, DateTime newDateTime, Duration newDuration) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Title title \u003d newTitle \u003d\u003d null ? taskToEdit.getTitle() : newTitle;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Description description \u003d newDescription \u003d\u003d null ? taskToEdit.getDescription().orElse(null) : newDescription;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        DateTime dateTime \u003d newDateTime \u003d\u003d null ? taskToEdit.getDateTime().orElse(null) : newDateTime;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Duration duration \u003d newDuration \u003d\u003d null ? taskToEdit.getDuration().orElse(null) : newDuration;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Task editedTask \u003d new Task(title, description, dateTime, duration);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return editedTask;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public CommandResult execute(ScheduleModel model) throws CommandException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        if (targetIndex.getOneBased() \u003e lastShownList.size()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            Task taskToEdit \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            Task editedTask \u003d generateEditedTask(taskToEdit, title, description, dateTime, duration);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            model.setTask(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_EDIT_TASK_SUCCESS, editedTask));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        } catch (DuplicateTaskException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATED_TASK);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                || (other instanceof ScheduleEditCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ScheduleEditCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 92
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/schedulecommands/ScheduleListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.logic.commands.schedulecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.ScheduleModel;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " * Lists all tasks in the Schedule to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class ScheduleListCommand extends Command\u003cScheduleModel\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list task\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all tasks.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public CommandResult execute(ScheduleModel model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return obj instanceof ScheduleListCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 1,
      "chuyiting": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/schedulecommands/ScheduleSearchCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.logic.commands.schedulecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.ScheduleModel;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.model.task.InfoContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class ScheduleSearchCommand extends Command\u003cScheduleModel\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"search task\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all tasks whose names contain any of \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" CS2100\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private final InfoContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public ScheduleSearchCommand(InfoContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public CommandResult execute(ScheduleModel model) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        model.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                String.format(Messages.MESSAGE_TASKS_LISTED_OVERVIEW, model.getFilteredTaskList().size()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                || (other instanceof ScheduleSearchCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                \u0026\u0026 predicate.equals(((ScheduleSearchCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 5,
      "chuyiting": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        private final int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /* AB3 Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /* StudyBananas Schedule Prefix definitions */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final Prefix PREFIX_TITLE \u003d new Prefix(\"T:\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d:\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final Prefix PREFIX_TIME \u003d new Prefix(\"t:\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final Prefix PREFIX_DURATION \u003d new Prefix(\"dur:\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /* StudyBananas Prefix definitions */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final Prefix PREFIX_FLASHCARDSET \u003d new Prefix(\"flset:\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public static final Prefix PREFIX_FLASHCARDSET_NAME \u003d new Prefix(\"name:\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final Prefix PREFIX_FLASHCARD \u003d new Prefix(\"fl:\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final Prefix PREFIX_QUESTION \u003d new Prefix(\"q:\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final Prefix PREFIX_ANSWER \u003d new Prefix(\"a:\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 1,
      "cupofjoee": 6,
      "petrickjerico": 1,
      "chuyiting": 5,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/StudyBananasParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.parser.addressbookparsers.AddressBookParser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.parser.flashcardparsers.FlashcardParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.parser.parserutils.CommandTypeMatcher;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.parser.quizparsers.QuizParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.parser.scheduleparsers.ScheduleParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class StudyBananasParser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Command\u003c? super Model\u003e parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        final CommandTypeMatcher ctm \u003d new CommandTypeMatcher();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        switch (ctm.match(userInput)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        case ADDRESSBOOK:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return new AddressBookParser().parse(userInput);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        case FLASHCARD:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return new FlashcardParser().parse(userInput);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        case QUIZ:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return new QuizParser().parse(userInput);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        case TASK:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return new ScheduleParser().parse(userInput);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/addressbookparsers/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.logic.parser.addressbookparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.addressbookcommands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.parser.parserutils.ParserUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new Person(name, phone, email, address, tagList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 7,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/addressbookparsers/AddressBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.logic.parser.addressbookparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.addressbookcommands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.addressbookcommands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.addressbookcommands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.addressbookcommands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.addressbookcommands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.addressbookcommands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.addressbookcommands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.addressbookcommands.ListCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.AddressBookModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class AddressBookParser implements Parser\u003cCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Command\u003cAddressBookModel\u003e parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 16,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/addressbookparsers/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.logic.parser.addressbookparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.addressbookcommands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.parser.parserutils.ParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 4,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/addressbookparsers/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.logic.parser.addressbookparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.addressbookcommands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.addressbookcommands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.parser.parserutils.ParserUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 7,
      "-": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/addressbookparsers/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.logic.parser.addressbookparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.addressbookcommands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 3,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/flashcardparsers/AddFlashcardCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.address.logic.parser.flashcardparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FLASHCARDSET;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.logic.parser.parserutils.ParserUtil.arePrefixesPresent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.logic.commands.flashcardcommands.AddFlashcardCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.logic.parser.parserutils.ParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.model.flashcard.Answer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.model.flashcard.Question;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "public class AddFlashcardCommandParser implements Parser\u003cAddFlashcardCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddFlashcardCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * and returns an AddFlashcardCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public AddFlashcardCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                ArgumentTokenizer.tokenize(userInput, PREFIX_FLASHCARDSET, PREFIX_ANSWER, PREFIX_QUESTION);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_FLASHCARDSET, PREFIX_ANSWER, PREFIX_QUESTION)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddFlashcardCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        Index flashcardSetIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_FLASHCARDSET).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        Question question \u003d ParserUtil.parseQuestion(argMultimap.getValue(PREFIX_QUESTION).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        Answer answer \u003d ParserUtil.parseAnswer(argMultimap.getValue(PREFIX_ANSWER).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        Flashcard flashcard \u003d new Flashcard(question, answer);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return new AddFlashcardCommand(flashcard, flashcardSetIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/flashcardparsers/AddFlashcardSetCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "package seedu.address.logic.parser.flashcardparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FLASHCARDSET_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import static seedu.address.logic.parser.parserutils.ParserUtil.arePrefixesPresent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.address.logic.commands.flashcardcommands.AddFlashcardSetCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.address.logic.parser.parserutils.ParserUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.address.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.address.model.flashcard.FlashcardSetName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "public class AddFlashcardSetCommandParser implements Parser\u003cAddFlashcardSetCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public AddFlashcardSetCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                ArgumentTokenizer.tokenize(userInput, PREFIX_FLASHCARDSET_NAME);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_FLASHCARDSET_NAME)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddFlashcardSetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        FlashcardSetName flashcardSetName \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                ParserUtil.parseFlashcardSetName(argMultimap.getValue(PREFIX_FLASHCARDSET_NAME).get());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        FlashcardSet flashcardSet \u003d new FlashcardSet(flashcardSetName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        return new AddFlashcardSetCommand(flashcardSet);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "petrickjerico": 33,
      "cupofjoee": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/flashcardparsers/DeleteFlashcardCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "package seedu.address.logic.parser.flashcardparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FLASHCARD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FLASHCARDSET;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import static seedu.address.logic.parser.parserutils.ParserUtil.arePrefixesPresent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.address.logic.commands.flashcardcommands.DeleteFlashcardCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.address.logic.parser.parserutils.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "public class DeleteFlashcardCommandParser implements Parser\u003cDeleteFlashcardCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteFlashcardSetCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * and returns an DeleteFlashcardSetCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public DeleteFlashcardCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                ArgumentTokenizer.tokenize(userInput, PREFIX_FLASHCARDSET, PREFIX_FLASHCARD);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_FLASHCARDSET, PREFIX_FLASHCARD)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteFlashcardCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        Index flashcardSetIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_FLASHCARDSET).get());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        Index flashcardIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_FLASHCARD).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        return new DeleteFlashcardCommand(flashcardSetIndex, flashcardIndex);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "petrickjerico": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/flashcardparsers/DeleteFlashcardSetCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.address.logic.parser.flashcardparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.logic.commands.flashcardcommands.DeleteFlashcardSetCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.logic.parser.parserutils.ParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "public class DeleteFlashcardSetCommandParser implements Parser\u003cDeleteFlashcardSetCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteFlashcardSetCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * and returns an DeleteFlashcardSetCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public DeleteFlashcardSetCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(userInput);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            return new DeleteFlashcardSetCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteFlashcardSetCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/flashcardparsers/FlashcardParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.logic.parser.flashcardparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.logic.commands.addressbookcommands.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.logic.commands.flashcardcommands.AddFlashcardCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.address.logic.commands.flashcardcommands.AddFlashcardSetCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.address.logic.commands.flashcardcommands.DeleteFlashcardCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.logic.commands.flashcardcommands.DeleteFlashcardSetCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.address.logic.commands.flashcardcommands.ListFlashcardCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.logic.commands.flashcardcommands.ListFlashcardSetCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.FlashcardModel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class FlashcardParser implements Parser\u003cCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            .compile(\"((\\\\w+) (\\\\w+))(\\\\s.*)?\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Command\u003cFlashcardModel\u003e parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        final String commandWord \u003d matcher.group(1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        final String argument \u003d matcher.group(4);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        case AddFlashcardCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            return new AddFlashcardCommandParser().parse(argument);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        case AddFlashcardSetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            return new AddFlashcardSetCommandParser().parse(argument);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        case DeleteFlashcardCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            return new DeleteFlashcardCommandParser().parse(argument);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        case DeleteFlashcardSetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            return new DeleteFlashcardSetCommandParser().parse(argument);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        case ListFlashcardCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            return new ListFlashcardCommandParser().parse(argument);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        case ListFlashcardSetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            return new ListFlashcardSetCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 37,
      "petrickjerico": 9,
      "chuyiting": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/flashcardparsers/ListFlashcardCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "package seedu.address.logic.parser.flashcardparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.address.logic.commands.flashcardcommands.ListFlashcardCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.address.logic.parser.parserutils.ParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "public class ListFlashcardCommandParser implements Parser\u003cListFlashcardCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public ListFlashcardCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(userInput);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            return new ListFlashcardCommand(index);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListFlashcardCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "petrickjerico": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/parserutils/CommandTypeMatcher.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.logic.parser.parserutils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.addressbookcommands.HelpCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class CommandTypeMatcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public enum CommandType {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        ADDRESSBOOK, FLASHCARD, QUIZ, TASK"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Match the command to the valid command type."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param command command string"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @return commandType of the command"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public CommandType match(String command) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (isFlashcardCommand(command)) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            return CommandType.FLASHCARD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (isTaskCommand(command)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return CommandType.TASK;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        if (isQuizCommand(command)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            return CommandType.QUIZ;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (isAddressBookCommand(command)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return CommandType.ADDRESSBOOK;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private String getFirstWord(String userInput) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        String[] splittedWords \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return splittedWords[0];"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private String getSecondWord(String userInput) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String[] splittedWords \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return splittedWords[1];"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private boolean doesContainTwoOrMoreWords(String userInput) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String[] splittedWords \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return splittedWords.length \u003e 1;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private boolean isAddressBookCommand(String command) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private boolean isFlashcardCommand(String command) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String lowercaseCommand \u003d command.toLowerCase();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return doesContainTwoOrMoreWords(command) \u0026\u0026 ("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                getSecondWord(lowercaseCommand).equals(\"flset\") || getSecondWord(lowercaseCommand).equals(\"fl\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private boolean isQuizCommand(String command) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        String lowercaseCommand \u003d command.toLowerCase();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        switch (lowercaseCommand) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        case \"cancel\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        case \"refresh\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        case \"c\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        case \"flip\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        case \"w\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            return doesContainTwoOrMoreWords(lowercaseCommand) \u0026\u0026 ("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                    getFirstWord(lowercaseCommand).equals(\"quiz\"))"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                    || lowercaseCommand.startsWith(\"ans:\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private boolean isTaskCommand(String command) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return doesContainTwoOrMoreWords(command) \u0026\u0026 ("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                getSecondWord(command).toLowerCase().equals(\"task\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 22,
      "cupofjoee": 1,
      "chuyiting": 39,
      "bowei-yu": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/parserutils/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.logic.parser.parserutils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.model.flashcard.Answer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.address.model.flashcard.FlashcardSetName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.model.flashcard.Question;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.task.DateTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.task.Duration;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Parses {@code numericString} and checks whether the string is numeric."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param numericString"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @return true if the string is numeric, false otherwise."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static boolean isNumeric(String numericString) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        boolean isNumber \u003d numericString.chars().allMatch(Character::isDigit);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return isNumber;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Schedule/Task \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Parses {@code String title} into a {@code Title}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @throws ParseException if the given {@code title} is invalid."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static Title parseTitle(String title) throws ParseException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String trimmedTitle \u003d title.trim();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (!Title.isValidTitle(trimmedTitle)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new ParseException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return new Title(title);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Parses {@code String description} into a {@code Description}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return new Description(description);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Parses {@code String time} into a {@code Time}."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @throws ParseException if the given {@code time} is invalid."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static DateTime parseTime(String time) throws ParseException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (time \u003d\u003d null) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String trimmedTime \u003d time.trim();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (!DateTime.isValidDateTime(trimmedTime)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new ParseException(DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return new DateTime(time);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Parses {@code String duration} into a {@code Duration}."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @throws ParseException if the given {@code duration} is invalid."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static Duration parseDuration(String duration) throws ParseException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (duration \u003d\u003d null) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String trimmedDuration \u003d duration.trim();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (!Duration.isValidDuration(trimmedDuration)) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new ParseException(Duration.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return new Duration(trimmedDuration);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Flashcard \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Parses {@code String question} into a {@code Question}."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * @throws ParseException if the given {@code question} is invalid."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static Question parseQuestion(String question) throws ParseException {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        requireNonNull(question);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        String trimmedQuestion \u003d question.trim();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        if (!Question.isValidQuestion(trimmedQuestion)) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            throw new ParseException(Question.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return new Question(question);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Parses {@code String answer} into a {@code Answer}."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * @throws ParseException if the given {@code answer} is invalid."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static Answer parseAnswer(String answer) throws ParseException {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        requireNonNull(answer);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        String trimmedAnswer \u003d answer.trim();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        if (!Answer.isValidAnswer(trimmedAnswer)) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            throw new ParseException(Answer.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return new Answer(answer);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Flashcard Set \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Parses {@code String flashcarsSetName} into a {@code Name} for flashcard set."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     *"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * @throws ParseException if the given {@code flashcardSetName} is invalid."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public static FlashcardSetName parseFlashcardSetName(String flashcardSetName)"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        requireNonNull(flashcardSetName);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        String trimmedName \u003d flashcardSetName.trim();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        if (!FlashcardSetName.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            throw new ParseException(FlashcardSetName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        return new FlashcardSetName(flashcardSetName);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 10,
      "cupofjoee": 43,
      "petrickjerico": 17,
      "chuyiting": 72,
      "-": 123
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/quizparsers/QuizParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.logic.parser.quizparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.logic.commands.quizcommands.AnswerCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.logic.commands.quizcommands.CancelCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.logic.commands.quizcommands.CorrectCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.logic.commands.quizcommands.FlipCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.logic.commands.quizcommands.RefreshCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.logic.commands.quizcommands.StartCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.logic.commands.quizcommands.ViewScoreCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.logic.commands.quizcommands.WrongCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class QuizParser implements Parser\u003cCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String MESSAGE_PARSING_ERROR \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            \"The command for quiz is invalid. Please check the command format and try again.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Command\u003c? super Model\u003e parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (userInput.startsWith(\"quiz flset:\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            userInput \u003d userInput.replace(\"quiz flset:\", \"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            int index \u003d parseNumber(userInput);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            return new StartCommand(index);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        } else if (userInput.startsWith(\"quiz score flset:\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            userInput \u003d userInput.replace(\"quiz score flset:\", \"\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            int index \u003d parseNumber(userInput);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            return new ViewScoreCommand(index);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        } else if (userInput.startsWith(\"ans:\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            userInput \u003d userInput.replace(\"ans:\", \"\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            return new AnswerCommand(userInput);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        switch (userInput) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        case \"cancel\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            return new CancelCommand();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        case \"flip\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            return new FlipCommand();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        case \"c\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            return new CorrectCommand();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        case \"w\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            return new WrongCommand();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        case \"refresh\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            return new RefreshCommand();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new ParseException(MESSAGE_PARSING_ERROR);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Parses a int number from an inoput string"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @param input string provided"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @return an int number"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @throws ParseException if the format of string is invalid"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public int parseNumber(String input) throws ParseException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            return Integer.parseInt(input);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new ParseException(\"Invalid characters provided for flashcard set number\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 12,
      "bowei-yu": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/scheduleparsers/ScheduleAddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.logic.parser.scheduleparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.logic.parser.parserutils.ParserUtil.arePrefixesPresent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.schedulecommands.ScheduleAddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.parser.parserutils.ParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.task.DateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.task.Duration;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class ScheduleAddCommandParser implements Parser\u003cScheduleAddCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ScheduleAddCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * and returns an ScheduleAddCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public ScheduleAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_DESCRIPTION, PREFIX_TIME, PREFIX_DURATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TITLE)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScheduleAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).orElse(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        DateTime time \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_TIME).orElse(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Duration duration \u003d ParserUtil.parseDuration(argMultimap.getValue(PREFIX_DURATION).orElse(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Task task \u003d new Task(title, description, time, duration);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return new ScheduleAddCommand(task);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 1,
      "chuyiting": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/scheduleparsers/ScheduleDeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.logic.parser.scheduleparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.schedulecommands.ScheduleDeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.parser.parserutils.ParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class ScheduleDeleteCommandParser implements Parser\u003cScheduleDeleteCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ScheduleDeleteCommand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * and returns a ScheduleDeleteCommand object for execution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public ScheduleDeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return new ScheduleDeleteCommand(index);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScheduleDeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/scheduleparsers/ScheduleEditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "package seedu.address.logic.parser.scheduleparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.logic.parser.parserutils.ParserUtil.arePrefixesPresent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.logic.commands.schedulecommands.ScheduleEditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.logic.parser.parserutils.ParserUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.model.task.DateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.model.task.Duration;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class ScheduleEditCommandParser implements Parser\u003cScheduleEditCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Arguments of userInput should contain 3 distinct part separated by empty space."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * The first part is just an empty string."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * The second part is the task index."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * The third part is the updated task information."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private static final int EXPECTED_PART_OF_INPUT \u003d 3;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private String getIndexFromInput(String input) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String[] splittedPartInput \u003d input.split(\" \", EXPECTED_PART_OF_INPUT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        if (splittedPartInput.length \u003c EXPECTED_PART_OF_INPUT) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScheduleEditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String index \u003d splittedPartInput[1];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        if (ParserUtil.isNumeric(index)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            return index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScheduleEditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private String getEditInfo(String input) throws ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String[] splittedPartInput \u003d input.split(\" \", EXPECTED_PART_OF_INPUT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String emptySpace \u003d \" \";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        if (splittedPartInput.length \u003c EXPECTED_PART_OF_INPUT) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScheduleEditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // add back the empty space to conform to the format of ArgumentTokenizer#tokenize()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return emptySpace + splittedPartInput[2];"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    // Special parser for Title since Title is optional in edit command, unlike add command where Title is compulsory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private Title parseEditedTitle(ArgumentMultimap argumentMultimap) throws ParseException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Optional\u003cString\u003e parsedTitle \u003d argumentMultimap.getValue(PREFIX_TITLE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        if (!parsedTitle.isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            String titleString \u003d parsedTitle.get();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            return ParserUtil.parseTitle(titleString);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ScheduleEditCommand"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * and returns a ScheduleEditCommand object for execution."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public ScheduleEditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String indexString \u003d getIndexFromInput(args);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String editInfoString \u003d getEditInfo(args);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(indexString);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                        editInfoString, PREFIX_TITLE, PREFIX_DESCRIPTION, PREFIX_TIME, PREFIX_DURATION);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        if ((!arePrefixesPresent(argMultimap, PREFIX_TITLE)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_TIME)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_DURATION))"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        ) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScheduleEditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Title title \u003d parseEditedTitle(argMultimap);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).orElse(null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        DateTime time \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_TIME).orElse(null));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Duration duration \u003d ParserUtil.parseDuration(argMultimap.getValue(PREFIX_DURATION).orElse(null));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return new ScheduleEditCommand(index, title, description, time, duration);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 99
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/scheduleparsers/ScheduleParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.logic.parser.scheduleparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.addressbookcommands.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.logic.commands.schedulecommands.ScheduleAddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.logic.commands.schedulecommands.ScheduleDeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.logic.commands.schedulecommands.ScheduleEditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.logic.commands.schedulecommands.ScheduleListCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.logic.commands.schedulecommands.ScheduleSearchCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.ScheduleModel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class ScheduleParser implements Parser\u003cCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            .compile(\"((\\\\w+) (\\\\w+))(\\\\s.*)?\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Command\u003cScheduleModel\u003e parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        final String commandWord \u003d matcher.group(1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        //temporary to solve the bug..."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        final String arguments \u003d toTokenizableString(matcher.group(4));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        case ScheduleListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return new ScheduleListCommand();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        case ScheduleAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return new ScheduleAddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        case ScheduleDeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return new ScheduleDeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        case ScheduleSearchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return new ScheduleSearchCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        case ScheduleEditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            return new ScheduleEditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private String toTokenizableString(String str) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return str \u003d\u003d null ? \"\" : str;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 7,
      "chuyiting": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/scheduleparsers/ScheduleSearchCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.logic.parser.scheduleparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.schedulecommands.ScheduleSearchCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.model.task.InfoContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class ScheduleSearchCommandParser implements Parser\u003cScheduleSearchCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ScheduleSearchCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * and returns a ScheduleSearchCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public ScheduleSearchCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScheduleSearchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String[] titleKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return new ScheduleSearchCommand(new InfoContainsKeywordsPredicate(Arrays.asList(titleKeywords)));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 2,
      "chuyiting": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBookModel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public interface AddressBookModel {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    // ADDRESSBOOK"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBookModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.AddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class AddressBookModelManager implements AddressBookModel {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Create AddressBookModelManager from {@Code addressBook}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param addressBook"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public AddressBookModelManager(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    AddressBookModelManager() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this(new AddressBook());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (!(obj instanceof AddressBookModelManager)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        AddressBookModelManager other \u003d (AddressBookModelManager) obj;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/model/FlashcardModel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlyFlashcardBank;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public interface FlashcardModel {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    Predicate\u003cFlashcardSet\u003e PREDICATE_SHOW_ALL_FLASHCARDSETS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    Predicate\u003cFlashcardSet\u003e PREDICATE_SHOW_ALL_FLASHCARDS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Flashcard \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Retrieves the flashcard from a given {@code FlashcardSet}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * at a given {@code Index}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * @param flashcardSet the {@code FlashcardSet} to obtain from"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * @param flashcardIndex the reference {@code Index}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * @return the {@code Flashcard} in the given {@code FlashcardSet} at that {@code Index}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    Flashcard getFlashcard(FlashcardSet flashcardSet, Index flashcardIndex);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Replaces the target {@code Flashcard} in a given {@code FlashcardSet}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * with an edited {@code Flashcard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * @param flashcardSet the {@code FlashcardSet} to replace from"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * @param target the replaced {@code Flashcard}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * @param editedFlashcard the replacing {@code Flashcard}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    void setFlashcard(FlashcardSet flashcardSet, Flashcard target, Flashcard editedFlashcard);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Checks whether a given {@code FlashcardSet} contains"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * a given {@code Flashcard}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * @param flashcardSet the {@code FlashcardSet} to check from"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * @param flashcard the {@code Flashcard} to find"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * @return {@code true} if the set contains the card"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    boolean hasFlashcard(FlashcardSet flashcardSet, Flashcard flashcard);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Adds a given {@code Flashcard} to a given {@code FlashcardSet}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * @param flashcardSet"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * @param flashcard the new {@code Flashcard}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    void addFlashcard(FlashcardSet flashcardSet, Flashcard flashcard);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Removes a {@code Flashcard} at a given {@code Index}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * from a given {@code FlashcardBank}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * @param flashcardSet {@code FlashcardSet}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * @param flashcardIndex the reference {@code Index} to delete"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    void deleteFlashcard(FlashcardSet flashcardSet, Index flashcardIndex);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Flashcard Set \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Retrieves the {@code FlashcardSet} with the given {@code Index}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Used for {@code Quiz}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * @param index the reference {@code Index}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * @return the {@code FlashcardSet} in the high-level {@code FlashcardBank} with that {@code Index}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    FlashcardSet getFlashcardSet(Index index);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Replaces the target {@code FlashcardSet} in the {@code FlashcardBank}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * with an edited {@code FlashcardSet}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * {@code target} must exist in the {@code FlashcardBank}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * The task identity of the edited {@code FlashcardSet} must not"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * be the same as any other existing {@code FlashcardSet} in"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * the {@code FlashcardBank}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * @param target the replaced {@code FlashcardSet}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * @param editedFlashcardSet the replacing {@code FlashcardSet}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    void setFlashcardSet(FlashcardSet target, FlashcardSet editedFlashcardSet);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Checks whether the {@code FlashcardBank}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * contains a given {@code FlashcardSet}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * @param flashcardSet the {@code FlashcardSet} to find"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * @return {@code true} if the bank contains the set"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    boolean hasFlashcardSet(FlashcardSet flashcardSet);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Adds a given empty or filled {@code FlashcardSet}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * to the {@code FlashcardBank}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * @param flashcardSet the new {@code FlashcardSet}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    void addFlashcardSet(FlashcardSet flashcardSet);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Removes a {@code FlashcardSet} and its contents"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * from the {@code FlashcardBank}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * @param target the {@code FlashcardSet} to delete"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    void deleteFlashcardSet(FlashcardSet target);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Flashcard Bank \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Replaces the target {@code FlashcardBank} data"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * with a newly given one."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * @param flashcardBank the replacement {@code FlashcardBank}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    void setFlashcardBank(ReadOnlyFlashcardBank flashcardBank);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /** Returns the {@code FlashcardBank} */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    ReadOnlyFlashcardBank getFlashcardBank();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Flashcard Set Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /** Returns an unmodifiable view of the filtered flashcard set list */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    ObservableList\u003cFlashcardSet\u003e getFilteredFlashcardSetList();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Updates the filter of the filtered flashcard set list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    void updateFilteredFlashcardSetList(Predicate\u003cFlashcardSet\u003e predicate);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Flashcard Set Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /** Returns an unmodifiable view of the filtered flashcard set list */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    FlashcardSet getFlashcardSetToView();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /** Sets an unmodifiable view of the filtered flashcard set list */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    void setFlashcardSetToView(FlashcardSet flashcardSet);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "petrickjerico": 127,
      "chuyiting": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/model/FlashcardModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.FlashcardBank;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlyFlashcardBank;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class FlashcardModelManager implements FlashcardModel {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final FlashcardBank flashcardBank;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final FilteredList\u003cFlashcardSet\u003e filteredFlashcardSets;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    private FlashcardSet flashcardSetToDisplay;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Creates FlashcardModelManager from {@code flashcardBank}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param flashcardBank"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public FlashcardModelManager(ReadOnlyFlashcardBank flashcardBank) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.flashcardBank \u003d new FlashcardBank(flashcardBank);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        filteredFlashcardSets \u003d new FilteredList\u003c\u003e(this.flashcardBank.getFlashcardSetList());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        flashcardSetToDisplay \u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Flashcard \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public Flashcard getFlashcard(FlashcardSet flashcardSet, Index flashcardIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        return flashcardSet.getFlashcard(flashcardIndex.getZeroBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public void setFlashcard(FlashcardSet flashcardSet, Flashcard target, Flashcard editedFlashcard) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        flashcardSet.setFlashcard(target, editedFlashcard);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public boolean hasFlashcard(FlashcardSet flashcardSet, Flashcard flashcard) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        return flashcardSet.hasFlashcard(flashcard);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public void addFlashcard(FlashcardSet flashcardSet, Flashcard flashcard) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        flashcardSet.addFlashcard(flashcard);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public void deleteFlashcard(FlashcardSet flashcardSet, Index flashcardIndex) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        flashcardSet.deleteFlashcard(flashcardIndex);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Flashcard Set \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public FlashcardSet getFlashcardSet(Index index) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        return filteredFlashcardSets.get(index.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void setFlashcardSet(FlashcardSet target, FlashcardSet editedFlashcardSet) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        flashcardBank.setFlashcardSet(target, editedFlashcardSet);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public boolean hasFlashcardSet(FlashcardSet flashcardSet) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        requireNonNull(flashcardSet);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        return flashcardBank.hasFlashcardSet(flashcardSet);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public void addFlashcardSet(FlashcardSet flashcardSet) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        flashcardBank.addFlashcardSet(flashcardSet);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public void deleteFlashcardSet(FlashcardSet target) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        flashcardBank.removeFlashcardSet(target);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Flashcard Set Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public ObservableList\u003cFlashcardSet\u003e getFilteredFlashcardSetList() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return filteredFlashcardSets;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void updateFilteredFlashcardSetList(Predicate\u003cFlashcardSet\u003e predicate) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        filteredFlashcardSets.setPredicate(predicate);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public FlashcardSet getFlashcardSetToView() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        return flashcardSetToDisplay;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public void setFlashcardSetToView(FlashcardSet flashcardSet) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        flashcardSetToDisplay \u003d flashcardSet;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Flashcard Bank \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public void setFlashcardBank(ReadOnlyFlashcardBank flashcardBank) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        this.flashcardBank.resetData(flashcardBank);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public ReadOnlyFlashcardBank getFlashcardBank() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        return flashcardBank;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (!(obj instanceof FlashcardModelManager)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        FlashcardModelManager other \u003d (FlashcardModelManager) obj;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return filteredFlashcardSets.equals(other.filteredFlashcardSets);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "petrickjerico": 56,
      "chuyiting": 81,
      "bowei-yu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public interface Model extends AddressBookModel, ScheduleModel, FlashcardModel, QuizModel {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    Predicate\u003cFlashcardSet\u003e PREDICATE_SHOW_ALL_FLASHCARDSETS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Returns the user prefs\u0027 schedule file path."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    Path getScheduleFilePath();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Sets the user prefs\u0027 schedule file path."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    void setScheduleFilePath(Path scheduleFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Returns the user prefs\u0027 flashcard bank file path."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    Path getFlashcardBankFilePath();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Sets the user prefs\u0027 flashcard bank file path."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    void setFlashcardBankFilePath(Path flashcardBankFilePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 1,
      "petrickjerico": 4,
      "bowei-yu": 1,
      "chuyiting": 7,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.flashcard.Answer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.flashcard.FlashcardSetName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.flashcard.Question;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.quiz.Quiz;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.FlashcardBank;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.systemlevelmodel.QuizRecords;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlyFlashcardBank;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlyQuizRecords;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlySchedule;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.Schedule;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final AddressBookModelManager addressBookModelManager;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final ScheduleModelManager scheduleModelManager;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final FlashcardModelManager flashcardModelManager;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final QuizModelManager quizModelManager;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                        ReadOnlySchedule schedule, ReadOnlyFlashcardBank flashcardBank,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                        ReadOnlyQuizRecords quizRecords) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        requireAllNonNull(addressBook, schedule, userPrefs, flashcardBank, quizRecords);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" , user prefs \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                + userPrefs + \" , and schedule: \" + schedule);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        addressBookModelManager \u003d new AddressBookModelManager(addressBook);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        scheduleModelManager \u003d new ScheduleModelManager(schedule);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        flashcardModelManager \u003d new FlashcardModelManager(flashcardBank);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        quizModelManager \u003d new QuizModelManager(quizRecords);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this(new AddressBook(), new UserPrefs(), new Schedule(), new FlashcardBank(), new QuizRecords());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Path getScheduleFilePath() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return userPrefs.getScheduleFilePath();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void setScheduleFilePath(Path scheduleFilePath) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        requireNonNull(scheduleFilePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        userPrefs.setScheduleFilePath(scheduleFilePath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public Path getFlashcardBankFilePath() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        return userPrefs.getFlashcardBankFilePath();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public void setFlashcardBankFilePath(Path flashcardBankFilePath) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        requireNonNull(flashcardBankFilePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        userPrefs.setFlashcardBankFilePath(flashcardBankFilePath);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.addressBookModelManager.setAddressBook(addressBook);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return this.addressBookModelManager.getAddressBook();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return this.addressBookModelManager.hasPerson(person);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.addressBookModelManager.deletePerson(target);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.addressBookModelManager.addPerson(person);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.addressBookModelManager.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return this.addressBookModelManager.getFilteredPersonList();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.addressBookModelManager.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Schedule \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void setSchedule(ReadOnlySchedule schedule) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.scheduleModelManager.setSchedule(schedule);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public ReadOnlySchedule getSchedule() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return this.scheduleModelManager.getSchedule();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return this.scheduleModelManager.hasTask(task);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.scheduleModelManager.deleteTask(target);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.scheduleModelManager.addTask(task);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        scheduleModelManager.setTask(target, editedTask);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Task List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return scheduleModelManager.getFilteredTaskList();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public ObservableList\u003cTask\u003e getUpcomingTaskList() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return scheduleModelManager.getUpcomingTaskList();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.scheduleModelManager.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                \u0026\u0026 addressBookModelManager.equals(other.addressBookModelManager)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                \u0026\u0026 scheduleModelManager.equals(other.scheduleModelManager)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                \u0026\u0026 flashcardModelManager.equals(other.flashcardModelManager);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Quiz \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Question start(Quiz quiz) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return quizModelManager.start(quiz);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public boolean hasStarted() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return quizModelManager.hasStarted();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void tallyScore(boolean isCorrect) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        quizModelManager.tallyScore(isCorrect);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Question getQuestion() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return quizModelManager.getQuestion();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Answer getAnswer() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return quizModelManager.getAnswer();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public String stopQuiz() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return quizModelManager.stopQuiz();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void cancelQuiz() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        quizModelManager.cancelQuiz();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public String getQuizRecords(FlashcardSetName name) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return quizModelManager.getQuizRecords(name);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public ReadOnlyQuizRecords getAllQuizRecords() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return quizModelManager.getAllQuizRecords();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void deleteQuiz(FlashcardSetName name) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        quizModelManager.deleteQuiz(name);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void saveAnswer(String answer) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        quizModelManager.saveAnswer(answer);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void setFlashcardBank(ReadOnlyFlashcardBank flashcardBank) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        flashcardModelManager.setFlashcardBank(flashcardBank);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public ReadOnlyFlashcardBank getFlashcardBank() {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return flashcardModelManager.getFlashcardBank();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public FlashcardSet getFlashcardSet(Index index) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        return flashcardModelManager.getFlashcardSet(index);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public boolean hasFlashcardSet(FlashcardSet flashcardSet) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return flashcardModelManager.hasFlashcardSet(flashcardSet);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void deleteFlashcardSet(FlashcardSet target) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        flashcardModelManager.deleteFlashcardSet(target);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        quizModelManager.deleteQuiz(target.getFlashcardSetName());"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public Flashcard getFlashcard(FlashcardSet flashcardSet, Index flashcardIndex) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        return flashcardModelManager.getFlashcard(flashcardSet, flashcardIndex);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public void setFlashcard(FlashcardSet flashcardSet, Flashcard target, Flashcard editedFlashcard) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        flashcardModelManager.setFlashcard(flashcardSet, target, editedFlashcard);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public boolean hasFlashcard(FlashcardSet flashcardSet, Flashcard flashcard) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        return flashcardModelManager.hasFlashcard(flashcardSet, flashcard);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public void addFlashcard(FlashcardSet flashcardSet, Flashcard flashcard) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        flashcardModelManager.addFlashcard(flashcardSet, flashcard);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public void deleteFlashcard(FlashcardSet flashcardSet, Index flashcardIndex) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        flashcardModelManager.deleteFlashcard(flashcardSet, flashcardIndex);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void addFlashcardSet(FlashcardSet flashcardSet) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        flashcardModelManager.addFlashcardSet(flashcardSet);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void setFlashcardSet(FlashcardSet target, FlashcardSet editedFlashcardSet) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        flashcardModelManager.setFlashcardSet(target, editedFlashcardSet);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public ObservableList\u003cFlashcardSet\u003e getFilteredFlashcardSetList() {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        return flashcardModelManager.getFilteredFlashcardSetList();"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void updateFilteredFlashcardSetList(Predicate\u003cFlashcardSet\u003e predicate) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        flashcardModelManager.updateFilteredFlashcardSetList(predicate);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public FlashcardSet getFlashcardSetToView() {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        return flashcardModelManager.getFlashcardSetToView();"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public void setFlashcardSetToView(FlashcardSet flashcardSet) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        flashcardModelManager.setFlashcardSetToView(flashcardSet);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 31,
      "petrickjerico": 53,
      "bowei-yu": 52,
      "chuyiting": 109,
      "-": 128
    }
  },
  {
    "path": "src/main/java/seedu/address/model/QuizModel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.flashcard.Answer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.flashcard.FlashcardSetName;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.flashcard.Question;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.quiz.Quiz;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlyQuizRecords;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public interface QuizModel {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    // QUIZ"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    Question start(Quiz quiz);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    boolean hasStarted();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    void tallyScore(boolean isCorrect);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    Question getQuestion();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    Answer getAnswer();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    String stopQuiz();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    void cancelQuiz();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    String getQuizRecords(FlashcardSetName name);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    void deleteQuiz(FlashcardSetName name);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    ReadOnlyQuizRecords getAllQuizRecords();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    void saveAnswer(String answer);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 20,
      "bowei-yu": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/QuizModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.flashcard.Answer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.flashcard.FlashcardSetName;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.flashcard.Question;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.quiz.Quiz;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.systemlevelmodel.QuizRecords;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlyQuizRecords;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class QuizModelManager implements QuizModel {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final QuizRecords quizRecords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private Quiz quiz;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public QuizModelManager(ReadOnlyQuizRecords quizRecords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.quizRecords \u003d new QuizRecords(quizRecords);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public Question start(Quiz quiz) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.quiz \u003d quiz;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return getQuestion();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public boolean hasStarted() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return this.quiz !\u003d null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void tallyScore(boolean isCorrect) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.quiz.setPointsScored(isCorrect);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public Question getQuestion() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return this.quiz.getQuestion();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public Answer getAnswer() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return this.quiz.getAnswer();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public String stopQuiz() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        String score \u003d this.quiz.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        quizRecords.addQuiz(quiz);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.quiz \u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return score;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void cancelQuiz() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.quiz \u003d null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public String getQuizRecords(FlashcardSetName flashcardSetName) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return this.quizRecords.getQuiz(flashcardSetName).toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void deleteQuiz(FlashcardSetName name) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        quizRecords.removeQuiz(name);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public ReadOnlyQuizRecords getAllQuizRecords() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return quizRecords;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void saveAnswer(String answer) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.quiz.saveAnswer(answer);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ScheduleModel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlySchedule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public interface ScheduleModel {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_TASKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Replaces schedule data with the data in {@code schedule}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    void setSchedule(ReadOnlySchedule schedule);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /** Returns the Schedule */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    ReadOnlySchedule getSchedule();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Returns true if a task with the same identity as {@code task} exists in the schedule."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    boolean hasTask(Task task);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Deletes the given task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * The task must exist in the schedule."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    void deleteTask(Task target);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Adds the given task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * {@code task} must not already exist in the task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    void addTask(Task task);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Replaces the given task {@code target} with {@code editedTask}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * {@code target} must exist in the schedule."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the schedule."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    void setTask(Task target, Task editedTask);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /** Returns an unmodifiable view of the filtered task list */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /** Returns an unmodifiable view of tasks that happen today */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    ObservableList\u003cTask\u003e getUpcomingTaskList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Updates the filter of the filtered task list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    void updateFilteredTaskList(Predicate\u003cTask\u003e predicate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ScheduleModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlySchedule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.Schedule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.task.TaskHappensTodayPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class ScheduleModelManager implements ScheduleModel {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final Schedule schedule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final FilteredList\u003cTask\u003e filteredTasks;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private FilteredList\u003cTask\u003e todayTasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Create ScheduleModelManager from {@schedule}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param schedule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public ScheduleModelManager(ReadOnlySchedule schedule) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.schedule \u003d new Schedule(schedule);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        filteredTasks \u003d new FilteredList\u003c\u003e(this.schedule.getTaskList());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        todayTasks \u003d new FilteredList\u003c\u003e(this.schedule.getTaskList());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void setSchedule(ReadOnlySchedule schedule) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.schedule.resetData(schedule);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public ReadOnlySchedule getSchedule() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return schedule;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return schedule.hasTask(task);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        schedule.removeTask(target);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        schedule.addTask(task);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        schedule.setTask(target, editedTask);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Task List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return filteredTasks;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public ObservableList\u003cTask\u003e getUpcomingTaskList() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        todayTasks.setPredicate(new TaskHappensTodayPredicate());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return todayTasks;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        filteredTasks.setPredicate(predicate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        todayTasks.setPredicate(task -\u003e predicate.test(task) \u0026\u0026 new TaskHappensTodayPredicate().test(task));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (!(obj instanceof ScheduleModelManager)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ScheduleModelManager other \u003d (ScheduleModelManager) obj;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return filteredTasks.equals(other.filteredTasks);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 97
    }
  },
  {
    "path": "src/main/java/seedu/address/model/flashcard/Answer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": " * Represents a Flashcard\u0027s answer"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "public class Answer {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            \"Answer should only contain alphanumeric characters and spaces, and it, should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Graph}][\\\\p{Graph} ]*\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public final String answer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Constructs a {@code Answer}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * @param answer A valid answer."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public Answer(String answer) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        requireNonNull(answer);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        checkArgument(isValidAnswer(answer), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static boolean isValidAnswer(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                || other instanceof seedu.address.model.flashcard.Answer // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                \u0026\u0026 answer.equals(((seedu.address.model.flashcard.Answer) other).answer); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return answer.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 51,
      "petrickjerico": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/flashcard/Flashcard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": " * Represents a Flashcard in a FlashcardSet."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "public class Flashcard {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final Question question;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final Answer answer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    private final SimpleStringProperty questionString;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    private final SimpleStringProperty answerString;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public Flashcard(Question question, Answer answer) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        questionString \u003d new SimpleStringProperty(question.toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        answerString \u003d new SimpleStringProperty(answer.toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public Question getQuestion() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return question;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public Answer getAnswer() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public String getQuestionString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        return questionString.get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public void setQuestionString(String question) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        questionString.set(question);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public String getAnswerString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        return answerString.get();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public void setAnswerString(String answer) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        answerString.set(answer);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        builder.append(\" Question: \")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                .append(getQuestion())"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                .append(\" Answer: \")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                .append(getAnswer());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        if (!(other instanceof Flashcard)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        Flashcard otherFlashcard \u003d (Flashcard) other;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return otherFlashcard.getQuestion().equals(getQuestion())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                \u0026\u0026 otherFlashcard.getAnswer().equals(getAnswer());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return Objects.hash(question, answer);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 59,
      "petrickjerico": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/model/flashcard/FlashcardSet.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.flashcard.exceptions.DuplicateFlashcardException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.flashcard.exceptions.FlashcardNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": " * Represents a FlashcardSet that contains flashcards for quiz."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "public class FlashcardSet {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final List\u003cFlashcard\u003e flashcards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    private final FlashcardSetName flashcardSetName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Creates an empty FlashcardSet with valid Name and empty."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public FlashcardSet(FlashcardSetName flashcardSetName) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        this.flashcardSetName \u003d flashcardSetName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Creates an empty FlashcardSet with valid Name and empty."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public FlashcardSet(FlashcardSetName flashcardSetName, List\u003cFlashcard\u003e flashcards) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        this.flashcardSetName \u003d flashcardSetName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        this.flashcards.addAll(flashcards);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public FlashcardSetName getName() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return flashcardSetName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public FlashcardSetName getFlashcardSetName() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        return flashcardSetName;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public List\u003cFlashcard\u003e getFlashcards() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return flashcards;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        return flashcards.size();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public Flashcard getFlashcard(int index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        return flashcards.get(index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public void setFlashcard(Flashcard target, Flashcard editedFlashcard) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        int setIndex \u003d flashcards.indexOf(target);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (setIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new FlashcardNotFoundException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (!target.equals(editedFlashcard) \u0026\u0026 hasFlashcard(editedFlashcard)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new DuplicateFlashcardException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        flashcards.set(setIndex, editedFlashcard);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Checks if the flashcard set contains the specified flashcard."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @param flashcard as specified"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @return boolean true or false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public boolean hasFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        requireNonNull(flashcard);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        return flashcards.contains(flashcard);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Adds a flashcard to the flashcard set."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @param flashcard provided"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public void addFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        requireNonNull(flashcard);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (hasFlashcard(flashcard)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new DuplicateFlashcardException();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        flashcards.add(flashcard);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Deletes a flashcard at the specified flashcard index."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @param flashcardIndex provided"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public void deleteFlashcard(Index flashcardIndex) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            flashcards.remove(flashcardIndex.getZeroBased());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new FlashcardNotFoundException();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        if (!(other instanceof FlashcardSet)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        FlashcardSet otherFlashcardSet \u003d (FlashcardSet) other;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        return otherFlashcardSet.getFlashcardSetName().equals(getFlashcardSetName());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        return Objects.hash(flashcardSetName, flashcards);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        builder.append(getFlashcardSetName());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        getFlashcards().forEach(builder::append);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 49,
      "petrickjerico": 41,
      "bowei-yu": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/model/flashcard/FlashcardSetName.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": " * Represents a FlashcardSet\u0027s name."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "public class FlashcardSetName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public final String name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public FlashcardSetName(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                || other instanceof FlashcardSetName // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                \u0026\u0026 name.equals(((FlashcardSetName) other).name); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return name.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 56,
      "petrickjerico": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/flashcard/Question.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": " * Represents a Flashcard\u0027s question."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "public class Question {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            \"Question should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Graph}][\\\\p{Graph} ]*\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public final String question;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Constructs a {@code Question}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * @param question A valid question."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public Question(String question) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        requireNonNull(question);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        checkArgument(isValidQuestion(question), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static boolean isValidQuestion(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return question;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                || other instanceof seedu.address.model.flashcard.Question // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                \u0026\u0026 question.equals(((seedu.address.model.flashcard.Question) other).question); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return question.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 52,
      "petrickjerico": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/flashcard/UniqueFlashcardSetList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.model.flashcard.exceptions.DuplicateFlashcardSetException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.model.flashcard.exceptions.FlashcardSetNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "public class UniqueFlashcardSetList implements Iterable\u003cFlashcardSet\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final ObservableList\u003cFlashcardSet\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final ObservableList\u003cFlashcardSet\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Returns true if the list contains an equivalent flashcard set as the given argument."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public boolean contains(FlashcardSet toCheck) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Adds a flashcard set to the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * The flashcard set  must not already exist in the list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public void add(FlashcardSet toAdd) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            throw new DuplicateFlashcardSetException();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Replaces the flashcard set {@code target} in the list with {@code edittedFlashcardSet}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * The edittedFlashcardSet of {@code edittedFlashcardSet} must not be the same as another"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * existing flashcard set in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public void setFlashcardSet(FlashcardSet target, FlashcardSet editedFlashcardSet) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        requireAllNonNull(target, editedFlashcardSet);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            throw new FlashcardSetNotFoundException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        if (!target.equals(editedFlashcardSet) \u0026\u0026 contains(editedFlashcardSet)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            throw new DuplicateFlashcardSetException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        internalList.set(index, editedFlashcardSet);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Removes the equivalent task from the list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * The task must exist in the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public void remove(FlashcardSet toRemove) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            throw new FlashcardSetNotFoundException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public void setFlashcardSets(UniqueFlashcardSetList replacement) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Replaces the contents of this list with {@code flashcardSets}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * {@code flashcardSets} must not contain duplicate flashcardSets."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public void setFlashcardSets(List\u003cFlashcardSet\u003e flashcardSets) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        requireAllNonNull(flashcardSets);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        if (!flashcardSetsAreUnique(flashcardSets)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            throw new DuplicateFlashcardSetException();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        internalList.setAll(flashcardSets);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public ObservableList\u003cFlashcardSet\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public Iterator\u003cFlashcardSet\u003e iterator() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                || (other instanceof UniqueFlashcardSetList // instanceof handles nulls"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueFlashcardSetList) other).internalList));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Returns true if {@code flashcardSets} contains only unique flashcardSets."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private boolean flashcardSetsAreUnique(List\u003cFlashcardSet\u003e flashcardSets) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        for (int i \u003d 0; i \u003c flashcardSets.size() - 1; i++) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            for (int j \u003d i + 1; j \u003c flashcardSets.size(); j++) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                if (flashcardSets.get(i).equals(flashcardSets.get(j))) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 127
    }
  },
  {
    "path": "src/main/java/seedu/address/model/flashcard/exceptions/DuplicateFlashcardException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.address.model.flashcard.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class DuplicateFlashcardException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public DuplicateFlashcardException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        super(\"Operation would result in duplicate flashcard\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/flashcard/exceptions/DuplicateFlashcardSetException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.address.model.flashcard.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": " * Signals that the operation will result in duplicate FlashcardSet"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": " * (FlashcardSet are considered duplicates if they have the same name)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "public class DuplicateFlashcardSetException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public DuplicateFlashcardSetException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        super(\"Operation would result in duplicate flashcard set\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/flashcard/exceptions/FlashcardNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.address.model.flashcard.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class FlashcardNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public FlashcardNotFoundException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        super(\"Flashcard not found.\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/flashcard/exceptions/FlashcardSetNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.address.model.flashcard.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": " * Signals that the operation is unable to find the specified flashcard set."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "public class FlashcardSetNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public FlashcardSetNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        super(\"Flashcard set not found.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 7,
      "bowei-yu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/quiz/Quiz.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.address.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.flashcard.Answer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.flashcard.FlashcardSetName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.flashcard.Question;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class Quiz {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final FlashcardSet flashcardSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final int flashcardSetIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final int totalScore;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private int pointsScored \u003d 0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private int currentIndex \u003d 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final boolean[] scoreboard;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final String[] userAnswers;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Creates a quiz from a given flashcard set."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @param index provided"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @param flashcardSet based on index given"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public Quiz(int index, FlashcardSet flashcardSet) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.flashcardSetIndex \u003d index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.flashcardSet \u003d flashcardSet;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.totalScore \u003d this.flashcardSet.getFlashcards().size();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.scoreboard \u003d new boolean[totalScore];"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.userAnswers \u003d new String[totalScore];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Creates a Quiz object with the given attributes."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @param flashcardSet"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @param totalScore"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @param pointsScored"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @param scoreboard"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public Quiz(FlashcardSet flashcardSet, int totalScore, int pointsScored,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                boolean[] scoreboard, String[] userAnswers) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.totalScore \u003d totalScore;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.flashcardSet \u003d flashcardSet;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.pointsScored \u003d pointsScored;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.scoreboard \u003d scoreboard;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.flashcardSetIndex \u003d 0; // index doesn\u0027t matter here anymore"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.userAnswers \u003d userAnswers;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public Question getQuestion() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (currentIndex \u003e\u003d totalScore) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return flashcardSet.getFlashcards().get(currentIndex).getQuestion();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public Answer getAnswer() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Answer answer \u003d flashcardSet.getFlashcards().get(currentIndex).getAnswer();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        currentIndex++;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public String[] getUserAnswers() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return userAnswers;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Stores the user answer."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @param input user answer"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void saveAnswer(String input) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assert currentIndex \u003c totalScore;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.userAnswers[currentIndex] \u003d input;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public int getFlashcardSetIndex() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return this.flashcardSetIndex;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setPointsScored(boolean isCorrect) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        scoreboard[currentIndex - 1] \u003d isCorrect;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (isCorrect) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            pointsScored++;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public boolean[] getResults() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return scoreboard;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public FlashcardSet getFlashcardSet() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return flashcardSet;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Gives the string representation of the quiz,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * using its score records."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @return string representation"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        builder.append(\"Total score \u003d \").append(pointsScored).append(\"/\").append(totalScore).append(\"\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        builder.append(\"Percentage scored \u003d \").append(getPercentageScore()).append(\"\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        for (int i \u003d 0; i \u003c totalScore; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            String isCorrect \u003d scoreboard[i] ? \"\\u2713\" : \"\\u2718\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            builder.append(i + 1).append(\". Question: \")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                    .append(flashcardSet.getFlashcards().get(i).getQuestion())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                    .append(\"\\n\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            if (userAnswers[i] !\u003d null) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                builder.append(\"Correct Answer: \")"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                        .append(flashcardSet.getFlashcards().get(i).getAnswer())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                        .append(\"\\n\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                builder.append(isCorrect).append(\". Your Answer: \")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                        .append(userAnswers[i])"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                        .append(\"\\n\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                builder.append(isCorrect).append(\"Answer: \")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                        .append(flashcardSet.getFlashcards().get(i).getAnswer())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                        .append(\"\\n\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public double getPercentageScore() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return ((double) pointsScored) / ((double) totalScore) * 100;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public int getPointsScored() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return pointsScored;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public int getTotalScore() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return totalScore;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public FlashcardSetName getFlsetName() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return flashcardSet.getFlashcardSetName();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (!(other instanceof Quiz)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Quiz otherQuiz \u003d (Quiz) other;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return otherQuiz.getFlashcardSetIndex() \u003d\u003d (this.flashcardSetIndex);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 1,
      "bowei-yu": 151
    }
  },
  {
    "path": "src/main/java/seedu/address/model/quiz/UniqueQuizRecordsMap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.address.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.flashcard.FlashcardSetName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.quiz.exceptions.QuizNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class UniqueQuizRecordsMap {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final ObservableMap\u003cFlashcardSetName, Quiz\u003e internalMap \u003d FXCollections.observableHashMap();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final ObservableMap\u003cFlashcardSetName, Quiz\u003e internalUnmodifiableMap \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            FXCollections.unmodifiableObservableMap(internalMap);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Returns true if the hash map contains an equivalent quiz as the given argument."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public boolean contains(Quiz toCheck) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return internalMap.containsValue(toCheck);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Adds a Quiz to the hashmap with the corresponding flashcard set name.."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void add(FlashcardSetName flashcardSetName, Quiz toAdd) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        internalMap.put(flashcardSetName, toAdd);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Replaces the quiz {@code target} in the list with {@code editedQuiz}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * The editedQuiz of {@code editedQuiz} must not be the same as another"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * existing quiz in the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setQuiz(Quiz target, Quiz editedQuiz) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        requireAllNonNull(target, editedQuiz);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (!contains(target)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new QuizNotFoundException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (!target.equals(editedQuiz) \u0026\u0026 contains(editedQuiz)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new QuizNotFoundException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        internalMap.remove(target.getFlsetName());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        internalMap.put(editedQuiz.getFlsetName(), editedQuiz);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Removes the equivalent quiz from the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * The quiz must exist in the list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void remove(FlashcardSetName toRemove) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (!internalMap.containsKey(toRemove)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new QuizNotFoundException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        internalMap.remove(toRemove);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public Quiz getQuiz(FlashcardSetName name) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return internalMap.get(name);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setQuizRecords(UniqueQuizRecordsMap replacement) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        internalMap.putAll(replacement.internalMap);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Replaces the contents of this list with {@code quizRecords}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * {@code quizRecords} must not contain duplicate quizzes."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setQuizRecords(Map\u003cFlashcardSetName, Quiz\u003e quizRecords) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        requireAllNonNull(quizRecords);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        internalMap.putAll(quizRecords);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Returns the backing map as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public ObservableMap\u003cFlashcardSetName, Quiz\u003e asUnmodifiableObservableMap() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return internalUnmodifiableMap;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                || (other instanceof UniqueQuizRecordsMap // instanceof handles nulls"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                \u0026\u0026 internalMap.equals(((UniqueQuizRecordsMap) other).internalMap));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return internalMap.hashCode();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 105
    }
  },
  {
    "path": "src/main/java/seedu/address/model/quiz/exceptions/QuizNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.address.model.quiz.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class QuizNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String MESSAGE_QUIZ_NOT_FOUND \u003d \"Quiz not found!\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public QuizNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        super(MESSAGE_QUIZ_NOT_FOUND);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/systemlevelmodel/AddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.model.systemlevelmodel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 1,
      "-": 119
    }
  },
  {
    "path": "src/main/java/seedu/address/model/systemlevelmodel/FlashcardBank.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.model.systemlevelmodel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.model.flashcard.UniqueFlashcardSetList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": " * Wraps all data of flashcard sets."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": " * Duplicates are not allowed."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "public class FlashcardBank implements ReadOnlyFlashcardBank {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final UniqueFlashcardSetList flashcardSets;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        flashcardSets \u003d new UniqueFlashcardSetList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public FlashcardBank() {}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Creates a FlashcardBank using the FlashcardSets in the {@code toBeCopied}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public FlashcardBank(ReadOnlyFlashcardBank toBeCopied) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Replaces the contents of the task list with {@code flashcardSets}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * {@code flashcardSets} must not contain duplicate flashcardSets."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public void setFlashcardSets(List\u003cFlashcardSet\u003e flashcardSets) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        this.flashcardSets.setFlashcardSets(flashcardSets);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Resets the existing data of this {@code FlashcardBank} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public void resetData(ReadOnlyFlashcardBank newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        setFlashcardSets(newData.getFlashcardSetList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    //// task-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Returns true if a task with the same identity as {@code task} exists in the schedule."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public boolean hasFlashcardSet(FlashcardSet task) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return flashcardSets.contains(task);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Adds a task to the schedule."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * The task must not already exist in the schedule."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public void addFlashcardSet(FlashcardSet t) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        flashcardSets.add(t);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Replaces the given task {@code target} in the list with {@code editedFlashcardSet}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * {@code target} must exist in the schedule."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * The task identity of {@code editedFlashcardSet} must not be the same as another existing task in the schedule."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public void setFlashcardSet(FlashcardSet target, FlashcardSet editedFlashcardSet) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        requireNonNull(editedFlashcardSet);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        flashcardSets.setFlashcardSet(target, editedFlashcardSet);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Removes {@code key} from this {@code FlashcardBank}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * {@code key} must exist in the FlashcardBank."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public void removeFlashcardSet(FlashcardSet key) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        flashcardSets.remove(key);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return flashcardSets.asUnmodifiableObservableList().size() + \" sets\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public ObservableList\u003cFlashcardSet\u003e getFlashcardSetList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return flashcardSets.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                || (other instanceof FlashcardBank // instanceof handles nulls"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                \u0026\u0026 flashcardSets.equals(((FlashcardBank) other).flashcardSets));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return flashcardSets.hashCode();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 118,
      "chuyiting": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/systemlevelmodel/QuizRecords.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.address.model.systemlevelmodel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.flashcard.FlashcardSetName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.quiz.Quiz;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.quiz.UniqueQuizRecordsMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class QuizRecords implements ReadOnlyQuizRecords {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final UniqueQuizRecordsMap quizRecordsMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        quizRecordsMap \u003d new UniqueQuizRecordsMap();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public QuizRecords() {}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Creates Quiz Records using the Quiz Records in the {@code toBeCopied}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public QuizRecords(ReadOnlyQuizRecords toBeCopied) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Replaces the contents of the quiz records list with {@code }."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * {@code quizRecords} must not contain duplicate quizRecords."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setQuizRecordsMap(Map\u003cFlashcardSetName, Quiz\u003e quizRecordsMap) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.quizRecordsMap.setQuizRecords(quizRecordsMap);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Resets the existing data of this {@code QuizRecords} with {@code newData}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void resetData(ReadOnlyQuizRecords newData) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        setQuizRecordsMap(newData.getQuizRecordsMap());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    //// task-level operations"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Returns true if a quiz record with the same identity as {@code quiz record} exists in the quiz records."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public boolean hasQuizRecord(Quiz quiz) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        requireNonNull(quiz);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return quizRecordsMap.contains(quiz);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Adds a quiz record to the map."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * The quiz must not already exist in the map."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void addQuiz(Quiz quiz) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        quizRecordsMap.add(quiz.getFlsetName(), quiz);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Replaces the given quiz {@code target} in the list with {@code editedQuiz}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * {@code target} must exist in the schedule."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * The quiz identity of {@code editedQuiz} must not be the same as another existing quiz in the quiz records."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setQuiz(Quiz target, Quiz editedQuiz) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        requireNonNull(editedQuiz);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        quizRecordsMap.setQuiz(target, editedQuiz);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Removes {@code key} from this {@code QuizRecords}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * {@code key} must exist in the QuizRecords."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void removeQuiz(FlashcardSetName key) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        quizRecordsMap.remove(key);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public Quiz getQuiz(FlashcardSetName name) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return quizRecordsMap.getQuiz(name);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return quizRecordsMap.asUnmodifiableObservableMap().toString();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public ObservableMap\u003cFlashcardSetName, Quiz\u003e getQuizRecordsMap() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return quizRecordsMap.asUnmodifiableObservableMap();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                || (other instanceof QuizRecords // instanceof handles nulls"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                \u0026\u0026 quizRecordsMap.equals(((QuizRecords) other).getQuizRecordsMap()));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return quizRecordsMap.hashCode();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 118
    }
  },
  {
    "path": "src/main/java/seedu/address/model/systemlevelmodel/ReadOnlyAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.model.systemlevelmodel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/systemlevelmodel/ReadOnlyFlashcardBank.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.model.systemlevelmodel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": " * Unmodifiable view of a flashcard bank."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "public interface ReadOnlyFlashcardBank {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Returns an unmodifiable view of the list of flashcard sets."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * This list will not contain any duplicate flashcard sets."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    ObservableList\u003cFlashcardSet\u003e getFlashcardSetList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 15,
      "chuyiting": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/systemlevelmodel/ReadOnlyQuizRecords.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.address.model.systemlevelmodel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.flashcard.FlashcardSetName;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.quiz.Quiz;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public interface ReadOnlyQuizRecords {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Returns an unmodifiable view of the list of quiz records."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * This list will not contain any duplicate quiz records."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    ObservableMap\u003cFlashcardSetName, Quiz\u003e getQuizRecordsMap();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/systemlevelmodel/ReadOnlySchedule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.model.systemlevelmodel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " * Unmodifiable view of a schedule"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "  */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public interface ReadOnlySchedule {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Returns an unmodifiable view of the tasks list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * This list will not contain any duplicate tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    ObservableList\u003cTask\u003e getTaskList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/systemlevelmodel/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.model.systemlevelmodel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    Path getScheduleFilePath();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    Path getFlashcardBankFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 2,
      "chuyiting": 1,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/systemlevelmodel/Schedule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.model.systemlevelmodel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.task.UniqueTaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " * Wraps all data at the schedule level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " * Duplicates are not allowed (by .isSameTask comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class Schedule implements ReadOnlySchedule {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final UniqueTaskList tasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        tasks \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Schedule() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Creates a Schedule using the Tasks in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Schedule(ReadOnlySchedule toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Replaces the contents of the task list with {@code tasks}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.tasks.setTasks(tasks);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Resets the existing data of this {@code Schedule} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void resetData(ReadOnlySchedule newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        setTasks(newData.getTaskList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    //// task-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Returns true if a task with the same identity as {@code task} exists in the schedule."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return tasks.contains(task);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Adds a task to the schedule."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * The task must not already exist in the schedule."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void addTask(Task t) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        tasks.add(t);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Replaces the given task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * {@code target} must exist in the schedule."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the schedule."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        requireNonNull(editedTask);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        tasks.setTask(target, editedTask);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Removes {@code key} from this {@code Schedule}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * {@code key} must exist in the Schedule."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void removeTask(Task key) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        tasks.remove(key);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return tasks.asUnmodifiableObservableList().size() + \" tasks\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return tasks.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                || (other instanceof Schedule // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                \u0026\u0026 tasks.equals(((Schedule) other).tasks));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return tasks.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 1,
      "chuyiting": 119
    }
  },
  {
    "path": "src/main/java/seedu/address/model/systemlevelmodel/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.model.systemlevelmodel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\").toAbsolutePath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Path scheduleFilePath \u003d Paths.get(\"data\", \"schedule.json\").toAbsolutePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private Path flashcardBankFilePath \u003d Paths.get(\"data\", \"flashcardbank.json\").toAbsolutePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private Path quizRecordsFilePath \u003d Paths.get(\"data\", \"quizrecords.json\").toAbsolutePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Path getScheduleFilePath() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return scheduleFilePath;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void setScheduleFilePath(Path scheduleFilePath) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        requireNonNull(scheduleFilePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.scheduleFilePath \u003d scheduleFilePath;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public Path getFlashcardBankFilePath() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return flashcardBankFilePath;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public void setFlashcardBankFilePath(Path flashcardBankFilePath) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        requireNonNull(flashcardBankFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        this.flashcardBankFilePath \u003d flashcardBankFilePath;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public Path getQuizRecordsFilePath() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return quizRecordsFilePath;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setQuizRecordsFilePath(Path quizRecordsFilePath) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        requireNonNull(quizRecordsFilePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.quizRecordsFilePath \u003d quizRecordsFilePath;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                \u0026\u0026 scheduleFilePath.equals(o.scheduleFilePath)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                \u0026\u0026 flashcardBankFilePath.equals(o.flashcardBankFilePath)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                \u0026\u0026 quizRecordsFilePath.equals(o.quizRecordsFilePath);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                scheduleFilePath, flashcardBankFilePath, quizRecordsFilePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        sb.append(\"\\nLocal addressbook data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        sb.append(\"\\nLocal schedule data file location : \" + scheduleFilePath);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        sb.append(\"\\nLocal flashcardbank data file location : \" + flashcardBankFilePath);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        sb.append(\"\\nLocal quizrecords data file location : \" + quizRecordsFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 12,
      "chuyiting": 15,
      "bowei-yu": 15,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Date.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.time.format.DateTimeFormatterBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.time.temporal.ChronoField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " * Represents a Task\u0027s date in StudyBananas."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            \"Date should be in the dd/mm/yyyy format\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^(?:(?:31(\\\\/|-|\\\\.)(?:0?[13578]\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            + \"|1[02]))\\\\1|(?:(?:29|30)(\\\\/|-|\\\\.)(?:0?[13-9]|1[0-2])\\\\2))(?:(?:1[6-9]\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            + \"|[2-9]\\\\d)?\\\\d{2})$|^(?:29(\\\\/|-|\\\\.)0?2\\\\3(?:(?:(?:1[6-9]|[2-9]\\\\d)?(?:0[48]\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            + \"|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            + \"]|1\\\\d|2[0-8])(\\\\/|-|\\\\.)(?:(?:0?[1-9])|(?:1[0-2]))\\\\4(?:(?:1[6-9]|[2-9]\\\\d)?\\\\d{2})$\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Default time is 12:00."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final DateTimeFormatter DATE_TO_STANDARD_DATETIME_FORMATTER \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            new DateTimeFormatterBuilder().appendPattern(\"yyyy-MM-dd\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    .optionalStart().appendPattern(\" HH:mm\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    .optionalEnd().parseDefaulting(ChronoField.HOUR_OF_DAY, 12)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    .parseDefaulting(ChronoField.MINUTE_OF_DAY, 0).toFormatter();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public final LocalDate date;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Constructs a {@code Date}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param date A valid date."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public Date(String date) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        checkArgument(isValidDate(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        LocalDate dateObject \u003d LocalDate.parse(date, formatter);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        this.date \u003d dateObject;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Returns true if a given string is a valid date."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        DateTimeFormatter wantedFormat \u003d DateTimeFormatter.ofPattern(\"dd/mm/yyyy\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String dateInString \u003d date.format(wantedFormat);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return dateInString;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                || (other instanceof Date // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                \u0026\u0026 date.toString().equals(((Date) other).date.toString())); // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return date.hashCode();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 59,
      "chuyiting": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/DateTime.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.task.timeformat.TimeFormatChecker;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " * Represents a Task\u0027s dateTime in StudyBananas."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDateTime(String)}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class DateTime {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \"DateTime should be in the yyyy-MM-dd HH:mm format\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final String STANDARD_FORMAT \u003d \"yyyy-MM-dd HH:mm\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public final LocalDateTime dateTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private DateTime() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        dateTime \u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Constructs a {@code DateTime}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param dateTime A valid date time."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public DateTime(String dateTime) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        requireNonNull(dateTime);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        checkArgument(isValidDateTime(dateTime), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.dateTime \u003d TimeFormatChecker.mapToLocalDateTime(dateTime);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Util function for sample data."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static DateTime getToday(int hour, int minute) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        LocalTime time \u003d LocalTime.of(hour, minute);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        DateTimeFormatter dayFormatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String todayStr \u003d dayFormatter.format(today) + \" \" + timeFormatter.format(time);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return new DateTime(todayStr);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Returns true if a given string is a valid date or an empty string."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static boolean isValidDateTime(String test) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return test.equals(\"\") || TimeFormatChecker.check(test);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Check if the dateTime is today"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public boolean isToday() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return LocalDate.now().equals(dateTime.toLocalDate());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        DateTimeFormatter wantedFormat \u003d DateTimeFormatter.ofPattern(STANDARD_FORMAT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String dateInString \u003d dateTime.format(wantedFormat);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return dateInString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                || (other instanceof DateTime // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                \u0026\u0026 dateTime.toString().equals(((DateTime) other).dateTime.toString())); // state check"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return dateTime.hashCode();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 49,
      "chuyiting": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Description.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " * Represents a Task\u0027s description in StudyBananas."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            \"Description should only contain printable characters, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * The first character of the description must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^([^\\\\s].*)?$\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public final String description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Constructs a {@code Description}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param description A valid task\u0027s description."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Returns true if a given string is a valid description."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return test.equals(\"\") || test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public boolean rigorousEquals(Description other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return this.description.toLowerCase().equals(other.description.toLowerCase());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                \u0026\u0026 description.equals(((Description) other).description)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return description.hashCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 56,
      "chuyiting": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Duration.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " * Represents a Task\u0027s duration in StudyBananas."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class Duration {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            \"Duration should only contain a positive integer which is less than 1440.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static final int MINUTE_PER_DAY \u003d 60 * 24;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public final Integer duration;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Constructs a {@code Duration}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param duration A valid task\u0027s duration."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Duration(String duration) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        requireNonNull(duration);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        checkArgument(isValidDuration(duration), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.duration \u003d Integer.valueOf(duration);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Construct Duration from an {@Code Integer}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param duration"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Duration(Integer duration) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        requireNonNull(duration);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        checkArgument(duration \u003c MINUTE_PER_DAY, MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Returns true if a given string is a valid duration."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static boolean isValidDuration(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            int duration \u003d Integer.valueOf(test);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            return duration \u003e\u003d 0 \u0026\u0026 duration \u003c MINUTE_PER_DAY;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return duration + \" minutes\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                || (other instanceof Duration)// instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                \u0026\u0026 duration \u003d\u003d ((Duration) other).duration; // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return duration.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 3,
      "chuyiting": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/InfoContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class InfoContainsKeywordsPredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public InfoContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private boolean isEmptyKeyword(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return keywords.size() \u003d\u003d 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private boolean doesTitleContainKeywords(Task task) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(task.getTitle().title, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private boolean doesDescriptionContainKeywords(Task task) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Optional\u003cDescription\u003e description \u003d task.getDescription();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return !isEmptyKeyword(keywords) \u0026\u0026 keywords.stream()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                .allMatch(keyword -\u003e description.map(desc -\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                        StringUtil.containsWordIgnoreCase(desc.toString(), keyword)).orElse(false));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private boolean doesDateTimeContainKeywords(Task task) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Optional\u003cDateTime\u003e dateTime \u003d task.getDateTime();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return !isEmptyKeyword(keywords) \u0026\u0026 keywords.stream()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                .allMatch(keyword -\u003e dateTime.map(date -\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                        StringUtil.containsWordIgnoreCase(date.toString(), keyword)).orElse(false));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return doesDateTimeContainKeywords(task) || doesDescriptionContainKeywords(task)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                || doesTitleContainKeywords(task);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                || (other instanceof InfoContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                \u0026\u0026 keywords.equals(((InfoContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 30,
      "chuyiting": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Task.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.ui.scheduleui.TaskCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " * Represents a Task in the StudyBananas."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final Title title;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final Optional\u003cDescription\u003e description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private final Optional\u003cDateTime\u003e dateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final Optional\u003cDuration\u003e duration;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    // Not sure if this is a good practice. This is used by the ListChangeListener in TimeScale"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private TaskCell taskCellBind;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Initializes a Task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param title       Title of the task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param dateTime    Date and Time of the task (Optional)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Task(Title title, Description description, DateTime dateTime, Duration duration) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.description \u003d Optional.ofNullable(description);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        this.dateTime \u003d Optional.ofNullable(dateTime);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.duration \u003d Optional.ofNullable(duration);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Optional\u003cDateTime\u003e getDateTime() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Optional\u003cDuration\u003e getDuration() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return duration;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private boolean hasDate() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return !dateTime.isEmpty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Returns true if both tasks have the same title and description."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * This defines a weaker notion of equality between two tasks."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public boolean isSameTask(Task other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (!(other instanceof Task)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        Task otherTask \u003d other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return otherTask.getTitle().rigorousEquals(this.getTitle())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                \u0026\u0026 (other.getDescription().equals(this.getDescription())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                || haveSameDescription(otherTask, this));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private boolean bothHaveDescription(Task t1, Task t2) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return t1.getDescription().isPresent() \u0026\u0026 t2.getDescription().isPresent();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private boolean haveSameDescription(Task t1, Task t2) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return bothHaveDescription(t1, t2) \u0026\u0026 t1.getDescription().get().rigorousEquals(t2.getDescription().get());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private StringBuilder getDescriptionString() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        StringBuilder emptyString \u003d new StringBuilder(\"\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return description.map(desc -\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                new StringBuilder(\"Description: \")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                        .append(desc.toString() + \"\\n\")).orElse(emptyString);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private StringBuilder getDateTimeString() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        StringBuilder emptyString \u003d new StringBuilder(\"\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return dateTime.map(time -\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                new StringBuilder(\"Time: \")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                        .append(time.toString() + \"\\n\")).orElse(emptyString);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private StringBuilder getDurationString() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        StringBuilder emptyString \u003d new StringBuilder(\"\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return duration.map(time -\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                new StringBuilder(\"Duration: \")"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                        .append(time.toString() + \"\\n\")).orElse(emptyString);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public TaskCell getTaskCellBind() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return taskCellBind;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void setTaskCellBind(TaskCell taskCellBind) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.taskCellBind \u003d taskCellBind;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public boolean happensToday() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return duration.isPresent() \u0026\u0026 dateTime.isPresent() \u0026\u0026 dateTime.get().isToday();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Returns true if both tasks have the same identity and data fields."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * This defines a stronger notion of equality between two tasks."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        if (!(other instanceof Task)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Task otherTask \u003d (Task) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return otherTask.getTitle().equals(this.getTitle())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                \u0026\u0026 otherTask.getDescription().equals(this.getDescription())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                \u0026\u0026 otherTask.dateTime.equals(this.dateTime)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                \u0026\u0026 otherTask.duration.equals(this.duration);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return Objects.hash(title, description, dateTime, duration);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        builder.append(\"Title: \")"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                .append(getTitle() + \"\\n\")"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                .append(getDescriptionString())"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                .append(getDateTimeString())"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                .append(getDurationString());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 70,
      "cupofjoee": 1,
      "chuyiting": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/TaskHappensTodayPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class TaskHappensTodayPredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return task.happensToday();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                || (other instanceof TaskHappensTodayPredicate); // instanceof handles nulls"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Title.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class Title {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \"Task title should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * The first character of the title must not be a whitespace,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public final String title;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Constructs a {@code Title}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param title A valid title."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Title(String title) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assert title !\u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        checkArgument(isValidTitle(title), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static boolean isValidTitle(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public boolean rigorousEquals(Title other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return this.title.toLowerCase().equals(other.title.toLowerCase());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                || (other instanceof Title // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                \u0026\u0026 title.equals(((Title) other).title)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return title.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 1,
      "chuyiting": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/UniqueTaskList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " * A list of tasks that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " * A task is considered unique by comparing using {@code Task#isSameTask(Task)}. As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " * tasks uses Task#isSameTask(Task) for equality so as to ensure that the task being added or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " * unique in terms of identity in the UniqueTaskList. However, the removal of a task uses #equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " * as to ensure that the task with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " * @see Task#isSameTask(Task)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class UniqueTaskList implements Iterable\u003cTask\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Returns true if the list contains an equivalent task as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public boolean contains(Task toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameTask);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Adds a task to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * The task must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void add(Task toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Replaces the task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        if (target.isSameTask(editedTask) || contains(editedTask)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        internalList.set(index, editedTask);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Removes the equivalent task from the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * The task must exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void remove(Task toRemove) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void setTasks(UniqueTaskList replacement) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Replaces the contents of this list with {@code tasks}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        requireAllNonNull(tasks);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (!tasksAreUnique(tasks)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        internalList.setAll(tasks);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public ObservableList\u003cTask\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Iterator\u003cTask\u003e iterator() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                || (other instanceof UniqueTaskList // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueTaskList) other).internalList));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Returns true if {@code tasks} contains only unique tasks."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private boolean tasksAreUnique(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size() - 1; i++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            for (int j \u003d i + 1; j \u003c tasks.size(); j++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                if (tasks.get(i).isSameTask(tasks.get(j))) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 4,
      "chuyiting": 135
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/exceptions/DuplicateTaskException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "package seedu.address.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " * Signals that the operation will result in duplicate Tasks (Tasks are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " * title and description)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class DuplicateTaskException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public DuplicateTaskException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        super(\"Operation would result in duplicate task\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/exceptions/TaskNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "package seedu.address.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class TaskNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/exceptions/TimeFormatException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "package seedu.address.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class TimeFormatException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public TimeFormatException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        super(\"Time format is not valid\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 1,
      "chuyiting": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/timeformat/IsoDate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.model.task.timeformat;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.time.format.DateTimeFormatterBuilder;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.time.temporal.ChronoField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.model.task.exceptions.TimeFormatException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class IsoDate implements TimeFormat {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static final String PATTERN \u003d \"yyyy-MM-dd\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static final DateTimeFormatter TIME_FORMATTER \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            new DateTimeFormatterBuilder().appendPattern(PATTERN)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    .optionalStart().appendPattern(\" HH:mm\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    .optionalEnd().parseDefaulting(ChronoField.HOUR_OF_DAY, 12)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    .parseDefaulting(ChronoField.MINUTE_OF_DAY, 0).toFormatter();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public LocalDateTime check(String date) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            LocalDateTime ld \u003d LocalDateTime.parse(date, TIME_FORMATTER);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return ld;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new TimeFormatException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 1,
      "chuyiting": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/timeformat/IsoDateTime.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.model.task.timeformat;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.time.format.DateTimeFormatterBuilder;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.model.task.exceptions.TimeFormatException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class IsoDateTime implements TimeFormat {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static final String PATTERN \u003d \"yyyy-MM-dd\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static final DateTimeFormatter TIME_FORMATTER \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            new DateTimeFormatterBuilder().appendPattern(PATTERN)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    .optionalStart().appendPattern(\" HH:mm\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    .optionalEnd().toFormatter();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public LocalDateTime check(String date) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            LocalDateTime ld \u003d LocalDateTime.parse(date, TIME_FORMATTER);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return ld;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new TimeFormatException();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 1,
      "chuyiting": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/timeformat/TimeFormat.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.model.task.timeformat;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.model.task.exceptions.TimeFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public interface TimeFormat {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    LocalDateTime check(String time) throws TimeFormatException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 1,
      "chuyiting": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/timeformat/TimeFormatChecker.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.model.task.timeformat;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.model.task.exceptions.TimeFormatException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class TimeFormatChecker {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private static final List\u003cTimeFormat\u003e VALID_FORMATS \u003d Arrays.asList(new IsoDateTime(), new IsoDate());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Check if the time format is supported by Study bananas)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param time"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static boolean check(String time) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        for (TimeFormat format : VALID_FORMATS) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                LocalDateTime ldt \u003d format.check(time);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            } catch (TimeFormatException e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                // not a good practice, still need refactor."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Map time String to {@Code LocalDateTime}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param time"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static LocalDateTime mapToLocalDateTime(String time) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        for (TimeFormat format : VALID_FORMATS) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                LocalDateTime ldt \u003d format.check(time);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                return ldt;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            } catch (TimeFormatException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                //Not a good practice, still need to refactor."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        throw new TimeFormatException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 2,
      "chuyiting": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.model.flashcard.Answer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.model.flashcard.FlashcardSetName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.model.flashcard.Question;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.quiz.Quiz;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.model.systemlevelmodel.FlashcardBank;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.systemlevelmodel.QuizRecords;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlyFlashcardBank;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlyQuizRecords;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlySchedule;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.Schedule;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.task.DateTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.task.Duration;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " * Contains utility methods for populating {@code StudyBananas} with sample data."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"family\")),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static Task[] getSampleTasks() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return new Task[] {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            new Task(new Title(\"CS2103T\"), new Description(\"Week 8 topics quiz.\"),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    DateTime.getToday(11, 30), new Duration(60)),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            new Task(new Title(\"CS2103T\"), new Description(\"Week 9 topics quiz.\"),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    new DateTime(\"2020-10-16 23:59\"), new Duration(60)),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            new Task(new Title(\"CS2103T\"), new Description(\"Popping dance lecture.\"),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    new DateTime(\"2020-10-23 23:59\"), new Duration(60)),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            new Task(new Title(\"CCA\"), new Description(\"Week 10 topics quiz.\"),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    DateTime.getToday(13, 0), new Duration(120)),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            new Task(new Title(\"Household\"), null,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    new DateTime(\"2020-11-11 12:30\"), new Duration(60)),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            new Task(new Title(\"Job\"), new Description(\"\"),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    new DateTime(\"2020-09-29 22:00\"), new Duration(60))"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        };"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static List\u003cFlashcard\u003e getSampleFlashcardCS2040() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        List\u003cFlashcard\u003e flashcards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        flashcards.add(new Flashcard(new Question(\"Time complexity of binary search?\"),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                new Answer(\"O(logn)\")));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        flashcards.add(new Flashcard(new Question(\"What are conditions for binary search?\"),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                new Answer(\"It has to be sorted array\")));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return flashcards;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static FlashcardSet[] getSampleFlashcardSets() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return new FlashcardSet[] {new FlashcardSet(new FlashcardSetName(\"CS2040\"), getSampleFlashcardCS2040())};"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private static Quiz[] getSampleQuizzes() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return new Quiz[] {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            new Quiz(1, new FlashcardSet(new FlashcardSetName(\"CS2040\"),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                    getSampleFlashcardCS2040()))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        };"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static ReadOnlySchedule getSampleSchedule() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Schedule sampleSchedule \u003d new Schedule();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        for (Task sampleTask : getSampleTasks()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            sampleSchedule.addTask(sampleTask);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return sampleSchedule;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static ReadOnlyFlashcardBank getSampleFlashcardBank() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        FlashcardBank sampleFlashcardBank \u003d new FlashcardBank();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        for (FlashcardSet sampleFlashcardSet : getSampleFlashcardSets()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            sampleFlashcardBank.addFlashcardSet(sampleFlashcardSet);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return sampleFlashcardBank;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static ReadOnlyQuizRecords getSampleQuizRecords() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        QuizRecords quizRecords \u003d new QuizRecords();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        for (Quiz sampleQuiz: getSampleQuizzes()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            quizRecords.addQuiz(sampleQuiz);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return quizRecords;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 29,
      "bowei-yu": 18,
      "chuyiting": 36,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AddressBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " * Represents a storage for {@link AddressBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface AddressBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 3,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAddressBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cJsonSerializableAddressBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                filePath, JsonSerializableAddressBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAddressBook(addressBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 1,
      "chuyiting": 1,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.AddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            if (addressBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(person);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 2,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 1,
      "chuyiting": 2,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlyFlashcardBank;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlyQuizRecords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlySchedule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.storage.flashcardstorage.FlashcardBankStorage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.storage.quizstorage.QuizRecordsStorage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.storage.schedulestorage.ScheduleStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public interface Storage extends AddressBookStorage, UserPrefsStorage, ScheduleStorage,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardBankStorage, QuizRecordsStorage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    Path getScheduleFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    Optional\u003cReadOnlySchedule\u003e readSchedule() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    void saveSchedule(ReadOnlySchedule schedule) throws IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    Path getFlashcardBankFilePath();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    Optional\u003cReadOnlyFlashcardBank\u003e readFlashcardBank() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    void saveFlashcardBank(ReadOnlyFlashcardBank flashcardBank) throws IOException;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    Path getQuizRecordsFilePath();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    Optional\u003cReadOnlyQuizRecords\u003e readQuizRecords() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    void saveQuizRecords(ReadOnlyQuizRecords quizRecords) throws IOException;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 10,
      "chuyiting": 15,
      "bowei-yu": 13,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlyFlashcardBank;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlyQuizRecords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlySchedule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.storage.flashcardstorage.FlashcardBankStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.storage.quizstorage.QuizRecordsStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.storage.schedulestorage.ScheduleStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final ScheduleStorage scheduleStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final FlashcardBankStorage flashcardBankStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final QuizRecordsStorage quizRecordsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code AddressBookStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public StorageManager(ScheduleStorage scheduleStorage, FlashcardBankStorage flashcardBankStorage,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                          QuizRecordsStorage quizRecordsStorage,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                          AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.scheduleStorage \u003d scheduleStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        this.flashcardBankStorage \u003d flashcardBankStorage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.quizRecordsStorage \u003d quizRecordsStorage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        logger.fine(\"Attempting to read address data from file: \" + filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        logger.fine(\"Attempting to write to addressbook data file: \" + filePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Schedule methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Path getScheduleFilePath() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return scheduleStorage.getScheduleFilePath();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Optional\u003cReadOnlySchedule\u003e readSchedule() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return readSchedule(scheduleStorage.getScheduleFilePath());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Optional\u003cReadOnlySchedule\u003e readSchedule(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        logger.fine(\"Attempting to read address schedule from file: \" + filePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return scheduleStorage.readSchedule(filePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void saveSchedule(ReadOnlySchedule schedule) throws IOException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        saveSchedule(schedule, scheduleStorage.getScheduleFilePath());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void saveSchedule(ReadOnlySchedule schedule, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        logger.fine(\"Attempting to write to schedule data file: \" + filePath);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        scheduleStorage.saveSchedule(schedule, filePath);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FlashcardBank methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public Path getFlashcardBankFilePath() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return flashcardBankStorage.getFlashcardBankFilePath();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public Optional\u003cReadOnlyFlashcardBank\u003e readFlashcardBank() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return readFlashcardBank(flashcardBankStorage.getFlashcardBankFilePath());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public Optional\u003cReadOnlyFlashcardBank\u003e readFlashcardBank(Path filePath) throws"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            DataConversionException, IOException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        logger.fine(\"Attempting to read FlashcardBank from file: \" + filePath);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return flashcardBankStorage.readFlashcardBank(filePath);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public void saveFlashcardBank(ReadOnlyFlashcardBank flashcardBank) throws IOException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        saveFlashcardBank(flashcardBank, flashcardBankStorage.getFlashcardBankFilePath());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public void saveFlashcardBank(ReadOnlyFlashcardBank flashcardBank, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        logger.fine(\"Attempting to write to FlashcardBank data file: \" + filePath);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        flashcardBankStorage.saveFlashcardBank(flashcardBank, filePath);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d QuizRecords methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public Path getQuizRecordsFilePath() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return quizRecordsStorage.getQuizRecordsFilePath();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public Optional\u003cReadOnlyQuizRecords\u003e readQuizRecords() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return readQuizRecords(quizRecordsStorage.getQuizRecordsFilePath());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public Optional\u003cReadOnlyQuizRecords\u003e readQuizRecords(Path filePath) throws"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            DataConversionException, IOException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        logger.fine(\"Attempting to read Quiz Records from file: \" + filePath);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return quizRecordsStorage.readQuizRecords(filePath);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void saveQuizRecords(ReadOnlyQuizRecords quizRecords) throws IOException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        saveQuizRecords(quizRecords, quizRecordsStorage.getQuizRecordsFilePath());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void saveQuizRecords(ReadOnlyQuizRecords quizRecords, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        logger.fine(\"Attempting to write to Quiz Records data file: \" + filePath);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        quizRecordsStorage.saveQuizRecords(quizRecords, filePath);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 36,
      "chuyiting": 39,
      "bowei-yu": 35,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " * Represents a storage for {@link UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Saves the given {@link ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 4,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/flashcardstorage/FlashcardBankStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.address.storage.flashcardstorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlyFlashcardBank;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " * Represents a storage for {@link ReadOnlyFlashcardBank}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "public interface FlashcardBankStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    Path getFlashcardBankFilePath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Returns FlashcardBank data as a {@link ReadOnlyFlashcardBank}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    Optional\u003cReadOnlyFlashcardBank\u003e readFlashcardBank() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * @see #getFlashcardBankFilePath()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    Optional\u003cReadOnlyFlashcardBank\u003e readFlashcardBank(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Saves the given {@link ReadOnlyFlashcardBank} to the storage."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * @param schedule cannot be null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    void saveFlashcardBank(ReadOnlyFlashcardBank schedule) throws IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * @see #saveFlashcardBank(ReadOnlyFlashcardBank)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    void saveFlashcardBank(ReadOnlyFlashcardBank schedule, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 41,
      "chuyiting": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/flashcardstorage/JsonAdaptedFlashcard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.address.storage.flashcardstorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.model.flashcard.Answer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.model.flashcard.Question;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "public class JsonAdaptedFlashcard {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Flashcard\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final String question;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final String answer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Constructs a {@code JsonAdaptedFlashcard} with the given flashcard details."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public JsonAdaptedFlashcard(@JsonProperty(\"question\") String question,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                           @JsonProperty(\"answer\") String answer) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Converts a given {@code Flashcard} into this class for Jackson use."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public JsonAdaptedFlashcard(Flashcard source) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        question \u003d source.getQuestion().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        answer \u003d source.getAnswer().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Converts this Jackson-friendly adapted flashcard object into the model\u0027s {@code Flashcard} object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted flashcard."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public Flashcard toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        if (question \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                    Question.class.getSimpleName()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        if (answer \u003d\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Answer.class.getSimpleName()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        final Question modelQuestion \u003d new Question(question);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        final Answer modelAnswer \u003d new Answer(answer);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return new Flashcard(modelQuestion, modelAnswer);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/flashcardstorage/JsonAdaptedFlashcardSet.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.address.storage.flashcardstorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.address.model.flashcard.FlashcardSetName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "public class JsonAdaptedFlashcardSet {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"FlashcardSet\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final List\u003cJsonAdaptedFlashcard\u003e flashcards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Constructs a {@code JsonAdaptedFlashcardSet} with the given task details."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public JsonAdaptedFlashcardSet(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                           @JsonProperty(\"flashcards\") List\u003cJsonAdaptedFlashcard\u003e flashcards) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        if (flashcards !\u003d null) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            this.flashcards.addAll(flashcards);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Converts a given {@code FlashcardSet} into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public JsonAdaptedFlashcardSet(FlashcardSet source) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        name \u003d source.getFlashcardSetName().toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        flashcards.addAll(source.getFlashcards().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            .map(JsonAdaptedFlashcard::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Converts this Jackson-friendly adapted task object into the model\u0027s {@code FlashcardSet} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted task."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public FlashcardSet toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, FlashcardSetName.class.getSimpleName()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        final FlashcardSetName modelName \u003d new FlashcardSetName(name);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        final List\u003cFlashcard\u003e modelFlashcards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        for (JsonAdaptedFlashcard flashcard : flashcards) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            modelFlashcards.add(flashcard.toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return new FlashcardSet(modelName, modelFlashcards);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 57,
      "petrickjerico": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/flashcardstorage/JsonAdaptedFlashcardSetName.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.address.storage.flashcardstorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.flashcard.FlashcardSetName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class JsonAdaptedFlashcardSetName {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Constructs a {@code JsonAdaptedFlashcardSetName} with the given {@code name}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public JsonAdaptedFlashcardSetName(String name) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Converts a given {@code name} into this class for Jackson use."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public JsonAdaptedFlashcardSetName(FlashcardSetName source) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        name \u003d source.toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Converts this Jackson-friendly adapted dateTime object into the model\u0027s {@code FlashcardSetName} object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted dateTime."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public FlashcardSetName toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (!FlashcardSetName.isValidName(name)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new IllegalValueException(FlashcardSetName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return new FlashcardSetName(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/flashcardstorage/JsonFlashcardBankStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.address.storage.flashcardstorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlyFlashcardBank;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "public class JsonFlashcardBankStorage implements FlashcardBankStorage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonFlashcardBankStorage.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public JsonFlashcardBankStorage(Path filePath) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public Path getFlashcardBankFilePath() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public Optional\u003cReadOnlyFlashcardBank\u003e readFlashcardBank() throws DataConversionException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return readFlashcardBank(filePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Similar to {@link #readFlashcardBank()}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public Optional\u003cReadOnlyFlashcardBank\u003e readFlashcardBank(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        Optional\u003cJsonSerializableFlashcardBank\u003e jsonFlashcardBank \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                filePath, JsonSerializableFlashcardBank.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        if (!jsonFlashcardBank.isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            return Optional.of(jsonFlashcardBank.get().toModelType());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        } catch (IllegalValueException | IllegalArgumentException ive) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public void saveFlashcardBank(ReadOnlyFlashcardBank flashcardBank) throws IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        saveFlashcardBank(flashcardBank, filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Similar to {@link #saveFlashcardBank(ReadOnlyFlashcardBank)}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public void saveFlashcardBank(ReadOnlyFlashcardBank flashcardBank, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        requireNonNull(flashcardBank);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableFlashcardBank(flashcardBank), filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 74,
      "chuyiting": 2,
      "bowei-yu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/flashcardstorage/JsonSerializableFlashcardBank.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.address.storage.flashcardstorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.FlashcardBank;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlyFlashcardBank;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "public class JsonSerializableFlashcardBank {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FLASHCARD_SETS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            \"FlashcardSets list contains duplicate flashcardSet(s).\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final List\u003cJsonAdaptedFlashcardSet\u003e flashcardSets \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Constructs a {@code JsonSerializableFlashcardBank} with the given flashcardSets."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public JsonSerializableFlashcardBank(@JsonProperty(\"flashcardSets\") List\u003cJsonAdaptedFlashcardSet\u003e flashcardSets) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        this.flashcardSets.addAll(flashcardSets);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Converts a given {@code ReadOnlyFlashcardBank} into this class for Jackson use."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public JsonSerializableFlashcardBank(ReadOnlyFlashcardBank source) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        flashcardSets.addAll(source.getFlashcardSetList().stream()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                .map(JsonAdaptedFlashcardSet::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * Converts this flashcardBank into the model\u0027s {@code FlashcardBank} object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public FlashcardBank toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        FlashcardBank flashcardBank \u003d new FlashcardBank();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        for (JsonAdaptedFlashcardSet jsonAdaptedFlashcardSet : flashcardSets) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            FlashcardSet flashcardSet \u003d jsonAdaptedFlashcardSet.toModelType();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            if (flashcardBank.hasFlashcardSet(flashcardSet)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_FLASHCARD_SETS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            flashcardBank.addFlashcardSet(flashcardSet);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        return flashcardBank;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 51,
      "chuyiting": 2,
      "bowei-yu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/quizstorage/JsonAdaptedQuiz.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.address.storage.quizstorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.quiz.Quiz;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.storage.flashcardstorage.JsonAdaptedFlashcardSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class JsonAdaptedQuiz {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String MESSAGE_MISSING_FIELD \u003d \"Quiz\u0027s %s field is missing.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final JsonAdaptedFlashcardSet flset;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final int totalScore;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final int pointsScored;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final boolean[] scoreboard;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final String[] userAnswers;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Creates a JsonAdaptedQuiz object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @param flset flashcard set provided"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @param totalScore of the quiz"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @param pointsScored during the quiz"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @param scoreboard recorded during the quiz"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public JsonAdaptedQuiz(@JsonProperty(\"flashcardSet\") JsonAdaptedFlashcardSet flset,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                    @JsonProperty(\"totalScore\") int totalScore,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                    @JsonProperty(\"pointsScored\") int pointsScored,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                    @JsonProperty(\"scoreboard\") boolean[] scoreboard,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                    @JsonProperty(\"userAnswers\") String[] userAnswers) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.flset \u003d flset;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.pointsScored \u003d pointsScored;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.totalScore \u003d totalScore;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.scoreboard \u003d scoreboard;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.userAnswers \u003d userAnswers;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Converts a given {@code Quiz} into this class for Jackson use."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public JsonAdaptedQuiz(Quiz source) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        flset \u003d new JsonAdaptedFlashcardSet(source.getFlashcardSet());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        pointsScored \u003d source.getPointsScored();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        totalScore \u003d source.getTotalScore();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        scoreboard \u003d source.getResults();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        userAnswers \u003d source.getUserAnswers();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Converts this Jackson-friendly adapted quiz object into the model\u0027s {@code Quiz} object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted quiz."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public Quiz toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (flset \u003d\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new IllegalValueException(String.format(MESSAGE_MISSING_FIELD,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                    FlashcardSet.class.getSimpleName()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (totalScore \u003d\u003d 0) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new IllegalValueException(String.format(MESSAGE_MISSING_FIELD,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                    \"total score\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (scoreboard \u003d\u003d null || scoreboard.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new IllegalValueException(String.format(MESSAGE_MISSING_FIELD,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                    \"scoreboard\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        final FlashcardSet flashcardSet \u003d flset.toModelType();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return new Quiz(flashcardSet, totalScore, pointsScored, scoreboard, userAnswers);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/quizstorage/JsonQuizRecordsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.address.storage.quizstorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlyQuizRecords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class JsonQuizRecordsStorage implements QuizRecordsStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonQuizRecordsStorage.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public JsonQuizRecordsStorage(Path filePath) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public Path getQuizRecordsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public Optional\u003cReadOnlyQuizRecords\u003e readQuizRecords() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return readQuizRecords(filePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Similar to {@link #readQuizRecords}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public Optional\u003cReadOnlyQuizRecords\u003e readQuizRecords(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Optional\u003cJsonSerializableQuizRecords\u003e jsonQuizRecords \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                filePath, JsonSerializableQuizRecords.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        if (!jsonQuizRecords.isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            return Optional.of(jsonQuizRecords.get().toModelType());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        } catch (IllegalValueException | IllegalArgumentException ive) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void saveQuizRecords(ReadOnlyQuizRecords quizRecords) throws IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        saveQuizRecords(quizRecords, filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Similar to {@link #saveQuizRecords(ReadOnlyQuizRecords)}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void saveQuizRecords(ReadOnlyQuizRecords quizRecords, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        requireNonNull(quizRecords);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableQuizRecords(quizRecords), filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/quizstorage/JsonSerializableQuizRecords.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.address.storage.quizstorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.flashcard.FlashcardSetName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.quiz.Quiz;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.systemlevelmodel.QuizRecords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlyQuizRecords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.storage.flashcardstorage.JsonAdaptedFlashcardSetName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class JsonSerializableQuizRecords {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final Map\u003cJsonAdaptedFlashcardSetName, JsonAdaptedQuiz\u003e quizzes \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Constructs a {@code JsonSerializableQuizRecords} with the given flashcardSets."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public JsonSerializableQuizRecords(@JsonProperty(\"quizzes\") Map\u003cJsonAdaptedFlashcardSetName,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            JsonAdaptedQuiz\u003e quizzes) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.quizzes.putAll(quizzes);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Converts a given {@code ReadOnlyQuizRecords} into this class for Jackson use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public JsonSerializableQuizRecords(ReadOnlyQuizRecords source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Map\u003cFlashcardSetName, Quiz\u003e quizMap \u003d source.getQuizRecordsMap();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        for (Map.Entry\u003cFlashcardSetName, Quiz\u003e pair : quizMap.entrySet()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            JsonAdaptedQuiz jsonAdaptedQuiz \u003d new JsonAdaptedQuiz(pair.getValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            JsonAdaptedFlashcardSetName jsonAdaptedFlashcardSetName \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                    new JsonAdaptedFlashcardSetName(pair.getKey());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            quizzes.put(jsonAdaptedFlashcardSetName, jsonAdaptedQuiz);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Converts this quizRecords into the model\u0027s {@code QuizRecords} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public QuizRecords toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        QuizRecords quizRecords \u003d new QuizRecords();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        for (Map.Entry\u003cJsonAdaptedFlashcardSetName, JsonAdaptedQuiz\u003e pair : quizzes.entrySet()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            JsonAdaptedQuiz jsonAdaptedQuiz \u003d pair.getValue();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            Quiz quiz \u003d jsonAdaptedQuiz.toModelType();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            quizRecords.addQuiz(quiz);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return quizRecords;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/quizstorage/QuizRecordsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.address.storage.quizstorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlyQuizRecords;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public interface QuizRecordsStorage {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    Path getQuizRecordsFilePath();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    Optional\u003cReadOnlyQuizRecords\u003e readQuizRecords() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    Optional\u003cReadOnlyQuizRecords\u003e readQuizRecords(Path filePath) throws"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            DataConversionException, IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    void saveQuizRecords(ReadOnlyQuizRecords quizRecords) throws IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    void saveQuizRecords(ReadOnlyQuizRecords quizRecords, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/schedulestorage/JsonAdaptedDateTime.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.address.storage.schedulestorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.task.DateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class JsonAdaptedDateTime {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final String dateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Constructs a {@code JsonAdaptedDateTime} with the given {@code dateTime}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public JsonAdaptedDateTime(String dateTime) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Converts a given {@code DateTime} into this class for Jackson use."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public JsonAdaptedDateTime(DateTime source) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        dateTime \u003d source.toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public String getDateTime() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Converts this Jackson-friendly adapted dateTime object into the model\u0027s {@code DateTime} object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted dateTime."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public DateTime toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (!DateTime.isValidDateTime(dateTime)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new IllegalValueException(DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return new DateTime(dateTime);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 1,
      "chuyiting": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/schedulestorage/JsonAdaptedTask.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.address.storage.schedulestorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.task.DateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.task.Duration;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class JsonAdaptedTask {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Task\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private final Optional\u003cString\u003e description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final Optional\u003cInteger\u003e duration;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private final Optional\u003cJsonAdaptedDateTime\u003e dateTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Constructs a {@code JsonAdaptedTask} with the given task details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public JsonAdaptedTask(@JsonProperty(\"title\") String title,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                           @JsonProperty(\"description\") Optional\u003cString\u003e description,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                           @JsonProperty(\"dateTime\") Optional\u003cString\u003e dateTime,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                           @JsonProperty(\"duration\") Optional\u003cInteger\u003e duration) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        this.dateTime \u003d dateTime.map(JsonAdaptedDateTime::new);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Converts a given {@code Task} into this class for Jackson use."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public JsonAdaptedTask(Task source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        title \u003d source.getTitle().title;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        description \u003d source.getDescription().map(description -\u003e description.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        dateTime \u003d source.getDateTime().map(JsonAdaptedDateTime::new);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        duration \u003d source.getDuration().map(duration-\u003e duration.duration);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Converts this Jackson-friendly adapted task object into the model\u0027s {@code Task} object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted task."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Task toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        if (title \u003d\u003d null || title.equals(\"\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        final Title modelTitle \u003d new Title(title);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        final Description modelDescription \u003d description.map(desc -\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            desc.equals(\"\") ? null : new Description(desc)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        ).orElse(null);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        final DateTime modelDateTime \u003d dateTime.map(jsonDateTime -\u003e {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                return jsonDateTime.toModelType();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }).orElse(null);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        final Duration modelDuration \u003d duration.map(dur -\u003e new Duration(dur)).orElse(null);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return new Task(modelTitle, modelDescription, modelDateTime, modelDuration);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 17,
      "cupofjoee": 1,
      "chuyiting": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/schedulestorage/JsonScheduleStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.address.storage.schedulestorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlySchedule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class JsonScheduleStorage implements ScheduleStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonScheduleStorage.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public JsonScheduleStorage(Path filePath) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Path getScheduleFilePath() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Optional\u003cReadOnlySchedule\u003e readSchedule() throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return readSchedule(filePath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Similar to {@link #readSchedule()}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Optional\u003cReadOnlySchedule\u003e readSchedule(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Optional\u003cJsonSerializableSchedule\u003e jsonSchedule \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                filePath, JsonSerializableSchedule.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (!jsonSchedule.isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return Optional.of(jsonSchedule.get().toModelType());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        } catch (IllegalArgumentException iae) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + iae.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            throw new DataConversionException(iae);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void saveSchedule(ReadOnlySchedule schedule) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        saveSchedule(schedule, filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Similar to {@link #saveSchedule(ReadOnlySchedule)}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void saveSchedule(ReadOnlySchedule schedule, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        requireNonNull(schedule);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableSchedule(schedule), filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 3,
      "cupofjoee": 1,
      "chuyiting": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/schedulestorage/JsonSerializableSchedule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.address.storage.schedulestorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlySchedule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.Schedule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " * An Immutable Schedule that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "@JsonRootName(value \u003d \"schedule\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class JsonSerializableSchedule {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"Tasks list contains duplicate task(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final List\u003cJsonAdaptedTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Constructs a {@code JsonSerializableSchedule} with the given tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public JsonSerializableSchedule(@JsonProperty(\"tasks\") List\u003cJsonAdaptedTask\u003e tasks) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.tasks.addAll(tasks);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Converts a given {@code ReadOnlySchedule} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableSchedule}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public JsonSerializableSchedule(ReadOnlySchedule source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        tasks.addAll(source.getTaskList().stream().map(JsonAdaptedTask::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Converts this schedule into the model\u0027s {@code Schedule} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Schedule toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Schedule schedule \u003d new Schedule();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        for (JsonAdaptedTask jsonAdaptedTask : tasks) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            Task task \u003d jsonAdaptedTask.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            if (schedule.hasTask(task)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            schedule.addTask(task);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return schedule;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 3,
      "cupofjoee": 1,
      "chuyiting": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/schedulestorage/ScheduleStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.address.storage.schedulestorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlySchedule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.Schedule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " * Represents a storage for {@link Schedule}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public interface ScheduleStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    Path getScheduleFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    Optional\u003cReadOnlySchedule\u003e readSchedule() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @see #getScheduleFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    Optional\u003cReadOnlySchedule\u003e readSchedule(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param schedule cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    void saveSchedule(ReadOnlySchedule schedule) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @see #saveSchedule(ReadOnlySchedule)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    void saveSchedule(ReadOnlySchedule schedule, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 1,
      "chuyiting": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        commandTextField.focusedProperty().addListener(((observable, oldValue, newValue)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            -\u003e handleFocus(newValue)));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private void handleFocus(boolean isFocused) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (isFocused) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            this.commandTextField.setStyle(\"-fx-border-color: transparent transparent #F6C504 transparent;\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    + \"-fx-border-width: 2;\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            this.commandTextField.setStyle(\"-fx-border-color: transparent transparent #cccccc transparent;\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    + \"-fx-border-width: 1;\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 12,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/FlashcardSetCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.address.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "public class FlashcardSetCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    private static final String FXML \u003d \"FlashcardSetCard.fxml\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    private static final String[] BACKGROUND_COLOR \u003d new String[]{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        \"#ff6666\", //red"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        \"#3366ff;\", //blue"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        \"#cc66ff\", //purple"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    };"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public final FlashcardSet flashcardSet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Creates a {@code TaskCode} with the given {@code Task} and index to display."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public FlashcardSetCard(FlashcardSet flashcardSet, int displayedIndex) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        this.flashcardSet \u003d flashcardSet;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        cardPane.setStyle(\"-fx-background-color: \" + BACKGROUND_COLOR[displayedIndex % 3]);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        id.setText(String.valueOf(displayedIndex));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        title.setText(flashcardSet.getName().name);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        FlashcardSetCard card \u003d (FlashcardSetCard) other;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                \u0026\u0026 flashcardSet.equals(card.flashcardSet);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "petrickjerico": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/FlashcardSetListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.address.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "public class FlashcardSetListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    private static final String FXML \u003d \"FlashcardSetListPanel.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(FlashcardSetListPanel.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    private ListView\u003cFlashcardSet\u003e flashcardSetListView;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Creates a {@code TaskListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public FlashcardSetListPanel(ObservableList\u003cFlashcardSet\u003e flashcardSets) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        flashcardSetListView.setItems(flashcardSets);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        flashcardSetListView.setCellFactory(listView -\u003e new FlashcardSetListViewCell());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Task} using a {@code TaskCard}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    class FlashcardSetListViewCell extends ListCell\u003cFlashcardSet\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        protected void updateItem(FlashcardSet flashcardSet, boolean empty) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            super.updateItem(flashcardSet, empty);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            setStyle(\"-fx-padding: 4px\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            if (empty || flashcardSet \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                setGraphic(new FlashcardSetCard(flashcardSet, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "petrickjerico": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/FlashcardUi.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class FlashcardUi extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static final String FXML \u003d \"FlashcardUi.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    private FlashcardSetListPanel flashcardSetListPanel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    private FlashcardsDisplay flashcardsDisplay;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    private StackPane flashcardSetListPanelPlaceholder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    private StackPane flashcardsDisplayPlaceholder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Constructor for ScheduleUi."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public FlashcardUi(Logic logic) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        flashcardSetListPanel \u003d new FlashcardSetListPanel(logic.getFilteredFlashcardSetList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        flashcardSetListPanelPlaceholder.getChildren().add(flashcardSetListPanel.getRoot());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        flashcardsDisplay \u003d new FlashcardsDisplay(logic.getFlashcardSetToView());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        flashcardsDisplayPlaceholder.getChildren().add(flashcardsDisplay.getRoot());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public FlashcardSetListPanel getFlashcardSetListPanel() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        return flashcardSetListPanel;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "petrickjerico": 68,
      "chuyiting": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/FlashcardsDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import javafx.beans.property.ReadOnlyObjectWrapper;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import javafx.scene.control.cell.PropertyValueFactory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import javafx.util.Callback;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "import seedu.address.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": " * A ui for the flashcards that is displayed next to the list of flashcard sets."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "public class FlashcardsDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    private static final String FXML \u003d \"FlashcardsDisplay.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    private static final String EMPTY_SET \u003d \"[no set selected to list]\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    private TableView flashcardsDisplay;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     * Creates a {@code FlashcardsDisplay} with the given {@code FlashcardSet}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    public FlashcardsDisplay(FlashcardSet flashcardSet) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        ObservableList\u003cFlashcard\u003e data;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        if (flashcardSet \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            data \u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            name.setText(EMPTY_SET);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            data \u003d FXCollections.observableArrayList(flashcardSet.getFlashcards());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            name.setText(flashcardSet.getName().name);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        flashcardsDisplay.setEditable(false);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        TableColumn flNumbersCol \u003d new TableColumn(\"No.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        flNumbersCol.setMinWidth(30);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        flNumbersCol.setCellValueFactory("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                (Callback\u003cTableColumn.CellDataFeatures\u003cFlashcard, String\u003e, ObservableValue\u003cString\u003e\u003e) p -\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                        new ReadOnlyObjectWrapper(flashcardsDisplay.getItems().indexOf(p.getValue()) + 1));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        flNumbersCol.setSortable(false);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        TableColumn questionsCol \u003d new TableColumn(\"Q\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        questionsCol.setMinWidth(100);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        questionsCol.setCellValueFactory("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                new PropertyValueFactory\u003cFlashcard, String\u003e(\"questionString\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        );"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        TableColumn answersCol \u003d new TableColumn(\"A\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        answersCol.setMinWidth(100);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        answersCol.setCellValueFactory("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                new PropertyValueFactory\u003cFlashcard, String\u003e(\"answerString\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        );"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        flashcardsDisplay.setItems(data);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        flashcardsDisplay.getColumns().addAll(flNumbersCol, questionsCol, answersCol);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        flashcardsDisplay.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "petrickjerico": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.layout.BorderPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.ui.sidebar.SideBar;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.ui.util.Observable;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.ui.util.Observer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.ui.util.SingletonUiState;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.ui.util.UiStateType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e implements Observer {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final Stage primaryStage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private SingletonUiState uiState;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private ScheduleUi scheduleUi;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private FlashcardUi flashcardUi;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private BorderPane mainWindow;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // Init the component."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        scheduleUi \u003d new ScheduleUi(logic);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        flashcardUi \u003d new FlashcardUi(logic);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        //subscribe to UiState"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        uiState \u003d SingletonUiState.getInstance();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        subscribe(uiState);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        mainWindow.setLeft(new SideBar(primaryStage, logic).getRoot());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        //default center view"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        handleStateChange(this.uiState.getUiState());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private void handleStateChange(UiStateType state) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        switch (state) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        case SCHEDULE:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            mainWindow.setCenter(scheduleUi.getRoot());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        case FLASHCARD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            mainWindow.setCenter(flashcardUi.getRoot());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void subscribe(Observable news) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        news.register(this);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void update(UiStateType state) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        handleStateChange(state);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 2,
      "chuyiting": 40,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ScheduleUi.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.ui.scheduleui.TaskDetailPanel;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.ui.scheduleui.UpcomingSchedule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class ScheduleUi extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static final String FXML \u003d \"ScheduleUi.fxml\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private StackPane upcomingSchedulePlaceholder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private StackPane taskDetailPanelPlaceholder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    ScheduleUi (Logic logic) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        upcomingSchedulePlaceholder.getChildren().add(new UpcomingSchedule(logic).getRoot());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        taskDetailPanelPlaceholder.getChildren().add(new TaskDetailPanel(logic).getRoot());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TaskCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class TaskCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static final String FXML \u003d \"TaskListCard.fxml\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private static final String[] BACKGROUND_COLOR \u003d new String[]{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        \"#ff6666\", //red"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        \"#3366ff;\", //blue"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        \"#cc66ff\", //purple"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    };"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public final Task task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Label time;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Creates a {@code TaskCode} with the given {@code Task} and index to display."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public TaskCard(Task task, int displayedIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        cardPane.setStyle(\"-fx-background-color: \" + BACKGROUND_COLOR[displayedIndex % 3]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        id.setText(String.valueOf(displayedIndex));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        title.setText(task.getTitle().title);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        description.setText(task.getDescription().map(des-\u003e des.description).orElse(\"\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        time.setText(task.getDateTime().map(time -\u003e time.toString()).orElse(\"\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        TaskCard card \u003d (TaskCard) other;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                \u0026\u0026 task.equals(card.task);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 4,
      "chuyiting": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TaskListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class TaskListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static final String FXML \u003d \"TaskListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TaskListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private ListView\u003cTask\u003e taskListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Creates a {@code TaskListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public TaskListPanel(ObservableList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        taskListView.setItems(taskList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        taskListView.setCellFactory(listView -\u003e new TaskListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Task} using a {@code TaskCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    class TaskListViewCell extends ListCell\u003cTask\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        protected void updateItem(Task task, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                setGraphic(new TaskCard(task, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 2,
      "chuyiting": 13,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/study-bananas-icon.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 1,
      "chuyiting": 1,
      "-": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/scheduleui/CurrentTimePointer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.ui.scheduleui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.ui.util.ScheduleUiUtil.checkTimePattern;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class CurrentTimePointer extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static final String FXML \u003d \"CurrentTimePointer.fxml\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Label currentTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Constructor of CurrentTimePointer"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param time must be the format of hh:mm AM/PM"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public CurrentTimePointer(String time) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assert checkTimePattern(time);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        currentTime.setText(time);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void updateTime(String time) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        currentTime.setText(time);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/scheduleui/TaskCell.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.ui.scheduleui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.ui.util.ScheduleUiUtil.MARGIN_PER_MINUTE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.ui.util.ScheduleUiUtil.checkTimePattern;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.ui.util.ScheduleUiUtil.getMarginFromDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.ui.util.ScheduleUiUtil.toAmPmTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class TaskCell extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static final String FXML \u003d \"TaskCell.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Label startTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private VBox task;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Task taskObj;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Construct a TaskCell from a {@Code task}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public TaskCell(Task task) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assert checkTaskValidation(task) : \"task must happen today and has duration and a startTime.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        taskObj \u003d task;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // Set title and startTime"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        title.setText(task.getTitle().title);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        startTime.setText(getTimeFromTask(task));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // Violation of LoD, may need to improve."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // Calculate the height of the cell;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        double height \u003d task.getDuration().get().duration * MARGIN_PER_MINUTE;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.task.setPrefHeight(height);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Method used to update the startTime."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param startTimeStr must be in the form of hh:mm AM/PM"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void setStartTime(String startTimeStr) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assert checkTimePattern(startTimeStr);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.startTime.setText(startTimeStr);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Calculate the margin top by the task for the TimeScale."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public double marginTop() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return getMarginFromDateTime(this.taskObj.getDateTime().get());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Method used to update the title."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param titleStr"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private void setTitle(String titleStr) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.title.setText(titleStr);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void update(Task task) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.taskObj \u003d task;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private boolean checkTaskValidation(Task task) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return task.getDateTime().isPresent() \u0026\u0026 task.getDuration().isPresent() \u0026\u0026 task.happensToday();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private String getTimeFromTask(Task task) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        LocalDateTime dateTime \u003d task.getDateTime().get().dateTime;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        DateTimeFormatter formmater \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return toAmPmTime(formmater.format(dateTime));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (o \u003d\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (!(o instanceof TaskCell)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return this.taskObj.equals(((TaskCell) o).taskObj);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 103
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/scheduleui/TaskDetailPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.ui.scheduleui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.ui.ResultDisplay;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.ui.TaskListPanel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class TaskDetailPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static final String FXML \u003d \"TaskDetailPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private TaskListPanel taskListPanel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private StackPane taskListPanelPlaceholder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Constructor for ScheduleUi."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public TaskDetailPanel(Logic logic) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        taskListPanel \u003d new TaskListPanel(logic.getFilteredTaskList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        taskListPanelPlaceholder.getChildren().add(taskListPanel.getRoot());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public TaskListPanel getTaskListPanel() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return taskListPanel;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/scheduleui/TimeScale.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.ui.scheduleui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class TimeScale extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static final String FXML \u003d \"TimeScale.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    // Solution adapted from Stack Overflow"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    // https://stackoverflow.com/questions/25498747/javafx-gridpane-observablelist-and-listchangelistener"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final ListChangeListener\u003cTask\u003e taskListener \u003d new ListChangeListener\u003cTask\u003e() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        public void onChanged(Change\u003c? extends Task\u003e c) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            while (c.next()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                if (c.wasAdded()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    for (Task task : c.getAddedSubList()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                        addTaskToTimeScale(task);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                } else if (c.wasRemoved()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    for (Task task : c.getRemoved()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                        removeTaskFromTimeScale(task);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    assert false : \"should never reach here, this system does not support object editting.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    };"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private List\u003cTimeScaleCell\u003e timeScaleCells \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private CurrentTimePointer currentTimePointer;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private ObservableList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private StackPane timeScale;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Constructor of the TimeScale."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param tasks the task list that TimeScale listens to."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public TimeScale(ObservableList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        //ui set-up"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        init();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        setMargin();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        //listener set-up"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        handleListener();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private void init() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        //set morning"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        timeScaleCells.add(new TimeScaleCell(\"12 AM\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        for (int i \u003d 1; i \u003c 12; i++) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            timeScaleCells.add(new TimeScaleCell(i + \" AM\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        //set noon"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        timeScaleCells.add(new TimeScaleCell(\"Noon\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        //set afternnon"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        for (int i \u003d 1; i \u003c 12; i++) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            timeScaleCells.add(new TimeScaleCell(i + \" PM\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        //repeat 12 AM"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        timeScaleCells.add(new TimeScaleCell(\"12 AM\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        //style, temporary, todo: move to fxml/css"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        //add taskCell"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            addTaskToTimeScale(task);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private void addTaskToTimeScale(Task task) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        TaskCell taskCell \u003d new TaskCell(task);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        //bind the TaskCell to the Task"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        task.setTaskCellBind(taskCell);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        timeScale.getChildren().add(taskCell.getRoot());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        timeScale.setMargin(taskCell.getRoot(), new Insets(taskCell.marginTop(), 0, 0, 40));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private void addTaskToTimeScale(int taskId) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        addTaskToTimeScale(tasks.get(taskId));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private void removeTaskFromTimeScale(Task task) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        timeScale.getChildren().remove(task.getTaskCellBind().getRoot());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Stackpane would squeeze everything in the same place, time function is used to list the timeScaleCells."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private void setMargin() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        for (int i \u003d 0; i \u003c timeScaleCells.size(); i++) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            timeScale.getChildren().add(timeScaleCells.get(i).getRoot());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            timeScale.setMargin(timeScaleCells.get(i).getRoot(), new Insets(i * 40, 0, 0, 0));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Places a {@Code Node} in the TimeScale with marginTop being {@Code marginTop}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param node node to place"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param marginTop marginTop of the node"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void placeItem(Node node, double marginTop) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        timeScale.getChildren().add(node);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        timeScale.setMargin(node, new Insets(marginTop, 0, 0, 0));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Places the {@Code CurrentTimePointer} with the initial {@Code marginTop}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param marginTop initial marginTop"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void placeCurrentTime(CurrentTimePointer currentTimePointer, double marginTop) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        placeItem(currentTimePointer.getRoot(), marginTop);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.currentTimePointer \u003d currentTimePointer;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Updates the position of {@CurrentTimePosition}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param newMarginTop"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void updateCurrentTimePosition(double newMarginTop) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        timeScale.setMargin(currentTimePointer.getRoot(), new Insets(newMarginTop, 0, 0, 0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Handles the overlap of timeScale and the currentTimePointer"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param time time has to be in the format of HH:mm."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void handleOverlap(String time) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assert time.matches(\"^([0-12]|2[0-3]):[0-5][0-9]$\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String[] splitTime \u003d time.split(\":\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        int hour \u003d Integer.valueOf(splitTime[0]);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        int minute \u003d Integer.valueOf(splitTime[1]);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // ugly implementation, should try to improve."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // a bit violate LoD."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (minute \u003c\u003d 15) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            //hour is one-based, and the timeScaleCell starts from 12AM"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            TimeScaleCell overlappedCell \u003d timeScaleCells.get(hour);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            overlappedCell.hideTime();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        } else if (minute \u003e 15) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            timeScaleCells.get(hour).recoverTime();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            timeScaleCells.get(hour + 1).recoverTime();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        } else if (minute \u003e\u003d 45) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            TimeScaleCell overlappedCell \u003d timeScaleCells.get(hour + 1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            overlappedCell.hideTime();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private void handleListener() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        tasks.addListener(taskListener);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 182
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/scheduleui/TimeScaleCell.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.ui.scheduleui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class TimeScaleCell extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static final String FXML \u003d \"TimeScaleCell.fxml\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Label time;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private String timeStr;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    TimeScaleCell(String timeString) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        time.setText(timeString);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        //memoize the time, for hiding purpose."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.timeStr \u003d timeString;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void hideTime() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        time.setText(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void recoverTime() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        time.setText(timeStr);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/scheduleui/UpcomingSchedule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.ui.scheduleui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.ui.util.ScheduleUiUtil.getMarginFromTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.ui.util.ScheduleUiUtil.toAmPmTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class UpcomingSchedule extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static final String FXML \u003d \"UpcomingSchedule.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static final DateTimeFormatter TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private VBox schedule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Label year;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Label day;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private CurrentTimePointer currentTimePointer;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private TimeScale timeScale;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Constructor for the UpcomingSchedulePanel, which is the left panel of the {@ScheduleUi}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param logic"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public UpcomingSchedule(Logic logic) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        fillInner();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private void fillInner() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        timeScale \u003d new TimeScale(logic.getUpcomingTaskList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        schedule.getChildren().add(timeScale.getRoot());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // Fill the label with date of \"TODAY\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        year.setText(String.valueOf(today.getYear()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        date.setText(getDateString(today));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        day.setText(getDayString(today));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // Add the currentTimePointer to the TimeScale"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String currentTime \u003d getCurrentTime();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        double marginTop \u003d getMarginFromTime(currentTime);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        currentTimePointer \u003d new CurrentTimePointer(toAmPmTime(currentTime));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        timeScale.placeCurrentTime(currentTimePointer, marginTop);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // Open a new thread to handle the position of the currentTimePointer"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Thread timerThread \u003d new Thread(() -\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            while (true) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    Thread.sleep(1000 * 60); // a minute"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                } catch (InterruptedException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    e.printStackTrace();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    String newCurrentTime \u003d getCurrentTime();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    //update the position of the currentTimePointer"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    currentTimePointer.updateTime(toAmPmTime(newCurrentTime));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    timeScale.updateCurrentTimePosition(getMarginFromTime(newCurrentTime));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                });"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        });"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        timerThread.start();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private String getDateString(LocalDate date) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String month \u003d date.getMonth().toString();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String dayOfMonth \u003d String.valueOf(date.getDayOfMonth());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String dateString \u003d month + \" \" + dayOfMonth + \",\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return dateString;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private String getDayString(LocalDate date) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String dayString \u003d date.getDayOfWeek().toString();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return dayString.substring(0, 1) + dayString.substring(1).toLowerCase();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Returns time in the format of \"HH:mm\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private String getCurrentTime() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return TIME_FORMATTER.format(now);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/sidebar/SideBar.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.ui.sidebar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.ui.util.Observable;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.ui.util.Observer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.ui.util.SingletonUiState;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.ui.util.UiStateType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class SideBar extends UiPart\u003cRegion\u003e implements Observer {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static final String FXML \u003d \"SideBar.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final Image scheduleImage \u003d new Image(this.getClass()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            .getResourceAsStream(\"/images/icon_schedule.png\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final Image flashcardsImage \u003d new Image(this.getClass()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            .getResourceAsStream(\"/images/icon_flashcards.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final List\u003cSideBarTab\u003e studyBananasTabs \u003d Arrays.asList(new SideBarTab(scheduleImage, \"SCHEDULE\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            new SideBarTab(flashcardsImage, \"FLASHCARDS\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private SingletonUiState uiState;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private VBox sideBar;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Constructor of the SideBar, construct it with the {@primaryStage} and the Logic."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param primaryStage used by {@Code SideBarHelpMenu}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param logic used by {@Code SideBarHelpMenu}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public SideBar(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        //subscribe to UiState"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        uiState \u003d SingletonUiState.getInstance();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        subscribe(uiState);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        //set label"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        List\u003cNode\u003e tabs \u003d studyBananasTabs.stream().map(tab -\u003e tab.getRoot()).collect(Collectors.toList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        sideBar.getChildren().addAll(tabs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        VBox padding \u003d new VBox();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        padding.setMinHeight(330);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        //temporary set the middle empty part"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        sideBar.getChildren().add(padding);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        //set sidebar help menu"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        sideBar.getChildren().add(new SideBarHelpMenu(primaryStage, logic).getRoot());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void subscribe(Observable news) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        news.register(this);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void update(UiStateType state) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/sidebar/SideBarHelpMenu.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.ui.sidebar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.ui.HelpWindow;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class SideBarHelpMenu extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static final String FXML \u003d \"SideBarHelpMenu.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final HelpWindow helpWindow;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Constructor SideBarHelpMenu from the {@Code logic} and {@Code primaryStage}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public SideBarHelpMenu(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/sidebar/SideBarTab.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.ui.sidebar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.ui.util.Observable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.ui.util.Observer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.ui.util.SingletonUiState;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.ui.util.UiStateType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class SideBarTab extends UiPart\u003cRegion\u003e implements Observer {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static final String FXML \u003d \"SideBarTab.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private static final String BUTTON_FOCUSED_BACKGROUND_COLOR \u003d \"-fx-background-color: #E2B603\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Button tab;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private ImageView tabImage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Label tabText;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private SingletonUiState uiState;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private UiStateType tabType;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Constructor for sidebar tab."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public SideBarTab(Image image, String description) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        //subscribe to the UiState"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        uiState \u003d SingletonUiState.getInstance();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        subscribe(uiState);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        tabImage.setImage(image);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        tabText.setText(description);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        switch (description) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        case \"SCHEDULE\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            this.tabType \u003d UiStateType.SCHEDULE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            tabText.setStyle(\"-fx-text-fill: #0066ff; \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    + \"-fx-font-weight: bold;\"); //Schedule button is focused when the app starts"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        case \"FLASHCARDS\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            this.tabType \u003d UiStateType.FLASHCARD;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private void handleTabPressed() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        uiState.updateState(this.tabType);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void subscribe(Observable news) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        news.register(this);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void update(UiStateType state) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (this.tabType \u003d\u003d state) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            tabText.setStyle(\"-fx-text-fill: #0066ff; \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    + \"-fx-font-weight: bold;\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            tabText.setStyle(\"-fx-text-fill: #cccccc; \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    + \"-fx-font-weight: light;\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 2,
      "chuyiting": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/util/Observable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.ui.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public interface Observable {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void register(Observer reader);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void unregister(Observer reader);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void inform();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/util/Observer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.ui.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public interface Observer {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    void subscribe(Observable news);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    void update(UiStateType state);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/util/ScheduleUiUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.ui.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.task.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class ScheduleUiUtil {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    // This part needs to synchronize with TimeScaleCell"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final double INITIAL_PADDING \u003d 9.0; //The paddingTop is set to 10, but 9 is more accurate."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final double MARGIN_PER_HOUR \u003d 40.0;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final double MARGIN_PER_MINUTE \u003d MARGIN_PER_HOUR / 60.0;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Method used to check if the time format is hh:mm AM/PM"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static boolean checkTimePattern(String time) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String[] splitTime \u003d time.split(\" \");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String[] splitHourMinute \u003d splitTime[0].split(\":\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String hour \u003d splitHourMinute[0];"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String minute \u003d splitHourMinute[1];"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return splitTime[1].matches(\"(AM)|(PM)\") \u0026\u0026 hour.matches(\"(1[0-2])|[1-9]\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                \u0026\u0026 minute.matches(\"(0[0-9])|([0-5][0-9])\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * This method transforms \"HH:mm\" to \"hh:mm AM/PM\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static String toAmPmTime(String formattedTime) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String[] splitTime \u003d formattedTime.split(\":\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        int hour \u003d Integer.parseInt(splitTime[0]);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        //make sure that minutes have a trailing 0."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String minute \u003d splitTime[1];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (hour \u003e 12) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            hour -\u003d 12;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return String.format(\"%d:%s PM\", hour, minute);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        } else if (hour \u003d\u003d 12) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return String.format(\"%d:%s PM\", hour, minute);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return String.format(\"%d:%s AM\", hour, minute);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * This method calculates the margin from \"HH:mm\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Still need to check if it is accurate."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static double getMarginFromTime(String primitiveTime) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String[] splitTime \u003d primitiveTime.split(\":\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        int hour \u003d Integer.parseInt(splitTime[0]);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        int minute \u003d Integer.parseInt(splitTime[1]);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return INITIAL_PADDING + hour * MARGIN_PER_HOUR + minute * MARGIN_PER_MINUTE;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * This method calculates the margin from \"HH:mm\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Still need to check if it is accurate."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static double getMarginFromDateTime(DateTime time) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        int hour \u003d time.dateTime.getHour();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        int minute \u003d time.dateTime.getMinute();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return INITIAL_PADDING + hour * MARGIN_PER_HOUR + minute * MARGIN_PER_MINUTE;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/util/SingletonApplicationState.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.ui.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class SingletonApplicationState implements Observable {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void register(Observer reader) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void unregister(Observer reader) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void inform() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/util/SingletonUiState.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.ui.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class SingletonUiState implements Observable {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static SingletonUiState instance;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private UiStateType uiState \u003d UiStateType.SCHEDULE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private List\u003cObserver\u003e observers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private SingletonUiState() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.uiState \u003d UiStateType.SCHEDULE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static synchronized SingletonUiState getInstance() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (instance \u003d\u003d null) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            instance \u003d new SingletonUiState();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return instance;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public UiStateType getUiState() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return this.uiState;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void register(Observer observer) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        observers.add(observer);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void unregister(Observer observer) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        observers.remove(observer);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void inform() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        for (Observer observer: observers) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            observer.update(this.uiState);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * update the unique UiState."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param state"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void updateState(UiStateType state) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.uiState \u003d state;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        inform();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/util/UiStateType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.ui.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public enum UiStateType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    SCHEDULE, FLASHCARD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 5
    }
  },
  {
    "path": "src/main/resources/view/CurrentTimePointer.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.shape.Circle?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.shape.Line?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003cHBox prefHeight\u003d\"10.0\" prefWidth\u003d\"350.0\" style\u003d\"-fx-background-color: transparent;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cLabel fx:id\u003d\"currentTime\" text\u003d\"12:20 PM\" textFill\u003d\"RED\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cFont name\u003d\"Arial Bold\" size\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cCircle fill\u003d\"RED\" radius\u003d\"5.0\" stroke\u003d\"RED\" strokeType\u003d\"INSIDE\" strokeWidth\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cLine endX\u003d\"190.0\" startX\u003d\"-100.0\" stroke\u003d\"RED\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cInsets top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003c/Line\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 30
    }
  },
  {
    "path": "src/main/resources/view/FlashcardSetCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"15\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    \u003cLabel fx:id\u003d\"id\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "           style\u003d\"-fx-background-color: white;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                              -fx-background-radius: 8;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                              -fx-text-fill: black;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                              -fx-font-family: Arial;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                              -fx-font-weight: 900;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                              -fx-font-size: 12px;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                              -fx-alignment:center;\" styleClass\u003d\"cellHeader\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"5\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    \u003cLabel fx:id\u003d\"title\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "           style\u003d\"-fx-font-family: Arial;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                              -fx-font-weight: 900;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                              -fx-font-size: 16px;\" text\u003d\"\\$first\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    \u003c/Label\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "petrickjerico": 37
    }
  },
  {
    "path": "src/main/resources/view/FlashcardSetListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    \u003cListView fx:id\u003d\"flashcardSetListView\"  VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "petrickjerico": 7
    }
  },
  {
    "path": "src/main/resources/view/FlashcardUi.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "\u003cVBox maxHeight\u003d\"-Infinity\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "      style\u003d\"-fx-background-color: white;\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "      xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "   \u003cVBox style\u003d\"-fx-background-color: #e6f2ff;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                  -fx-background-radius: 25;\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "         styleClass\u003d\"scheduleUiPanel\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "      \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-without-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "      \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "      \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-without-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "      \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "      \u003cHBox minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-without-border\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "         \u003cVBox minWidth\u003d\"200\" prefWidth\u003d\"200\" styleClass\u003d\"pane-without-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "               \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            \u003cStackPane fx:id\u003d\"flashcardSetListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "         \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "         \u003cVBox minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-without-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "               \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            \u003cStackPane fx:id\u003d\"flashcardsDisplayPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "         \u003c/VBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "      \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "         \u003cInsets /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "      \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "         \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "   \u003c/VBox\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "      \u003cInsets bottom\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "petrickjerico": 47,
      "chuyiting": 4
    }
  },
  {
    "path": "src/main/resources/view/FlashcardsDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    \u003cLabel fx:id\u003d\"name\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "           style\u003d\"-fx-font-family: Arial;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                              -fx-font-weight: 900;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                              -fx-font-size: 16px;\" text\u003d\"\\$first\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    \u003c/Label\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "    \u003cTableView fx:id\u003d\"flashcardsDisplay\" style\u003d\"-fx-background-color: #e6f2ff; -fx-border-color: #555555; -fx-text-fill: #555555\" maxWidth\u003d\"-Infinity\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "\u003c/VBox\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "petrickjerico": 19
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003cfx:root"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        minHeight\u003d\"600\" minWidth\u003d\"450\" title\u003d\"Study Bananas\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        \u003cImage url\u003d\"@/images/study-bananas-icon.png\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                \u003cURL value\u003d\"@LightTheme.css\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cBorderPane fx:id\u003d\"mainWindow\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 8,
      "-": 14
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 1,
      "-": 8
    }
  },
  {
    "path": "src/main/resources/view/ScheduleUi.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003cHBox maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "       xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cStackPane fx:id\u003d\"upcomingSchedulePlaceholder\" prefHeight\u003d\"150.0\" prefWidth\u003d\"400.0\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cStackPane fx:id\u003d\"taskDetailPanelPlaceholder\" prefHeight\u003d\"150.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 13
    }
  },
  {
    "path": "src/main/resources/view/SideBar.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003cVBox fx:id\u003d\"sideBar\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      prefHeight\u003d\"600.0\" prefWidth\u003d\"205.0\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cHBox fx:id\u003d\"SideBarHeader\" prefHeight\u003d\"100.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    \u003cImageView fitHeight\u003d\"14.0\" fitWidth\u003d\"14.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                        \u003cimage\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                            \u003cImage url\u003d\"@/images/icon_horizonlines.png\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                        \u003c/image\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                            \u003cInsets left\u003d\"12.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    \u003cVBox fx:id\u003d\"logoAndProductName\" prefHeight\u003d\"200.0\" prefWidth\u003d\"120.0\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                            \u003cImageView fx:id\u003d\"logo\" fitHeight\u003d\"61.0\" fitWidth\u003d\"65.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                                \u003cimage\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                                    \u003cImage url\u003d\"@/images/study-bananas-icon.png\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                                \u003c/image\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                                \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                                    \u003cInsets left\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                                \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                            \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                            \u003cLabel id\u003d\"StudyBananas\" fx:id\u003d\"productName\" style\u003d\"-fx-font-weight: bold;\" text\u003d\"StudyBananas\" textAlignment\u003d\"CENTER\" textFill\u003d\"#908c8c\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                                \u003cfont\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                                    \u003cFont name\u003d\"Helvetica Neue\" size\u003d\"17.0\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                                \u003c/font\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                                \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                                    \u003cInsets /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                                \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                                \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                                    \u003cInsets left\u003d\"5.0\" top\u003d\"-5.0\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                                \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                            \u003c/Label\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                            \u003cInsets left\u003d\"17.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 58
    }
  },
  {
    "path": "src/main/resources/view/SideBarHelpMenu.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003cHBox maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"30.0\" prefWidth\u003d\"200.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cLabel fx:id\u003d\"exitItem\" onMouseClicked\u003d\"#handleExit\" text\u003d\"Exit\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    \u003cInsets right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cFont name\u003d\"Helvetica Neue\" size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cLabel fx:id\u003d\"helpItem\" onMouseClicked\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" left\u003d\"25.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 23
    }
  },
  {
    "path": "src/main/resources/view/SideBarTab.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003cButton fx:id\u003d\"tab\" mnemonicParsing\u003d\"false\" onMouseClicked\u003d\"#handleTabPressed\" prefHeight\u003d\"50.0\" prefWidth\u003d\"205.0\" style\u003d\"-fx-background-color: transparent; -fx-border-width: 0px 0px 0px 0px; -fx-border-color: transparent; -fx-focus-color: transparent; -fx-faint-focus-color: transparent;\" textFill\u003d\"#908c8c\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003cfont\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cFont name\u003d\"System Bold\" size\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003c/font\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003cgraphic\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cHBox prefHeight\u003d\"100.0\" prefWidth\u003d\"200.0\" style\u003d\"-fx-background-color: transparent;\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cImageView fx:id\u003d\"tabImage\" fitHeight\u003d\"20.0\" fitWidth\u003d\"20.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                  \u003cInsets left\u003d\"5.0\" top\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cLabel fx:id\u003d\"tabText\" textAlignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                  \u003cFont name\u003d\"Helvetica Neue\" size\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                  \u003cInsets left\u003d\"20.0\" top\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003c/graphic\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c/Button\u003e"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 33
    }
  },
  {
    "path": "src/main/resources/view/TaskCell.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003cVBox fx:id\u003d\"task\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"40.0\" prefWidth\u003d\"315.0\" style\u003d\"-fx-border-color: #00a3cc; -fx-border-width: 0 0 0 3; -fx-background-color: rgba(204, 245, 255, 0.5) rgba(204, 245, 255, 0.7);\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cLabel fx:id\u003d\"startTime\" prefWidth\u003d\"315.0\" text\u003d\"10:30 AM\" textFill\u003d\"#00a3cc\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cFont name\u003d\"Arial\" size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cInsets /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cLabel fx:id\u003d\"title\" prefWidth\u003d\"315.0\" text\u003d\"CS2103\" textFill\u003d\"#00a3cc\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cFont name\u003d\"Arial Bold\" size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 28
    }
  },
  {
    "path": "src/main/resources/view/TaskDetailPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003cVBox maxHeight\u003d\"-Infinity\" style\u003d\"-fx-background-color: white;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    \u003cVBox style\u003d\"-fx-background-color: #e6f2ff; -fx-background-radius: 25;\" prefHeight\u003d\"600\" styleClass\u003d\"scheduleUiPanel\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-without-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-without-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    \u003cVBox fx:id\u003d\"taskList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        \u003cStackPane fx:id\u003d\"taskListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 28
    }
  },
  {
    "path": "src/main/resources/view/TaskListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" styleClass\u003d\"task_row\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                \u003cLabel fx:id\u003d\"title\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                       style\u003d\"-fx-font-family: Arial;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                              -fx-font-weight: bold;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                              -fx-font-size: 20px;\" text\u003d\"\\$first\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                \u003cRegion prefHeight\u003d\"27.0\"  HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" prefHeight\u003d\"35.0\" prefWidth\u003d\"35.0\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                       style\u003d\"-fx-background-color: white;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                              -fx-background-radius: 8;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                              -fx-text-fill: black;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                              -fx-font-family: Arial;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                              -fx-font-weight: bold;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                              -fx-font-size: 20px;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                              -fx-alignment:center;\" styleClass\u003d\"cellHeader\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                  \u003cInsets left\u003d\"75.0\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                  \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003cInsets bottom\u003d\"5.0\" top\u003d\"-5.0\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cellBody\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cLabel fx:id\u003d\"time\" styleClass\u003d\"cellBody\" text\u003d\"\\$time\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 10,
      "chuyiting": 52
    }
  },
  {
    "path": "src/main/resources/view/TaskListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "  \u003cListView fx:id\u003d\"taskListView\"  VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 2,
      "-": 5
    }
  },
  {
    "path": "src/main/resources/view/TimeScale.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003cScrollPane fx:id\u003d\"scrollPane\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        prefHeight\u003d\"480\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: white;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                                                    -fx-border-width: 0;\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003ccontent\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cStackPane fx:id\u003d\"timeScale\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                 style\u003d\"-fx-background-color: white;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                        -fx-border-width: 0;\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                 alignment\u003d\"TOP_LEFT\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c/ScrollPane\u003e"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 17
    }
  },
  {
    "path": "src/main/resources/view/TimeScaleCell.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.shape.Line?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003cLabel prefHeight\u003d\"40.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003cgraphic\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cHBox prefHeight\u003d\"100.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cLabel fx:id\u003d\"time\" text\u003d\"12 AM\" textFill\u003d\"#cdcdcd\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                  \u003cFont size\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                  \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cLine endX\u003d\"230.0\" startX\u003d\"-90.0\" stroke\u003d\"#0000001c\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                  \u003cInsets top\u003d\"8.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003c/Line\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003c/graphic\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c/Label\u003e"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 32
    }
  },
  {
    "path": "src/main/resources/view/UpcomingSchedule.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.shape.Line?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003cVBox fx:id\u003d\"schedule\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: white;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cHBox prefHeight\u003d\"30.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cLabel fx:id\u003d\"date\" text\u003d\"October, 20\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                  \u003cFont name\u003d\"Arial Bold\" size\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cLabel fx:id\u003d\"year\" text\u003d\"2020\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                  \u003cFont name\u003d\"Arial\" size\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                  \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cLabel fx:id\u003d\"day\" style\u003d\"-fx-font-weight: 100;\" text\u003d\"Thursday\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cFont name\u003d\"Arial\" size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cLine endX\u003d\"270.0\" startX\u003d\"-100.0\" stroke\u003d\"#0000001c\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cLabel text\u003d\"all-day\" textFill\u003d\"#cdcdcd\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" left\u003d\"20.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "         \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cLine endX\u003d\"270.0\" startX\u003d\"-100.0\" stroke\u003d\"#00000031\" strokeWidth\u003d\"3.0\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "      \u003cInsets left\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/AppParametersTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        private final Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/ConfigUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Config expected \u003d getTypicalConfigWithRelativePath();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Config expected \u003d getTypicalConfigWithRelativePath();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private Config getTypicalConfigWithAbsolutePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\").toAbsolutePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private Config getTypicalConfigWithRelativePath() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Config original \u003d getTypicalConfigWithAbsolutePath();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Config readBack \u003d (ConfigUtil.readConfig(configFilePath).get());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 12,
      "-": 111
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.addressbookcommands.AddCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.addressbookcommands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.FlashcardBank;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.systemlevelmodel.QuizRecords;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.Schedule;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.UserPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.storage.flashcardstorage.JsonFlashcardBankStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.storage.quizstorage.JsonQuizRecordsStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.storage.schedulestorage.JsonScheduleStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        JsonScheduleStorage scheduleStorage \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                new JsonScheduleStorage(temporaryFolder.resolve(\"schedule.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        JsonFlashcardBankStorage flashcardBankStorage \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                new JsonFlashcardBankStorage(temporaryFolder.resolve(\"flashcardbank.json\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        JsonQuizRecordsStorage quizRecordsStorage \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                new JsonQuizRecordsStorage(temporaryFolder.resolve(\"quizrecords.json\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        StorageManager storage \u003d new StorageManager(scheduleStorage, flashcardBankStorage,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                quizRecordsStorage, addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        JsonScheduleStorage userScheduleStorage \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                new JsonScheduleStorage(temporaryFolder.resolve(\"ioExceptionSchedule.json\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        JsonFlashcardBankStorage userFlashcardBankStorage \u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                new JsonFlashcardBankStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        JsonQuizRecordsStorage userQuizStorage \u003d new"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                JsonQuizRecordsStorage(temporaryFolder.resolve(\"ioExceptionQuizRecords.json\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        StorageManager storage \u003d new StorageManager(userScheduleStorage, userFlashcardBankStorage,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                userQuizStorage, addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                new Schedule(), new FlashcardBank(), new QuizRecords());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 10,
      "chuyiting": 14,
      "bowei-yu": 9,
      "-": 150
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/addressbookcommands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.logic.commands.addressbookcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.AddressBookModel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.AddressBookModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private AddressBookModel model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        model \u003d new AddressBookModelManager(getTypicalAddressBook());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        AddressBookModel expectedModel \u003d new AddressBookModelManager(model.getAddressBook());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), model,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 8,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/addressbookcommands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.logic.commands.addressbookcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.AddressBookModel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        AddressBookModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private class ModelStubWithPerson extends AddressBookModelStub {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends AddressBookModelStub {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public class AddressBookModelStub implements AddressBookModel {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 9,
      "-": 152
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/addressbookcommands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.logic.commands.addressbookcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.AddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.FlashcardBank;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.systemlevelmodel.QuizRecords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.Schedule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                new Schedule(), new FlashcardBank(), new QuizRecords());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                new Schedule(), new FlashcardBank(), new QuizRecords());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 1,
      "chuyiting": 6,
      "bowei-yu": 4,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/addressbookcommands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.logic.commands.addressbookcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.FlashcardBank;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.systemlevelmodel.QuizRecords;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.Schedule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            new Schedule(), new FlashcardBank(), new QuizRecords());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                new Schedule(), new FlashcardBank(), new QuizRecords());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                new Schedule(), new FlashcardBank(), new QuizRecords());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 3,
      "chuyiting": 20,
      "bowei-yu": 4,
      "-": 88
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/addressbookcommands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.logic.commands.addressbookcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.addressbookcommands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.AddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.FlashcardBank;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.systemlevelmodel.QuizRecords;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.Schedule;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            new Schedule(), new FlashcardBank(), new QuizRecords());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST, descriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                new UserPrefs(), new Schedule(), new FlashcardBank(), new QuizRecords());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                new Schedule(), new FlashcardBank(), new QuizRecords());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                new Schedule(), new FlashcardBank(), new QuizRecords());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                new Schedule(), new FlashcardBank(), new QuizRecords());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND, descriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND.getZeroBased());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST, DESC_AMY);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST, copyDescriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND, DESC_AMY)));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST, DESC_BOB)));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 1,
      "chuyiting": 37,
      "bowei-yu": 6,
      "-": 136
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/addressbookcommands/EditPersonDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.logic.commands.addressbookcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.addressbookcommands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 9,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/addressbookcommands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.logic.commands.addressbookcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.addressbookcommands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 2,
      "chuyiting": 4,
      "-": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/addressbookcommands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.logic.commands.addressbookcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.FlashcardBank;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.systemlevelmodel.QuizRecords;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.Schedule;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            new Schedule(), new FlashcardBank(), new QuizRecords());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            new Schedule(), new FlashcardBank(), new QuizRecords());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 2,
      "chuyiting": 5,
      "bowei-yu": 3,
      "-": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/addressbookcommands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.logic.commands.addressbookcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.addressbookcommands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 2,
      "chuyiting": 4,
      "-": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/addressbookcommands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.logic.commands.addressbookcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.AddressBookModel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.AddressBookModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private AddressBookModel model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private AddressBookModel expectedModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        model \u003d new AddressBookModelManager(getTypicalAddressBook());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        expectedModel \u003d new AddressBookModelManager(model.getAddressBook());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 11,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/commandtestutils/AddressCommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.logic.commands.commandtestutils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.addressbookcommands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.AddressBookModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.AddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class AddressCommandTestUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static void assertCommandSuccess(Command\u003cAddressBookModel\u003e command, AddressBookModel actualModel,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                                            CommandResult expectedCommandResult, AddressBookModel expectedModel) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, AddressBookModel, CommandResult, AddressBookModel)}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static void assertCommandSuccess(Command\u003cAddressBookModel\u003e command, AddressBookModel actualModel,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                                            String expectedMessage,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                                            AddressBookModel expectedModel) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static void assertCommandFailure(Command\u003cAddressBookModel\u003e command, AddressBookModel actualModel,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                                            String expectedMessage) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static void showPersonAtIndex(AddressBookModel model, Index targetIndex) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 16,
      "-": 117
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/commandtestutils/FlashcardBankCommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.address.logic.commands.commandtestutils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FLASHCARD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FLASHCARDSET;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FLASHCARDSET_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.FlashcardModel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.systemlevelmodel.FlashcardBank;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class FlashcardBankCommandTestUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String VALID_FLSET_NAME_PHYSICS \u003d \"Physics\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String VALID_FLSET_NAME_ECONOMICS \u003d \"Economics\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String VALID_QUESTION_SECOND_LAW \u003d \"Newton\u0027s Second Law\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String VALID_QUESTION_OPPORTUNITY_COST \u003d \"Explain the idea of an opportunity cost.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final String INVALID_QUESTION \u003d \"Graph regex should not contain non-roman characters: 漢字\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String VALID_ANSWER_SECOND_LAW \u003d \"The rate of change of momentum of a body \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            + \"is directly proportional to the resultant force acting on it\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            + \" and occurs in the direction of the force\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String VALID_ANSWER_OPPORTUNITY_COST \u003d \"Benefits or value of the next best alternative forgone\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final String INVALID_ANSWER \u003d \"Graph regex should not contain non-roman characters: 漢字\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final String NAME_DESC_PHYSICS \u003d \" \" + PREFIX_FLASHCARDSET_NAME + VALID_FLSET_NAME_PHYSICS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final String NAME_DESC_ECONOMICS \u003d \" \" + PREFIX_FLASHCARDSET_NAME + VALID_FLSET_NAME_ECONOMICS;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final String NAME_DESC_PHYSICS_EXTRA_WHITESPACE \u003d String.format(\" %s  %s\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "            PREFIX_FLASHCARDSET_NAME, VALID_FLSET_NAME_PHYSICS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String QUESTION_DESC_SECOND_LAW \u003d \" \" + PREFIX_QUESTION + VALID_QUESTION_SECOND_LAW;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String QUESTION_DESC_OPPORTUNITY_COST \u003d \" \" + PREFIX_QUESTION + VALID_QUESTION_OPPORTUNITY_COST;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final String INVALID_QUESTION_DESC \u003d \" \" + PREFIX_QUESTION + INVALID_QUESTION;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String ANSWER_DESC_SECOND_LAW \u003d \" \" + PREFIX_ANSWER + VALID_ANSWER_SECOND_LAW;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String ANSWER_DESC_OPPORTUNITY_COST \u003d \" \" + PREFIX_ANSWER + VALID_ANSWER_OPPORTUNITY_COST;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final String INVALID_ANSWER_DESC \u003d \" \" + PREFIX_ANSWER + INVALID_ANSWER;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final String FLSET_INDEX_DESC_ONE \u003d \" \" + PREFIX_FLASHCARDSET + \"1\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final String FLSET_INDEX_DESC_TWO \u003d \" \" + PREFIX_FLASHCARDSET + \"2\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final String FL_INDEX_DESC_ONE \u003d \" \" + PREFIX_FLASHCARD + \"1\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final String INVALID_FLSET_INDEX_NEGATIVE \u003d \" \" + PREFIX_FLASHCARDSET + \"-1\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final String INVALID_FLSET_INDEX_NON_INTEGER \u003d \" \" + PREFIX_FLASHCARDSET + \"A\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final String INVALID_FL_INDEX_NEGATIVE \u003d \" \" + PREFIX_FLASHCARD + \"-1\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final String INVALID_FL_INDEX_NON_INTEGER \u003d \" \" + PREFIX_FLASHCARD + \"A\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public static final String INVALID_INDEX_ERROR_MESSAGE \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static void assertCommandSuccess(Command\u003cFlashcardModel\u003e command, FlashcardModel actualModel,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                                            CommandResult expectedCommandResult, FlashcardModel expectedModel) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, FlashcardModel, CommandResult, FlashcardModel)}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static void assertCommandSuccess(Command\u003cFlashcardModel\u003e command, FlashcardModel actualModel,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                                            String expectedMessage,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                                            FlashcardModel expectedModel) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * - the flashcard bank, filtered flashcard set list and selected flashcard set \u003cbr\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * - in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static void assertCommandFailure(Command\u003cFlashcardModel\u003e command, FlashcardModel actualModel,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                                            String expectedMessage) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardBank expectedFlashcardBank \u003d new FlashcardBank(actualModel.getFlashcardBank());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        List\u003cFlashcardSet\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredFlashcardSetList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(expectedFlashcardBank, actualModel.getFlashcardBank());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredFlashcardSetList());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 22,
      "petrickjerico": 2,
      "bowei-yu": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/commandtestutils/ScheduleCommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.logic.commands.commandtestutils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.ScheduleModel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.Schedule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.model.task.InfoContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class ScheduleCommandTestUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String VALID_TITLE_CS2103T \u003d \"CS2103T\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String VALID_TITLE_CS2101 \u003d \"CS2101\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String VALID_DESCRIPTION_CS2103T \u003d \"Tutorial homework.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String VALID_DESCRIPTION_CS2101 \u003d \"Oral presentation1.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String VALID_DATETIME_CS2103T \u003d \"2020-09-25 11:00\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String VALID_DATETIME_CS2101 \u003d \"2020-10-25 10:00\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final String VALID_DURATION \u003d \"60\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String TITLE_DESC_CS2103T \u003d \" \" + PREFIX_TITLE + VALID_TITLE_CS2103T;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String TITLE_DESC_CS2101 \u003d \" \" + PREFIX_TITLE + VALID_TITLE_CS2101;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String DESCRIPTION_DESC_CS2103T \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_CS2103T;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String DESCRIPTION_DESC_CS2101 \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_CS2101;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String DATETIME_DESC_CS2103T \u003d \" \" + PREFIX_TIME + VALID_DATETIME_CS2103T;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String DATETIME_DESC_CS2101 \u003d \" \" + PREFIX_TIME + VALID_DATETIME_CS2101;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final String DURATION \u003d \" \" + PREFIX_DURATION + VALID_DURATION;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String INVALID_TITLE_DESC \u003d \" \" + PREFIX_TITLE + \"\u0026\u0026CS2103T\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final String INVALID_DATETIME_DESC \u003d \" \" + PREFIX_TIME + \"JANUARY\"; // wrong date time format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final String INVALID_DURATION \u003d \" \" + PREFIX_DURATION + \"-60\"; // duration should be a positive number"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static void assertCommandSuccess(Command\u003cScheduleModel\u003e command, ScheduleModel actualModel,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                                            CommandResult expectedCommandResult, ScheduleModel expectedModel) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, ScheduleModel, CommandResult, ScheduleModel)}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static void assertCommandSuccess(Command\u003cScheduleModel\u003e command, ScheduleModel actualModel,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                                            String expectedMessage,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                                            ScheduleModel expectedModel) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * - the schedule, filtered task list and selected task in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static void assertCommandFailure(Command\u003cScheduleModel\u003e command, ScheduleModel actualModel,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                                            String expectedMessage) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Schedule expectedSchedule \u003d new Schedule(actualModel.getSchedule());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        List\u003cTask\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertEquals(expectedSchedule, actualModel.getSchedule());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the task at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * {@code model}\u0027s schedule."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static void showTaskAtIndex(ScheduleModel model, Index targetIndex) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Task task \u003d model.getFilteredTaskList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        final String[] splitName \u003d task.getTitle().title.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        model.updateFilteredTaskList(new InfoContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertEquals(1, model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 11,
      "chuyiting": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/flashcardcommands/AddFlashcardCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.address.logic.commands.flashcardcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.FlashcardModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.systemlevelmodel.FlashcardBank;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlyFlashcardBank;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.testutil.FlashcardSetBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class AddFlashcardCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void constructor_nullFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddFlashcardCommand(null, INDEX_FIRST));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void execute_flashcardAcceptedByModel_addSuccess() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        AddFlashcardCommandTest.ModelStubAcceptingFlashcardAdded modelStub \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                new AddFlashcardCommandTest.ModelStubAcceptingFlashcardAdded();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Flashcard validFlashcard \u003d new FlashcardBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        CommandResult result \u003d new AddFlashcardCommand(validFlashcard, INDEX_FIRST).execute(modelStub);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(String.format(AddFlashcardCommand.MESSAGE_SUCCESS, validFlashcard), result.getFeedbackToUser());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(validFlashcard, modelStub.flashcardBank.getFlashcardSetList()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                .get(INDEX_FIRST.getZeroBased())"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                .getFlashcard(INDEX_FIRST.getZeroBased()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void execute_duplicateFlashcard_throwsCommandException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Flashcard validFlashcard \u003d new FlashcardBuilder().build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        AddFlashcardCommand addCommand \u003d new AddFlashcardCommand(validFlashcard, INDEX_FIRST);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        AddFlashcardCommandTest.ModelStubWithFlashcard modelStub \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                new AddFlashcardCommandTest.ModelStubWithFlashcard();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(CommandException.class, AddFlashcardCommand.MESSAGE_DUPLICATE_FLASHCARD, ("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        ) -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void execute_invalidIndexFlset_throwsCommandException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Flashcard validFlashcard \u003d new FlashcardBuilder().build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        AddFlashcardCommand addCommand \u003d new AddFlashcardCommand(validFlashcard, INDEX_SECOND);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        AddFlashcardCommandTest.ModelStubWithFlashcard modelStub \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                new AddFlashcardCommandTest.ModelStubWithFlashcard();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(CommandException.class, Messages.MESSAGE_INVALID_FLASHCARDSET_DISPLAYED_INDEX, ("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        ) -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Flashcard google \u003d new FlashcardBuilder().build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Flashcard blueOcean \u003d new FlashcardBuilder().withQuestion(\"Why is the ocean blue\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                .withAnswer(\"The ocean is blue because water absorbs colors \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                        + \"in the red part of the light spectrum.\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        AddFlashcardCommand addGoogle \u003d new AddFlashcardCommand(google, INDEX_FIRST);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        AddFlashcardCommand addBlueOcean \u003d new AddFlashcardCommand(blueOcean, INDEX_FIRST);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertTrue(addGoogle.equals(addGoogle));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        AddFlashcardCommand addGoogleCommandCopy \u003d new AddFlashcardCommand(google, INDEX_FIRST);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertTrue(addGoogle.equals(addGoogleCommandCopy));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertFalse(addGoogle.equals(1));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertFalse(addGoogle.equals(null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // different flashcards -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertFalse(addGoogle.equals(addBlueOcean));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * A Model stub that contains a single FlashcardSet."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private class ModelStubWithFlashcard extends AddFlashcardCommandTest.FlashcardModelStub {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        private final FlashcardBank flashcardBank \u003d new FlashcardBank();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        ModelStubWithFlashcard() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            FlashcardSet flset \u003d new FlashcardSetBuilder().build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            Flashcard flashcardAlrAdded \u003d new FlashcardBuilder().build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            flset.addFlashcard(flashcardAlrAdded);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            flashcardBank.addFlashcardSet(flset);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public boolean hasFlashcard(FlashcardSet flset, Flashcard flashcard) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            requireNonNull(flashcard);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            return flset.getFlashcards().stream().anyMatch(f -\u003e f.equals(flashcard));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public void addFlashcard(FlashcardSet flset, Flashcard flashcard) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            requireNonNull(flashcard);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            flset.addFlashcard(flashcard);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public FlashcardSet getFlashcardSet(Index index) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            return flashcardBank.getFlashcardSetList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * A Model stub that always accepts the Flashcard being added."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private class ModelStubAcceptingFlashcardAdded extends AddFlashcardCommandTest.FlashcardModelStub {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        private final FlashcardBank flashcardBank \u003d new FlashcardBank();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        ModelStubAcceptingFlashcardAdded() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            flashcardBank.addFlashcardSet(new FlashcardSetBuilder().build());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public boolean hasFlashcard(FlashcardSet flset, Flashcard flashcard) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            requireNonNull(flashcard);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            return flset.getFlashcards().stream().anyMatch(f -\u003e f.equals(flashcard));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public void addFlashcard(FlashcardSet flset, Flashcard flashcard) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            requireNonNull(flashcard);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            flset.addFlashcard(flashcard);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public FlashcardSet getFlashcardSet(Index index) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            return flashcardBank.getFlashcardSetList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private static class FlashcardModelStub implements FlashcardModel {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public void setFlashcardBank(ReadOnlyFlashcardBank flashcardBank) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public ReadOnlyFlashcardBank getFlashcardBank() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public Flashcard getFlashcard(FlashcardSet flashcardSet, Index flashcardIndex) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public void setFlashcard(FlashcardSet flashcardSet, Flashcard target, Flashcard editedFlashcard) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public boolean hasFlashcard(FlashcardSet flashcardSet, Flashcard flashcard) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public void deleteFlashcard(FlashcardSet flashcardSet, Index flashcardIndex) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public void addFlashcard(FlashcardSet flashcardSet, Flashcard flashcard) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public FlashcardSet getFlashcardSet(Index index) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public void setFlashcardSet(FlashcardSet target, FlashcardSet editedFlashcardSet) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public boolean hasFlashcardSet(FlashcardSet flashcardSet) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public void addFlashcardSet(FlashcardSet flashcardSet) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public void deleteFlashcardSet(FlashcardSet target) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        public ObservableList\u003cFlashcardSet\u003e getFilteredFlashcardSetList() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public void updateFilteredFlashcardSetList(Predicate\u003cFlashcardSet\u003e predicate) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        public FlashcardSet getFlashcardSetToView() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        public void setFlashcardSetToView(FlashcardSet flashcardSet) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "petrickjerico": 11,
      "bowei-yu": 228
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/flashcardcommands/AddFlashcardSetCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.address.logic.commands.flashcardcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.VALID_FLSET_NAME_ECONOMICS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.VALID_FLSET_NAME_PHYSICS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.FlashcardModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlyFlashcardBank;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.testutil.FlashcardSetBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class AddFlashcardSetCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void constructor_nullFlashcardSet_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddFlashcardSetCommand(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void execute_flashcardSetAcceptedByModel_addSuccess() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        AddFlashcardSetCommandTest.ModelStubAcceptingFlsetAdded modelStub \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                new AddFlashcardSetCommandTest.ModelStubAcceptingFlsetAdded();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardSet validFlset \u003d new FlashcardSetBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        CommandResult result \u003d new AddFlashcardSetCommand(validFlset).execute(modelStub);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(String.format(AddFlashcardSetCommand.MESSAGE_SUCCESS, validFlset), result.getFeedbackToUser());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(Arrays.asList(validFlset), modelStub.flsetsAdded);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void execute_duplicateFlashcardSet_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardSet validFlset \u003d new FlashcardSetBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        AddFlashcardSetCommand addCommand \u003d new AddFlashcardSetCommand(validFlset);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        AddFlashcardSetCommandTest.ModelStubWithFlashcardSet modelStub \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                new AddFlashcardSetCommandTest.ModelStubWithFlashcardSet(validFlset);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(CommandException.class, AddFlashcardSetCommand.MESSAGE_DUPLICATE_FLASHCARD_SET, ("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        ) -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardSet physics \u003d new FlashcardSetBuilder().withFlashcardSetName(VALID_FLSET_NAME_PHYSICS).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardSet economics \u003d new FlashcardSetBuilder().withFlashcardSetName(VALID_FLSET_NAME_ECONOMICS).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        AddFlashcardSetCommand addPhysics \u003d new AddFlashcardSetCommand(physics);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        AddFlashcardSetCommand addEconomics \u003d new AddFlashcardSetCommand(economics);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertTrue(addPhysics.equals(addPhysics));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        AddFlashcardSetCommand addPhysicsCommandCopy \u003d new AddFlashcardSetCommand(physics);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertTrue(addPhysics.equals(addPhysicsCommandCopy));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertFalse(addPhysics.equals(1));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertFalse(addPhysics.equals(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // different flashcard sets -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertFalse(addEconomics.equals(addPhysics));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * A Model stub that contains a single FlashcardSet."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private class ModelStubWithFlashcardSet extends AddFlashcardSetCommandTest.FlashcardModelStub {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        private final FlashcardSet flset;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        ModelStubWithFlashcardSet(FlashcardSet flset) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            requireNonNull(flset);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            this.flset \u003d flset;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public boolean hasFlashcardSet(FlashcardSet flashcardSet) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            requireNonNull(flashcardSet);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            return this.flset.equals(flashcardSet);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * A Model stub that always accepts the FlashcardSet being added."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private class ModelStubAcceptingFlsetAdded extends AddFlashcardSetCommandTest.FlashcardModelStub {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        private final List\u003cFlashcardSet\u003e flsetsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public boolean hasFlashcardSet(FlashcardSet flashcardSet) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            requireNonNull(flashcardSet);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            return flsetsAdded.stream().anyMatch(f -\u003e f.equals(flashcardSet));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public void addFlashcardSet(FlashcardSet flashcardSet) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            requireNonNull(flashcardSet);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            flsetsAdded.add(flashcardSet);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private static class FlashcardModelStub implements FlashcardModel {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public void setFlashcardBank(ReadOnlyFlashcardBank flashcardBank) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public ReadOnlyFlashcardBank getFlashcardBank() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public Flashcard getFlashcard(FlashcardSet flashcardSet, Index flashcardIndex) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public void setFlashcard(FlashcardSet flashcardSet, Flashcard target, Flashcard editedFlashcard) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public boolean hasFlashcard(FlashcardSet flashcardSet, Flashcard flashcard) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public void deleteFlashcard(FlashcardSet flashcardSet, Index flashcardIndex) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public void addFlashcard(FlashcardSet flashcardSet, Flashcard flashcard) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public FlashcardSet getFlashcardSet(Index index) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public void setFlashcardSet(FlashcardSet target, FlashcardSet editedFlashcardSet) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public boolean hasFlashcardSet(FlashcardSet flashcardSet) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public void addFlashcardSet(FlashcardSet flashcardSet) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public void deleteFlashcardSet(FlashcardSet target) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        public ObservableList\u003cFlashcardSet\u003e getFilteredFlashcardSetList() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        public void updateFilteredFlashcardSetList(Predicate\u003cFlashcardSet\u003e predicate) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        public FlashcardSet getFlashcardSetToView() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        public void setFlashcardSetToView(FlashcardSet flashcardSet) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "petrickjerico": 11,
      "bowei-yu": 190
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/flashcardcommands/DeleteFlashcardCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.address.logic.commands.flashcardcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcardSets.getTypicalFlashcardBank;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.FlashcardModel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.FlashcardModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.flashcard.Answer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.flashcard.FlashcardSetName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.flashcard.Question;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.systemlevelmodel.FlashcardBank;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class DeleteFlashcardCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private FlashcardModel model \u003d new FlashcardModelManager(getTypicalFlashcardBank());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void execute_validIndexList_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardSet flsetToDeleteFrom \u003d model.getFlashcardSet(INDEX_FIRST);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Flashcard flashcardToDelete \u003d model.getFlashcard(flsetToDeleteFrom, INDEX_FIRST);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        DeleteFlashcardCommand deleteCommand \u003d new DeleteFlashcardCommand(INDEX_FIRST, INDEX_FIRST);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteFlashcardCommand.MESSAGE_DELETE_FLASHCARD_SUCCESS,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                flashcardToDelete);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardModelManager expectedModel \u003d new FlashcardModelManager(model.getFlashcardBank());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        expectedModel.deleteFlashcard(flsetToDeleteFrom, INDEX_SECOND); // This should be INDEX_FIRST."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        /* Not sure if this is a problem with source code. Need help reviewing"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        because I can\u0027t find why this happens. */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void testTheAboveTest() { // to check if this is a test code regression problem"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // method to be deleted after problem is resolved"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // create a model with no typical flashcards such that the error is not typical-flashcard related"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Question question1 \u003d new Question(\"1 + 1\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Answer answer1 \u003d new Answer(\"2\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Flashcard flashcard1 \u003d new Flashcard(question1, answer1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Question question2 \u003d new Question(\"2 + 2\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Answer answer2 \u003d new Answer(\"4\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Flashcard flashcard2 \u003d new Flashcard(question2, answer2);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardBank flashcardBank \u003d new FlashcardBank();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardSet flset \u003d new FlashcardSet(new FlashcardSetName(\"Basic Arithmetic\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        flset.addFlashcard(flashcard1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        flset.addFlashcard(flashcard2);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        flashcardBank.addFlashcardSet(flset);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardModel flmodel \u003d new FlashcardModelManager(flashcardBank);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // test delete flashcard"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardSet flsetToDeleteFrom \u003d flmodel.getFlashcardSet(INDEX_FIRST);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Flashcard flashcardToDelete \u003d flmodel.getFlashcard(flsetToDeleteFrom, INDEX_FIRST);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        DeleteFlashcardCommand deleteCommand \u003d new DeleteFlashcardCommand(INDEX_FIRST, INDEX_FIRST);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteFlashcardCommand.MESSAGE_DELETE_FLASHCARD_SUCCESS,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                flashcardToDelete);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardModelManager expectedModel \u003d new FlashcardModelManager(flmodel.getFlashcardBank());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        expectedModel.deleteFlashcard(flsetToDeleteFrom, INDEX_SECOND); // test only passes with INDEX_SECOND"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // CONCLUSION: Doesn\u0027t seem to be a testing problem unless this method I wrote is wrong"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertCommandSuccess(deleteCommand, flmodel, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void execute_invalidIndexFlashcard_throwsCommandException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFlashcardBank().getFlashcardSetList().size() + 1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        DeleteFlashcardCommand deleteCommand \u003d new DeleteFlashcardCommand(INDEX_FIRST, outOfBoundIndex);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_FLASHCARD_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void execute_invalidIndexFlset_throwsCommandException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFlashcardBank().getFlashcardSetList().size() + 1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        DeleteFlashcardCommand deleteCommand \u003d new DeleteFlashcardCommand(outOfBoundIndex, INDEX_FIRST);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_FLASHCARDSET_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        DeleteFlashcardCommand firstFlsetFirstFl \u003d new DeleteFlashcardCommand(INDEX_FIRST, INDEX_FIRST);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        DeleteFlashcardCommand secondFlsetSecondFl \u003d new DeleteFlashcardCommand(INDEX_SECOND, INDEX_SECOND);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        DeleteFlashcardCommand firstFlsetSecondFl \u003d new DeleteFlashcardCommand(INDEX_FIRST, INDEX_SECOND);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertTrue(firstFlsetFirstFl.equals(firstFlsetFirstFl));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        DeleteFlashcardCommand firstFlsetFirstFlCopy \u003d new DeleteFlashcardCommand(INDEX_FIRST, INDEX_FIRST);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertTrue(firstFlsetFirstFl.equals(firstFlsetFirstFl));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertFalse(firstFlsetFirstFl.equals(1));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertFalse(firstFlsetFirstFl.equals(null));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // different flashcards -\u003e returns false"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertFalse(firstFlsetFirstFl.equals(secondFlsetSecondFl));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertFalse(firstFlsetFirstFl.equals(firstFlsetSecondFl));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertFalse(firstFlsetSecondFl.equals(secondFlsetSecondFl));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 117
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/flashcardcommands/DeleteFlashcardSetCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.address.logic.commands.flashcardcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcardSets.getTypicalFlashcardBank;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.FlashcardModel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.FlashcardModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class DeleteFlashcardSetCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private FlashcardModel model \u003d new FlashcardModelManager(getTypicalFlashcardBank());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void execute_validIndexList_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        FlashcardSet flsetToDelete \u003d model.getFilteredFlashcardSetList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        DeleteFlashcardSetCommand deleteCommand \u003d new DeleteFlashcardSetCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteFlashcardSetCommand.MESSAGE_SUCCESS, flsetToDelete);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardModelManager expectedModel \u003d new FlashcardModelManager(model.getFlashcardBank());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        expectedModel.deleteFlashcardSet(flsetToDelete);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void execute_invalidIndexList_throwsCommandException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFlashcardBank().getFlashcardSetList().size() + 1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        DeleteFlashcardSetCommand deleteCommand \u003d new DeleteFlashcardSetCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_FLASHCARDSET_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "petrickjerico": 1,
      "bowei-yu": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/flashcardcommands/ListFlashcardCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.address.logic.commands.flashcardcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcardSets.getTypicalFlashcardBank;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.FlashcardModel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.FlashcardModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class ListFlashcardCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private FlashcardModel model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private FlashcardModel expectedModel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        model \u003d new FlashcardModelManager(getTypicalFlashcardBank());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        expectedModel \u003d new FlashcardModelManager(model.getFlashcardBank());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void execute_list_showsEverything() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardSet flashcardSet \u003d expectedModel.getFlashcardSet(INDEX_FIRST);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        List\u003cFlashcard\u003e flashcards \u003d flashcardSet.getFlashcards();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                ListFlashcardCommand.MESSAGE_SUCCESS + \"\\n\" + \"There are %d flashcards\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "                flashcards.size());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertCommandSuccess(new ListFlashcardCommand(INDEX_FIRST), model,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "petrickjerico": 3,
      "bowei-yu": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/flashcardcommands/ListFlashcardSetCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.address.logic.commands.flashcardcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcardSets.getTypicalFlashcardBank;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.FlashcardModel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.FlashcardModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class ListFlashcardSetCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private FlashcardModel model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private FlashcardModel expectedModel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        model \u003d new FlashcardModelManager(getTypicalFlashcardBank());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        expectedModel \u003d new FlashcardModelManager(model.getFlashcardBank());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void execute_list_showsEverything() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "petrickjerico"
        },
        "content": "        ObservableList\u003cFlashcardSet\u003e flashcardSets \u003d model.getFilteredFlashcardSetList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        StringBuilder details \u003d new StringBuilder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        details.append(\"\\nThere are \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        details.append(flashcardSets.size());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        details.append(\" sets\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        flashcardSets.forEach(flashcardSet -\u003e details.append(\"\\n\" + flashcardSet.toString()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        String expectedMessage \u003d ListFlashcardSetCommand.MESSAGE_SUCCESS + details;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertCommandSuccess(new ListFlashcardSetCommand(), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "petrickjerico": 1,
      "bowei-yu": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/schedulecommands/ScheduleAddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.logic.commands.schedulecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.ScheduleCommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.ScheduleCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.testutil.SampleTasks.getSampleSchedule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.ScheduleModel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.ScheduleModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class ScheduleAddCommandIntegrationTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private ScheduleModel model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        model \u003d new ScheduleModelManager(getSampleSchedule());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void execute_newTask_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Task validTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ScheduleModel expectedModel \u003d new ScheduleModelManager(model.getSchedule());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        expectedModel.addTask(validTask);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertCommandSuccess(new ScheduleAddCommand(validTask), model,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                String.format(ScheduleAddCommand.MESSAGE_SUCCESS, validTask), expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void execute_duplicateTask_throwsCommandException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Task taskInList \u003d model.getSchedule().getTaskList().get(0);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertCommandFailure(new ScheduleAddCommand(taskInList), model, ScheduleAddCommand.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 2,
      "chuyiting": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/schedulecommands/ScheduleAddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.logic.commands.schedulecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.ScheduleModel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlySchedule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class ScheduleAddCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void constructor_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ScheduleAddCommand(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void execute_taskAcceptedByModel_addSuccess() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ModelStubAcceptingTaskAdded modelStub \u003d new ModelStubAcceptingTaskAdded();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Task validTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        CommandResult result \u003d new ScheduleAddCommand(validTask).execute(modelStub);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertEquals(String.format(ScheduleAddCommand.MESSAGE_SUCCESS, validTask), result.getFeedbackToUser());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertEquals(Arrays.asList(validTask), modelStub.tasksAdded);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void execute_duplicateTask_throwsCommandException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Task validTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ScheduleAddCommand addCommand \u003d new ScheduleAddCommand(validTask);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ModelStubWithTask modelStub \u003d new ModelStubWithTask(validTask);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertThrows(CommandException.class, ScheduleAddCommand.MESSAGE_DUPLICATE_TASK, ("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ) -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Task cs2103 \u003d new TaskBuilder().withTitle(\"cs2103\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Task cs2101 \u003d new TaskBuilder().withTitle(\"cs2101\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ScheduleAddCommand addCs2103 \u003d new ScheduleAddCommand(cs2103);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ScheduleAddCommand addCs2101 \u003d new ScheduleAddCommand(cs2101);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertTrue(addCs2103.equals(addCs2103));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ScheduleAddCommand addCs2103CommandCopy \u003d new ScheduleAddCommand(cs2103);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertTrue(addCs2103.equals(addCs2103CommandCopy));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertFalse(addCs2103.equals(1));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertFalse(addCs2103.equals(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertFalse(addCs2101.equals(addCs2103));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * A Model stub that contains a single Task."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private class ModelStubWithTask extends ScheduleModelStub {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        private final Task task;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ModelStubWithTask(Task task) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            this.task \u003d task;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return this.task.isSameTask(task);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * A Model stub that always accepts the Task being added."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private class ModelStubAcceptingTaskAdded extends ScheduleModelStub {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        private List\u003cTask\u003e tasksAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return tasksAdded.stream().anyMatch(task::isSameTask);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            tasksAdded.add(task);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private class ScheduleModelStub implements ScheduleModel {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        public void setSchedule(ReadOnlySchedule schedule) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        public ReadOnlySchedule getSchedule() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        public ObservableList\u003cTask\u003e getUpcomingTaskList() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 161
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/schedulecommands/ScheduleDeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.logic.commands.schedulecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.ScheduleCommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.ScheduleCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.ScheduleCommandTestUtil.showTaskAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.testutil.SampleTasks.getSampleSchedule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.ScheduleModel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.ScheduleModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class ScheduleDeleteCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private ScheduleModel model \u003d new ScheduleModelManager(getSampleSchedule());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Task taskToDelete \u003d model.getFilteredTaskList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ScheduleDeleteCommand deleteCommand \u003d new ScheduleDeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String expectedMessage \u003d String.format(ScheduleDeleteCommand.MESSAGE_DELETE_TASK_SUCCESS, taskToDelete);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ScheduleModelManager expectedModel \u003d new ScheduleModelManager(model.getSchedule());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        expectedModel.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ScheduleDeleteCommand deleteCommand \u003d new ScheduleDeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Task taskToDelete \u003d model.getFilteredTaskList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ScheduleDeleteCommand deleteCommand \u003d new ScheduleDeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String expectedMessage \u003d String.format(ScheduleDeleteCommand.MESSAGE_DELETE_TASK_SUCCESS, taskToDelete);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ScheduleModel expectedModel \u003d new ScheduleModelManager(model.getSchedule());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        expectedModel.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        showNoTask(expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of schedule list"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getSchedule().getTaskList().size());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ScheduleDeleteCommand deleteCommand \u003d new ScheduleDeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ScheduleDeleteCommand deleteFirstCommand \u003d new ScheduleDeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ScheduleDeleteCommand deleteSecondCommand \u003d new ScheduleDeleteCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ScheduleDeleteCommand deleteFirstCommandCopy \u003d new ScheduleDeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private void showNoTask(ScheduleModel model) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        model.updateFilteredTaskList(p -\u003e false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertTrue(model.getFilteredTaskList().isEmpty());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 4,
      "chuyiting": 101
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/schedulecommands/ScheduleEditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "package seedu.address.logic.commands.schedulecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.ScheduleCommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.testutil.SampleTasks.getSampleSchedule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.model.ScheduleModel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.model.ScheduleModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.model.task.DateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.model.task.Duration;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class ScheduleEditCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private ScheduleModel model \u003d new ScheduleModelManager(getSampleSchedule());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private ScheduleModel expectedModel \u003d new ScheduleModelManager(getSampleSchedule());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        ScheduleEditCommand editCommand \u003d new ScheduleEditCommand(outOfBoundIndex, null, null, null, null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void execute_taskAcceptedByModel_editSuccess() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Description editedDescription \u003d new Description(\"Week 9 Quiz\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        DateTime editedDateTime \u003d new DateTime(\"2020-09-27 12:00\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Duration editedDuration \u003d new Duration(\"30\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Task editedTask \u003d new TaskBuilder().withDescription(\"Week 9 Quiz\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                .withDateTime((\"2020-09-27 12:00\"))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                .withDuration(\"30\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        CommandResult result \u003d new ScheduleEditCommand("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                INDEX_FIRST, null, editedDescription, editedDateTime, editedDuration).execute(expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertEquals(String.format(ScheduleEditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                result.getFeedbackToUser());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        ScheduleEditCommand editFirstCommand \u003d new ScheduleEditCommand(INDEX_FIRST, null, null, null, null);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        ScheduleEditCommand editSecondCommand \u003d new ScheduleEditCommand(INDEX_SECOND, null, null, null, null);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertTrue(editFirstCommand.equals(editFirstCommand));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        ScheduleEditCommand editFirstCommandCopy \u003d new ScheduleEditCommand(INDEX_FIRST, null, null, null, null);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertTrue(editFirstCommand.equals(editFirstCommandCopy));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(editFirstCommand.equals(1));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(editFirstCommand.equals(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(editFirstCommand.equals(editSecondCommand));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/schedulecommands/ScheduleListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.logic.commands.schedulecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.ScheduleCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.ScheduleCommandTestUtil.showTaskAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.testutil.SampleTasks.getSampleSchedule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.ScheduleModel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.ScheduleModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class ScheduleListCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private ScheduleModel model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private ScheduleModel expectedModel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        model \u003d new ScheduleModelManager(getSampleSchedule());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        expectedModel \u003d new ScheduleModelManager(model.getSchedule());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertCommandSuccess(new ScheduleListCommand(), model, ScheduleListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertCommandSuccess(new ScheduleListCommand(), model, ScheduleListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 3,
      "chuyiting": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/schedulecommands/ScheduleSearchCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.logic.commands.schedulecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_TASKS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.ScheduleCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.testutil.SampleTasks.CS2100_FINAL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.testutil.SampleTasks.CS2100_TUTORIAL_HOMEWORK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.testutil.SampleTasks.ST2334_ASSIGNMENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.testutil.SampleTasks.getSampleSchedule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.ScheduleModel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.ScheduleModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.model.task.InfoContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class ScheduleSearchCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private ScheduleModel model \u003d new ScheduleModelManager(getSampleSchedule());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private ScheduleModel expectedModel \u003d new ScheduleModelManager(getSampleSchedule());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        InfoContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                new InfoContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        InfoContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                new InfoContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ScheduleSearchCommand findFirstCommand \u003d new ScheduleSearchCommand(firstPredicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ScheduleSearchCommand findSecondCommand \u003d new ScheduleSearchCommand(secondPredicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ScheduleSearchCommand findFirstCommandCopy \u003d new ScheduleSearchCommand(firstPredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void execute_zeroKeywords_noTaskFound() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        InfoContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ScheduleSearchCommand command \u003d new ScheduleSearchCommand(predicate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void execute_multipleTitleKeywords_multipleTasksFound() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        InfoContainsKeywordsPredicate predicate \u003d preparePredicate(\"CS2100\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ScheduleSearchCommand command \u003d new ScheduleSearchCommand(predicate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertEquals(Arrays.asList(CS2100_TUTORIAL_HOMEWORK, CS2100_FINAL), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void execute_multipleDescriptionKeywords_oneTaskFound() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        InfoContainsKeywordsPredicate predicate \u003d preparePredicate(\"Pipeline homework\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        ScheduleSearchCommand command \u003d new ScheduleSearchCommand(predicate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertEquals(Arrays.asList(CS2100_TUTORIAL_HOMEWORK), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void execute_multipleDescriptionKeywords_noTaskFound() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        InfoContainsKeywordsPredicate predicate \u003d preparePredicate(\"Pipeline Assignment\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        ScheduleSearchCommand command \u003d new ScheduleSearchCommand(predicate);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void execute_dateTimeKeywords_oneTaskFound() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        InfoContainsKeywordsPredicate predicate \u003d preparePredicate(\"2020-10-01 23:00\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        ScheduleSearchCommand command \u003d new ScheduleSearchCommand(predicate);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertEquals(Arrays.asList(ST2334_ASSIGNMENT), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void execute_dateTimeKeywords_noTaskFound() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        InfoContainsKeywordsPredicate predicate \u003d preparePredicate(\"2020-10-01 1:00\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        ScheduleSearchCommand command \u003d new ScheduleSearchCommand(predicate);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Parses {@code userInput} into a {@code TitleContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private InfoContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return new InfoContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 56,
      "chuyiting": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/StudyBananasParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.addressbookcommands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.addressbookcommands.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.addressbookcommands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.addressbookcommands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.addressbookcommands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.addressbookcommands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.addressbookcommands.FindCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.addressbookcommands.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.addressbookcommands.ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class StudyBananasParserTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final StudyBananasParser parser \u003d new StudyBananasParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST), command);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                + INDEX_FIRST.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST, descriptor), command);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 16,
      "-": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/addressbookparsers/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.logic.parser.addressbookparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.addressbookcommands.AddCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 1,
      "chuyiting": 25,
      "-": 115
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/addressbookparsers/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.logic.parser.addressbookparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.addressbookcommands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 1,
      "chuyiting": 4,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/addressbookparsers/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.logic.parser.addressbookparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.addressbookcommands.EditCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.addressbookcommands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 1,
      "chuyiting": 32,
      "-": 178
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/addressbookparsers/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.logic.parser.addressbookparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.addressbookcommands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 1,
      "chuyiting": 2,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/flashcardparsers/AddFlashcardCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.address.logic.parser.flashcardparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.ANSWER_DESC_OPPORTUNITY_COST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.ANSWER_DESC_SECOND_LAW;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.FLSET_INDEX_DESC_ONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.FLSET_INDEX_DESC_TWO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.INVALID_ANSWER_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.INVALID_FLSET_INDEX_NEGATIVE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.INVALID_FLSET_INDEX_NON_INTEGER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.INVALID_INDEX_ERROR_MESSAGE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.INVALID_QUESTION_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.QUESTION_DESC_OPPORTUNITY_COST;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.QUESTION_DESC_SECOND_LAW;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.VALID_ANSWER_SECOND_LAW;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.VALID_QUESTION_SECOND_LAW;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.logic.commands.flashcardcommands.AddFlashcardCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.model.flashcard.Answer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.model.flashcard.Question;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class AddFlashcardCommandParserTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final AddFlashcardCommandParser parser \u003d new AddFlashcardCommandParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        Flashcard expectedFlashcard \u003d new FlashcardBuilder().withQuestion(VALID_QUESTION_SECOND_LAW)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                .withAnswer(VALID_ANSWER_SECOND_LAW).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        Index expectedIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        // valid"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertParseSuccess(parser, FLSET_INDEX_DESC_ONE + QUESTION_DESC_SECOND_LAW + ANSWER_DESC_SECOND_LAW,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                new AddFlashcardCommand(expectedFlashcard, expectedIndex));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        // multiple questions - last question accepted"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertParseSuccess(parser, FLSET_INDEX_DESC_ONE + QUESTION_DESC_OPPORTUNITY_COST"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                        + QUESTION_DESC_SECOND_LAW + ANSWER_DESC_SECOND_LAW,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                new AddFlashcardCommand(expectedFlashcard, expectedIndex));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        // multiple answers - last answer accepted"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertParseSuccess(parser, FLSET_INDEX_DESC_ONE + QUESTION_DESC_SECOND_LAW"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                        + ANSWER_DESC_OPPORTUNITY_COST + ANSWER_DESC_SECOND_LAW,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                new AddFlashcardCommand(expectedFlashcard, expectedIndex));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        // multiple flset index - last flset index accepted"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertParseSuccess(parser, FLSET_INDEX_DESC_TWO + FLSET_INDEX_DESC_ONE"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                        + QUESTION_DESC_SECOND_LAW + ANSWER_DESC_SECOND_LAW,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                new AddFlashcardCommand(expectedFlashcard, expectedIndex));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public void parse_missingFields_failure() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddFlashcardCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        // missing index prefix"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertParseFailure(parser, QUESTION_DESC_SECOND_LAW + ANSWER_DESC_SECOND_LAW,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        // missing question prefix"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertParseFailure(parser, FLSET_INDEX_DESC_ONE + ANSWER_DESC_SECOND_LAW,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        // missing answer prefix"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertParseFailure(parser, FLSET_INDEX_DESC_ONE + QUESTION_DESC_SECOND_LAW,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        // negative flset index"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertParseFailure(parser, INVALID_FLSET_INDEX_NEGATIVE + QUESTION_DESC_SECOND_LAW + ANSWER_DESC_SECOND_LAW,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                INVALID_INDEX_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        // non-number flset index"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertParseFailure(parser, INVALID_FLSET_INDEX_NON_INTEGER + QUESTION_DESC_SECOND_LAW + ANSWER_DESC_SECOND_LAW,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                INVALID_INDEX_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        // invalid question"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertParseFailure(parser, FLSET_INDEX_DESC_ONE + INVALID_QUESTION_DESC + ANSWER_DESC_SECOND_LAW,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                Question.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        // invalid answer"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertParseFailure(parser, FLSET_INDEX_DESC_ONE + QUESTION_DESC_SECOND_LAW + INVALID_ANSWER_DESC,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                Answer.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 91,
      "bowei-yu": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/flashcardparsers/AddFlashcardSetCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.address.logic.parser.flashcardparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.NAME_DESC_ECONOMICS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.NAME_DESC_PHYSICS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.NAME_DESC_PHYSICS_EXTRA_WHITESPACE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.VALID_FLSET_NAME_PHYSICS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.logic.commands.flashcardcommands.AddFlashcardSetCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.testutil.FlashcardSetBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class AddFlashcardSetCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final AddFlashcardSetCommandParser parser \u003d new AddFlashcardSetCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        FlashcardSet expectedFlashcardSet \u003d new FlashcardSetBuilder().withFlashcardSetName(VALID_FLSET_NAME_PHYSICS)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        String a \u003d AddFlashcardSetCommand.COMMAND_WORD + NAME_DESC_PHYSICS;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        // valid"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_PHYSICS,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                new AddFlashcardSetCommand(expectedFlashcardSet));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        // extra whitespace between parameter and value"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_PHYSICS_EXTRA_WHITESPACE,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                new AddFlashcardSetCommand(expectedFlashcardSet));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_ECONOMICS"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                + NAME_DESC_PHYSICS, new AddFlashcardSetCommand(expectedFlashcardSet));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public void parse_missingFields_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddFlashcardSetCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertParseFailure(parser, VALID_FLSET_NAME_PHYSICS,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 44,
      "bowei-yu": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/flashcardparsers/DeleteFlashcardCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.address.logic.parser.flashcardparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.FLSET_INDEX_DESC_ONE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.FL_INDEX_DESC_ONE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.INVALID_FLSET_INDEX_NEGATIVE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.INVALID_FLSET_INDEX_NON_INTEGER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.INVALID_FL_INDEX_NEGATIVE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.INVALID_FL_INDEX_NON_INTEGER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.FlashcardBankCommandTestUtil.INVALID_INDEX_ERROR_MESSAGE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.logic.commands.flashcardcommands.DeleteFlashcardCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class DeleteFlashcardCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final DeleteFlashcardCommandParser parser \u003d new DeleteFlashcardCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public void parse_validArgs_returnsDeleteFlashcardCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertParseSuccess(parser, FLSET_INDEX_DESC_ONE + FL_INDEX_DESC_ONE,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                new DeleteFlashcardCommand(INDEX_FIRST, INDEX_FIRST));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        // negative flset index and fl index"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertParseFailure(parser, INVALID_FLSET_INDEX_NEGATIVE + INVALID_FL_INDEX_NEGATIVE,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                INVALID_INDEX_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        // non-integer flset index and fl index"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertParseFailure(parser, INVALID_FLSET_INDEX_NON_INTEGER + INVALID_FL_INDEX_NON_INTEGER,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                INVALID_INDEX_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 33,
      "bowei-yu": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/flashcardparsers/DeleteFlashcardSetCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.address.logic.parser.flashcardparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.logic.commands.flashcardcommands.DeleteFlashcardSetCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class DeleteFlashcardSetCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final DeleteFlashcardSetCommandParser parser \u003d new DeleteFlashcardSetCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public void parse_validArgs_returnsDeleteFlashcardSetCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteFlashcardSetCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                DeleteFlashcardSetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 22,
      "bowei-yu": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/flashcardparsers/FlashcardParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.address.logic.parser.flashcardparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.logic.commands.addressbookcommands.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.logic.commands.flashcardcommands.ListFlashcardSetCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class FlashcardParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private FlashcardParser parser \u003d new FlashcardParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public void parse_invalidCommand_throwsParseException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        // empty string"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        ) -\u003e parser.parse(\"\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        // contain only one word"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        ) -\u003e parser.parse(\"one\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        // invalid input"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parse(\"one two\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public void parse_listCommand_returnListFlashcardSetCommand() throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        ListFlashcardSetCommand expectedCommand \u003d new ListFlashcardSetCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        ListFlashcardSetCommand listCommand \u003d (ListFlashcardSetCommand) parser"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                .parse(ListFlashcardSetCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertEquals(expectedCommand, listCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 36,
      "bowei-yu": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/flashcardparsers/ListFlashcardCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "package seedu.address.logic.parser.flashcardparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.logic.commands.flashcardcommands.ListFlashcardCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "public class ListFlashcardCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final ListFlashcardCommandParser parser \u003d new ListFlashcardCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public void parse_validArgs_returnsListFlashcardCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertParseSuccess(parser, \"1\", new ListFlashcardCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "                ListFlashcardCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/parserutils/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.logic.parser.parserutils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.parser.parserutils.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertEquals(INDEX_FIRST, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertEquals(INDEX_FIRST, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress(null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail(null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 4,
      "chuyiting": 5,
      "-": 187
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/scheduleparsers/ScheduleAddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.logic.parser.scheduleparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.ScheduleCommandTestUtil.DATETIME_DESC_CS2101;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.ScheduleCommandTestUtil.DATETIME_DESC_CS2103T;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.ScheduleCommandTestUtil.DESCRIPTION_DESC_CS2101;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.ScheduleCommandTestUtil.DESCRIPTION_DESC_CS2103T;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.ScheduleCommandTestUtil.DURATION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.ScheduleCommandTestUtil.INVALID_DATETIME_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.ScheduleCommandTestUtil.INVALID_TITLE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.ScheduleCommandTestUtil.TITLE_DESC_CS2101;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.ScheduleCommandTestUtil.TITLE_DESC_CS2103T;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.ScheduleCommandTestUtil.VALID_DATETIME_CS2103T;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.ScheduleCommandTestUtil.VALID_DESCRIPTION_CS2103T;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.ScheduleCommandTestUtil.VALID_DURATION;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.ScheduleCommandTestUtil.VALID_TITLE_CS2103T;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.schedulecommands.ScheduleAddCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.task.DateTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class ScheduleAddCommandParserTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final ScheduleAddCommandParser parser \u003d new ScheduleAddCommandParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Task expectedTask \u003d new TaskBuilder().withTitle(VALID_TITLE_CS2103T).withDescription(VALID_DESCRIPTION_CS2103T)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                .withDateTime(VALID_DATETIME_CS2103T).withDuration(VALID_DURATION).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + TITLE_DESC_CS2103T + DESCRIPTION_DESC_CS2103T"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                + DATETIME_DESC_CS2103T + DURATION, new ScheduleAddCommand(expectedTask));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // multiple titles - last title accepted"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_CS2101 + TITLE_DESC_CS2103T + DESCRIPTION_DESC_CS2103T"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                + DATETIME_DESC_CS2103T + DURATION, new ScheduleAddCommand(expectedTask));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // multiple descriptions - last description accepted"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_CS2103T + DESCRIPTION_DESC_CS2101 + DESCRIPTION_DESC_CS2103T"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                + DATETIME_DESC_CS2103T + DURATION, new ScheduleAddCommand(expectedTask));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // multiple dates - last email accepted"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_CS2103T + DESCRIPTION_DESC_CS2103T + DATETIME_DESC_CS2101"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                + DATETIME_DESC_CS2103T + DURATION, new ScheduleAddCommand(expectedTask));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // no dateTime"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Task expectedTaskWithoutDateTime \u003d new TaskBuilder().withTitle(VALID_TITLE_CS2103T)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_CS2103T).withDateTime(\"\").withDuration(\"\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_CS2103T + DESCRIPTION_DESC_CS2103T,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                new ScheduleAddCommand(expectedTaskWithoutDateTime));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // no description"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Task expectedTaskWithoutDescription \u003d new TaskBuilder().withTitle(VALID_TITLE_CS2103T).withDescription(\"\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                .withDateTime(VALID_DATETIME_CS2103T).withDuration(\"\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_CS2103T + DATETIME_DESC_CS2103T,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                new ScheduleAddCommand(expectedTaskWithoutDescription));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // no dateTime and no description"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Task expectedTaskWithOnlyTitle \u003d new TaskBuilder().withTitle(VALID_TITLE_CS2103T).withDescription(\"\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                .withDateTime(\"\").withDuration(\"\").build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_CS2103T,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                new ScheduleAddCommand(expectedTaskWithOnlyTitle));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScheduleAddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // missing title prefix"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertParseFailure(parser, VALID_TITLE_CS2103T + DESCRIPTION_DESC_CS2103T + DATETIME_DESC_CS2103T,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // invalid title"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertParseFailure(parser, INVALID_TITLE_DESC + DESCRIPTION_DESC_CS2103T + DATETIME_DESC_CS2103T,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // invalid date time"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_CS2103T + DESCRIPTION_DESC_CS2103T + INVALID_DATETIME_DESC,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertParseFailure(parser, INVALID_TITLE_DESC + DATETIME_DESC_CS2103T,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + TITLE_DESC_CS2103T + DESCRIPTION_DESC_CS2103T"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                        + DATETIME_DESC_CS2103T,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScheduleAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 12,
      "chuyiting": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/scheduleparsers/ScheduleDeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.logic.parser.scheduleparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.schedulecommands.ScheduleDeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class ScheduleDeleteCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private final ScheduleDeleteCommandParser parser \u003d new ScheduleDeleteCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void parse_validArgs_returnsScheduleDeleteCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertParseSuccess(parser, \"1\", new ScheduleDeleteCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                ScheduleDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/scheduleparsers/ScheduleEditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "package seedu.address.logic.parser.scheduleparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.ScheduleCommandTestUtil.DATETIME_DESC_CS2103T;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.ScheduleCommandTestUtil.DESCRIPTION_DESC_CS2101;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.ScheduleCommandTestUtil.DURATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.ScheduleCommandTestUtil.INVALID_DATETIME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.ScheduleCommandTestUtil.INVALID_DURATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.ScheduleCommandTestUtil.INVALID_TITLE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.ScheduleCommandTestUtil.TITLE_DESC_CS2103T;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.ScheduleCommandTestUtil.VALID_DATETIME_CS2103T;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.ScheduleCommandTestUtil.VALID_DESCRIPTION_CS2101;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.ScheduleCommandTestUtil.VALID_DURATION;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.ScheduleCommandTestUtil.VALID_TITLE_CS2103T;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.logic.commands.schedulecommands.ScheduleEditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.model.task.DateTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.model.task.Duration;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class ScheduleEditCommandParserTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private final ScheduleEditCommandParser parser \u003d new ScheduleEditCommandParser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void parse_validArgs_returnsScheduleDeleteCommand() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // valid edited title"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Title editTitle \u003d new Title(VALID_TITLE_CS2103T);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertParseSuccess(parser, \" 1\" + TITLE_DESC_CS2103T,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                new ScheduleEditCommand(INDEX_FIRST, editTitle, null, null, null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // valid edited description"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Description editDescription \u003d new Description(VALID_DESCRIPTION_CS2101);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertParseSuccess(parser, \" 1\" + DESCRIPTION_DESC_CS2101,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                new ScheduleEditCommand(INDEX_FIRST, null, editDescription, null, null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // valid edited date time"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        DateTime editDateTime \u003d new DateTime(VALID_DATETIME_CS2103T);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertParseSuccess(parser, \" 1\" + DATETIME_DESC_CS2103T,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                new ScheduleEditCommand(INDEX_FIRST, null, null, editDateTime, null));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // valid edited duration"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Duration editDuration \u003d new Duration(VALID_DURATION);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertParseSuccess(parser, \" 1\" + DURATION,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                new ScheduleEditCommand(INDEX_FIRST, null, null, null, editDuration));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // all the information is valid"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertParseSuccess(parser, \" 1\" + TITLE_DESC_CS2103T"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                + DESCRIPTION_DESC_CS2101"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                + DATETIME_DESC_CS2103T"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                + DURATION,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                new ScheduleEditCommand(INDEX_FIRST, editTitle, editDescription, editDateTime, editDuration));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // no task index given"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertParseFailure(parser, \" T: CS2103T\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                ScheduleEditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // no task information is provided"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertParseFailure(parser, \" 1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                ScheduleEditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // invalid edited title format"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertParseFailure(parser, \" 1\" + INVALID_TITLE_DESC, Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // invalid edited dateTime format and valid title"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertParseFailure(parser, \" 1\" + TITLE_DESC_CS2103T + INVALID_DATETIME_DESC,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // invalid duration"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertParseFailure(parser, \" 1\" + INVALID_DURATION, Duration.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/scheduleparsers/ScheduleParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.logic.parser.scheduleparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.addressbookcommands.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.schedulecommands.ScheduleListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class ScheduleParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private ScheduleParser parser \u003d new ScheduleParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void parse_invalidCommand_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // empty string"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            ) -\u003e parser.parse(\"\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // contain only one word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            ) -\u003e parser.parse(\"one\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // invalid input"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parse(\"one two\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void parse_listCommand_returnScheduleListCommand() throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ScheduleListCommand expectedCommand \u003d new ScheduleListCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ScheduleListCommand listCommand \u003d (ScheduleListCommand) parser.parse(\"list task\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertEquals(expectedCommand, listCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/scheduleparsers/ScheduleSearchCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package seedu.address.logic.parser.scheduleparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.schedulecommands.ScheduleSearchCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.model.task.InfoContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class ScheduleSearchCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private ScheduleSearchCommandParser parser \u003d new ScheduleSearchCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                ScheduleSearchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ScheduleSearchCommand expectedSearchCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                new ScheduleSearchCommand(new InfoContainsKeywordsPredicate(Arrays.asList(\"CS2101\", \"CS2103T\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertParseSuccess(parser, \"CS2101 CS2103T\", expectedSearchCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        assertParseSuccess(parser, \" \\n CS2101 \\n \\t CS2103T  \\t\", expectedSearchCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 2,
      "chuyiting": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 4,
      "-": 100
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.FlashcardBank;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.systemlevelmodel.QuizRecords;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.Schedule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Schedule schedule \u003d new Schedule();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        FlashcardBank flashcardBank \u003d new FlashcardBank();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        QuizRecords quizRecords \u003d new QuizRecords();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs, schedule, flashcardBank, quizRecords);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs, schedule, flashcardBank, quizRecords);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                schedule, flashcardBank, quizRecords)));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                schedule, flashcardBank, quizRecords)));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                differentUserPrefs, schedule, flashcardBank, quizRecords)));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 1,
      "chuyiting": 6,
      "bowei-yu": 10,
      "-": 127
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.UserPrefs;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/model/flashcard/AnswerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class AnswerTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Answer(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void constructor_invalidAnswer_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        String invalidAnswer \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Answer(invalidAnswer));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void isValidAnswer() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Answer.isValidAnswer(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // invalid question"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertFalse(Answer.isValidAnswer(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertFalse(Answer.isValidAnswer(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // valid questions"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertTrue(Answer.isValidAnswer(\"Amount of heat evolved or \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                + \"absorbed in a reaction carried out at constant pressure\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertTrue(Answer.isValidAnswer(\"Google is a search engine.\")); // with non-alphanumeric character \u0027.\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertTrue(Answer.isValidAnswer(\"Y\")); // one character"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/model/flashcard/FlashcardSetNameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class FlashcardSetNameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new FlashcardSetName(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void constructor_invalidFlashcardSetName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        String invalidAnswer \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new FlashcardSetName(invalidAnswer));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void isValidAnswer() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FlashcardSetName.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // invalid question"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertFalse(FlashcardSetName.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertFalse(FlashcardSetName.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertFalse(FlashcardSetName.isValidName(\"Computer Science!\")); // with non-alphanumeric character \u0027!\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // valid questions"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertTrue(FlashcardSetName.isValidName(\"Physics\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertTrue(FlashcardSetName.isValidName(\"Y\")); // one character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/flashcard/FlashcardSetTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcardSets.ECONOMICS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcardSets.PHYSICS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.DECAY_CONSTANT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.HOOKES_LAW;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.NEWTONS_SECOND_LAW;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.OPPORTUNITY_COST;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.flashcard.exceptions.DuplicateFlashcardException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.flashcard.exceptions.FlashcardNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.testutil.FlashcardSetBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class FlashcardSetTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertTrue(PHYSICS.equals(PHYSICS));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertFalse(PHYSICS.equals(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // different flashcard set name -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardSet editedPhysics \u003d new FlashcardSetBuilder(PHYSICS)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                .withFlashcardSetName(\"Economics\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertFalse(PHYSICS.equals(editedPhysics));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // different flashcards in list, but same name -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        editedPhysics \u003d new FlashcardSetBuilder(PHYSICS)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                 .withFlashcards(ECONOMICS.getFlashcards())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                 .build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertTrue(PHYSICS.equals(editedPhysics));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void contains_nullFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e PHYSICS.hasFlashcard(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void contains_flashcardNotInSet_returnsFalse() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertFalse(PHYSICS.hasFlashcard(OPPORTUNITY_COST));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void contains_flashcardInSet_returnsTrue() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertTrue(PHYSICS.hasFlashcard(NEWTONS_SECOND_LAW));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void contains_flashcardWithSameInformationInSet_returnsTrue() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Flashcard editedSecondLaw \u003d new FlashcardBuilder(NEWTONS_SECOND_LAW).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertTrue(PHYSICS.hasFlashcard(editedSecondLaw));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void add_nullflashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e PHYSICS.addFlashcard(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void add_duplicateFlashcard_throwsDuplicateFlashcardException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(DuplicateFlashcardException.class, () -\u003e PHYSICS.addFlashcard(NEWTONS_SECOND_LAW));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setFlashcard_nullTargetFlashcard_throwsFlashcardNotFoundException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(FlashcardNotFoundException.class, () -\u003e PHYSICS.setFlashcard(null, NEWTONS_SECOND_LAW));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setFlashcard_nullEditedFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e PHYSICS.setFlashcard(NEWTONS_SECOND_LAW, null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setFlashcard_targetFlashcardNotInSet_throwsFlashcardNotFoundException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(FlashcardNotFoundException.class, () -\u003e PHYSICS.setFlashcard("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                OPPORTUNITY_COST, NEWTONS_SECOND_LAW));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setFlashcard_editedFlashcardIsSameFlashcard_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardSet expectedFlset \u003d new FlashcardSetBuilder(PHYSICS).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardSet physics \u003d new FlashcardSetBuilder(PHYSICS).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        physics.setFlashcard(NEWTONS_SECOND_LAW, NEWTONS_SECOND_LAW);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(expectedFlset, physics);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setFlashcard_editedFlashcardHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardSet expectedFlset \u003d new FlashcardSetBuilder(PHYSICS).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardSet physics \u003d new FlashcardSetBuilder(PHYSICS).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        physics.setFlashcard(NEWTONS_SECOND_LAW, OPPORTUNITY_COST);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertNotEquals(physics.getFlashcard(0), expectedFlset.getFlashcard(0));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setFlashcard_editedFlashcardHasNonUniqueIdentity_throwsDuplicateFlashcardException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(DuplicateFlashcardException.class, () -\u003e PHYSICS.setFlashcard("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                NEWTONS_SECOND_LAW, DECAY_CONSTANT));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void delete_nullFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e PHYSICS.deleteFlashcard(null));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void delete_flashcardDoesNotExist_throwsFlashcardNotFoundException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(FlashcardNotFoundException.class, () -\u003e PHYSICS.deleteFlashcard(Index.fromZeroBased(3)));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void delete_existingFlashcard_deletesFlashcard() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardSet physics \u003d new FlashcardSetBuilder(PHYSICS).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        physics.deleteFlashcard(INDEX_FIRST);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardSet expectedPhysics \u003d new FlashcardSetBuilder()"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                .addFlashcard(HOOKES_LAW)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                .addFlashcard(DECAY_CONSTANT)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(expectedPhysics, physics);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 137
    }
  },
  {
    "path": "src/test/java/seedu/address/model/flashcard/FlashcardTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.DECAY_CONSTANT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.NEWTONS_SECOND_LAW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class FlashcardTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertTrue(NEWTONS_SECOND_LAW.equals(NEWTONS_SECOND_LAW));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertFalse(NEWTONS_SECOND_LAW.equals(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // different question -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Flashcard editedSecondLaw \u003d new FlashcardBuilder(NEWTONS_SECOND_LAW)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                .withQuestion(\"Lenz\u0027s Law of Electromagnetic Induction\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertFalse(NEWTONS_SECOND_LAW.equals(editedSecondLaw));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // different answer -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        editedSecondLaw \u003d new FlashcardBuilder(NEWTONS_SECOND_LAW)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                .withAnswer(\"The polarity of the induced emf is to produce an \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                        + \"induced magnetic field that opposes the change in flux\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertFalse(NEWTONS_SECOND_LAW.equals(editedSecondLaw));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Flashcard secondLawCopy \u003d new FlashcardBuilder(NEWTONS_SECOND_LAW).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertTrue(NEWTONS_SECOND_LAW.equals(secondLawCopy));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // different flashcard -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertFalse(NEWTONS_SECOND_LAW.equals(DECAY_CONSTANT));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/model/flashcard/QuestionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class QuestionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Question(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void constructor_invalidQuestion_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        String invalidQuestion \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Question(invalidQuestion));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void isValidQuestion() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Question.isValidQuestion(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // invalid question"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertFalse(Question.isValidQuestion(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertFalse(Question.isValidQuestion(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // valid questions"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"Define enthalpy change\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"What is Google?\")); // with non-alphanumeric character \u0027?\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"H\")); // one character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/flashcard/UniqueFlashcardSetListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcardSets.ECONOMICS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcardSets.PHYSICS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.flashcard.exceptions.DuplicateFlashcardSetException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.flashcard.exceptions.FlashcardSetNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.testutil.FlashcardSetBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class UniqueFlashcardSetListTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private final UniqueFlashcardSetList uniqueFlsetList \u003d new UniqueFlashcardSetList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void contains_nullFlashcardSet_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlsetList.contains(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void contains_flashcardSetNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertFalse(uniqueFlsetList.contains(PHYSICS));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void contains_flashcardSetInList_returnsTrue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        uniqueFlsetList.add(PHYSICS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertTrue(uniqueFlsetList.contains(PHYSICS));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void contains_flashcardSetWithSameInformationInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        uniqueFlsetList.add(PHYSICS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardSet editedPhysics \u003d new FlashcardSetBuilder(PHYSICS).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertTrue(uniqueFlsetList.contains(editedPhysics));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void add_nullFlashcardSet_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlsetList.add(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void add_duplicateFlashcardSet_throwsDuplicateFlashcardSetException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        uniqueFlsetList.add(PHYSICS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(DuplicateFlashcardSetException.class, () -\u003e uniqueFlsetList.add(PHYSICS));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setFlashcardSet_nullTargetFlashcardSet_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlsetList.setFlashcardSet(null, PHYSICS));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setFlashcardSet_nullEditedFlashcardSet_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlsetList.setFlashcardSet(PHYSICS, null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setFlashcardSet_targetFlashcardSetNotInList_throwsFlashcardSetNotFoundException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(FlashcardSetNotFoundException.class, () -\u003e uniqueFlsetList.setFlashcardSet(PHYSICS, PHYSICS));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setFlashcardSet_editedFlashcardSetIsSameFlashcardSet_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        uniqueFlsetList.add(PHYSICS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        uniqueFlsetList.setFlashcardSet(PHYSICS, PHYSICS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        UniqueFlashcardSetList expectedUniqueFlsetList \u003d new UniqueFlashcardSetList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        expectedUniqueFlsetList.add(PHYSICS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(expectedUniqueFlsetList, uniqueFlsetList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setFlashcardSet_editedFlashcardSetHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        uniqueFlsetList.add(PHYSICS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        uniqueFlsetList.setFlashcardSet(PHYSICS, ECONOMICS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        UniqueFlashcardSetList expectedUniqueFlsetList \u003d new UniqueFlashcardSetList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        expectedUniqueFlsetList.add(ECONOMICS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(expectedUniqueFlsetList, uniqueFlsetList);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setFlashcardSet_editedFlashcardSetHasNonUniqueIdentity_throwsDuplicateFlashcardSetException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        uniqueFlsetList.add(PHYSICS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        uniqueFlsetList.add(ECONOMICS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(DuplicateFlashcardSetException.class, () -\u003e uniqueFlsetList.setFlashcardSet("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                PHYSICS, ECONOMICS));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void remove_nullFlashcardSet_throwsNullPointerException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlsetList.remove(null));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void remove_flashcardSetDoesNotExist_throwsFlashcardSetNotFoundException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(FlashcardSetNotFoundException.class, () -\u003e uniqueFlsetList.remove(ECONOMICS));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void remove_existingFlashcardSet_removesFlashcardSet() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        uniqueFlsetList.add(PHYSICS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        uniqueFlsetList.remove(PHYSICS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        UniqueFlashcardSetList expectedUniqueFlsetList \u003d new UniqueFlashcardSetList();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(expectedUniqueFlsetList, uniqueFlsetList);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setFlashcardSet_nullUniqueFlashcardSetList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlsetList.setFlashcardSets((UniqueFlashcardSetList) null));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setFlashcardSet_uniqueFlashcardSetList_replacesOwnListWithProvidedUniqueFlashcardSetList() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        uniqueFlsetList.add(PHYSICS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        UniqueFlashcardSetList expectedUniqueFlsetList \u003d new UniqueFlashcardSetList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        expectedUniqueFlsetList.add(ECONOMICS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        uniqueFlsetList.setFlashcardSets(expectedUniqueFlsetList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(expectedUniqueFlsetList, uniqueFlsetList);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setFlashcardSet_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlsetList.setFlashcardSets((List\u003cFlashcardSet\u003e) null));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setFlashcardSet_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        uniqueFlsetList.add(PHYSICS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        List\u003cFlashcardSet\u003e flsetList \u003d Collections.singletonList(ECONOMICS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        uniqueFlsetList.setFlashcardSets(flsetList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        UniqueFlashcardSetList expectedUniqueFlsetList \u003d new UniqueFlashcardSetList();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        expectedUniqueFlsetList.add(ECONOMICS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(expectedUniqueFlsetList, uniqueFlsetList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void setFlashcardSet_listWithDuplicateFlashcardSet_throwsDuplicateFlashcardSetException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        List\u003cFlashcardSet\u003e listWithDuplicateFlsets \u003d Arrays.asList(PHYSICS, PHYSICS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(DuplicateFlashcardSetException.class, () -\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                uniqueFlsetList.setFlashcardSets(listWithDuplicateFlsets));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e uniqueFlsetList"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                .asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 158
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 5,
      "-": 90
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniquePersonListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 2,
      "-": 168
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/DateTimeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class DateTimeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DateTime(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void isValidDateTime() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e DateTime.isValidDateTime(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // invalid date time"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\" \")); // spaces only"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"10/12/2020 12:00\")); // wrong format in dd/MM/yyyy hh:mm"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"date\")); // non-numeric"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"2020/03/20\")); // no time"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // valid date time"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertTrue(DateTime.isValidDateTime(\"2020-10-10 12:00\")); // correct format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/DescriptionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class DescriptionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Description(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void isValidDescription() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // null description"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Description.isValidDescription(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // blank description"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(Description.isValidDescription(\" \")); // spaces only"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // valid description"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertTrue(Description.isValidDescription(\"Final Examination for CS2103T\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertTrue(Description.isValidDescription(\"PE\")); // minimal"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertTrue(Description.isValidDescription(\"Practical Examination\")); // alphabets only"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertTrue(Description.isValidDescription(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\")); // special characters"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertTrue(Description.isValidDescription(\"123145\")); // numbers only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertTrue(Description.isValidDescription("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                \"Final Examination which covers all the materials so far\")); // long description"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/InfoContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class InfoContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        InfoContainsKeywordsPredicate firstPredicate \u003d new InfoContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        InfoContainsKeywordsPredicate secondPredicate \u003d new InfoContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        InfoContainsKeywordsPredicate firstPredicateCopy \u003d new InfoContainsKeywordsPredicate("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                firstPredicateKeywordList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void test_titleContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        InfoContainsKeywordsPredicate predicate \u003d new InfoContainsKeywordsPredicate("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                Collections.singletonList(\"CS2100\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withTitle(\"CS2100\").build()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        predicate \u003d new InfoContainsKeywordsPredicate(Arrays.asList(\"CS2100\", \"Homework\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withTitle(\"CS2100 Homework\").build()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        predicate \u003d new InfoContainsKeywordsPredicate(Arrays.asList(\"CS2103T\", \"Homework\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withTitle(\"CS2100 Homework\").build()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        predicate \u003d new InfoContainsKeywordsPredicate(Arrays.asList(\"cS2103t\", \"qUiz\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withTitle(\"CS2103T Quiz\").build()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void test_titleDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        InfoContainsKeywordsPredicate predicate \u003d new InfoContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(predicate.test(new TaskBuilder().withTitle(\"CS2100\").build()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        predicate \u003d new InfoContainsKeywordsPredicate(Arrays.asList(\"CS2103T\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(predicate.test(new TaskBuilder().withTitle(\"CS2100 Homework\").build()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void test_descriptionContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        InfoContainsKeywordsPredicate predicate \u003d new InfoContainsKeywordsPredicate("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                Collections.singletonList(\"Pipeline\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withDescription(\"Pipeline tutorial HomeWork\").build()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        predicate \u003d new InfoContainsKeywordsPredicate(Arrays.asList(\"CS2100\", \"Homework\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withDescription(\"CS2100 pipeline tutorial HomeWork\").build()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        predicate \u003d new InfoContainsKeywordsPredicate(Arrays.asList(\"tuToriaL\", \"HomEWorK\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withDescription(\"Pipeline tutorial Homework\").build()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void test_descriptionDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        InfoContainsKeywordsPredicate predicate \u003d new InfoContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(predicate.test(new TaskBuilder().withDescription(\"CS2100 Homework\").build()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        predicate \u003d new InfoContainsKeywordsPredicate(Arrays.asList(\"CS2103\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(predicate.test(new TaskBuilder().withDescription(\"CS2100 Homework\").build()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void test_dateTimeContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // Matching dateTime"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        InfoContainsKeywordsPredicate predicate \u003d new InfoContainsKeywordsPredicate("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                Arrays.asList(\"2020-10-10\", \"14:00\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withDateTime(\"2020-10-10 14:00\").build()));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void test_dateTimeDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        InfoContainsKeywordsPredicate predicate \u003d new InfoContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(predicate.test(new TaskBuilder().withDateTime(\"2020-10-10 14:00\").build()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        predicate \u003d new InfoContainsKeywordsPredicate(Arrays.asList(\"2020-10-10\", \"12:00\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(predicate.test(new TaskBuilder().withDateTime(\"2020-10-10 14:00\").build()));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 118
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/TaskTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.testutil.SampleTasks.CS2100_TUTORIAL_HOMEWORK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.testutil.SampleTasks.CS2103T_WEEK8_QUIZ;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertTrue(CS2103T_WEEK8_QUIZ.equals(CS2103T_WEEK8_QUIZ));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(CS2103T_WEEK8_QUIZ.equals(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Task editedCs2103T \u003d new TaskBuilder(CS2103T_WEEK8_QUIZ).withTitle(\"CS2101\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(CS2103T_WEEK8_QUIZ.equals(editedCs2103T));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        editedCs2103T \u003d new TaskBuilder(CS2103T_WEEK8_QUIZ).withDescription(\"Week 9 quiz\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(CS2103T_WEEK8_QUIZ.equals(editedCs2103T));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // different dateTime -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        editedCs2103T \u003d new TaskBuilder(CS2103T_WEEK8_QUIZ).withDateTime(\"2020-09-30 12:00\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(CS2103T_WEEK8_QUIZ.equals(editedCs2103T));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void isSameTask() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Task cs2103Copy \u003d new TaskBuilder(CS2103T_WEEK8_QUIZ).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertTrue(CS2103T_WEEK8_QUIZ.isSameTask(cs2103Copy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertTrue(CS2103T_WEEK8_QUIZ.isSameTask(CS2103T_WEEK8_QUIZ));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(CS2103T_WEEK8_QUIZ.isSameTask(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(CS2103T_WEEK8_QUIZ.isSameTask(CS2100_TUTORIAL_HOMEWORK));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Task editedCs2103T \u003d new TaskBuilder(CS2103T_WEEK8_QUIZ).withTitle(\"CS2101\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(CS2103T_WEEK8_QUIZ.isSameTask(editedCs2103T));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        editedCs2103T \u003d new TaskBuilder(CS2103T_WEEK8_QUIZ).withDescription(\"Week 9 Tutorial\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(CS2103T_WEEK8_QUIZ.isSameTask(editedCs2103T));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // different time -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        editedCs2103T \u003d new TaskBuilder(CS2103T_WEEK8_QUIZ).withDateTime(\"2020-09-30 12:30\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertTrue(CS2103T_WEEK8_QUIZ.isSameTask(editedCs2103T));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/TitleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class TitleTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Title(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void constructor_invalidTitle_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String invalidTitle \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Title(invalidTitle));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void isValidTitle() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Title.isValidTitle(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // invalid title"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(Title.isValidTitle(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(Title.isValidTitle(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertTrue(Title.isValidTitle(\"CS2103T\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertTrue(Title.isValidTitle(\"H\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/UniqueTaskListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.testutil.SampleTasks.CS2100_TUTORIAL_HOMEWORK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.testutil.SampleTasks.CS2103T_WEEK8_QUIZ;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class UniqueTaskListTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private final UniqueTaskList uniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void contains_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.contains(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void contains_taskNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(uniqueTaskList.contains(CS2103T_WEEK8_QUIZ));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void contains_taskInList_returnsTrue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        uniqueTaskList.add(CS2103T_WEEK8_QUIZ);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertTrue(uniqueTaskList.contains(CS2103T_WEEK8_QUIZ));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void contains_taskWithSameInformationInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        uniqueTaskList.add(CS2103T_WEEK8_QUIZ);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Task editedCs2103T \u003d new TaskBuilder(CS2103T_WEEK8_QUIZ)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                .withDescription(\"Week 8 Quiz\").withDateTime(\"2020-09-27 12:00\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertTrue(uniqueTaskList.contains(editedCs2103T));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void add_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void add_duplicateTask_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        uniqueTaskList.add(CS2103T_WEEK8_QUIZ);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(DuplicateTaskException.class, () -\u003e uniqueTaskList.add(CS2103T_WEEK8_QUIZ));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void setTask_nullTargetTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.setTask(null, CS2103T_WEEK8_QUIZ));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void setTask_nullEditedTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.setTask(CS2103T_WEEK8_QUIZ, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void setTask_targetTaskNotInList_throwsTaskNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(TaskNotFoundException.class, () -\u003e uniqueTaskList.setTask(CS2103T_WEEK8_QUIZ, CS2103T_WEEK8_QUIZ));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void setTask_editedTaskIsSameTask_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        uniqueTaskList.add(CS2103T_WEEK8_QUIZ);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(DuplicateTaskException.class, () -\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                uniqueTaskList.setTask(CS2103T_WEEK8_QUIZ, CS2103T_WEEK8_QUIZ));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void setPerson_editedTaskHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        uniqueTaskList.add(CS2103T_WEEK8_QUIZ);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        uniqueTaskList.setTask(CS2103T_WEEK8_QUIZ, CS2100_TUTORIAL_HOMEWORK);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        expectedUniqueTaskList.add(CS2100_TUTORIAL_HOMEWORK);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void setTask_editedTaskHasNonUniqueIdentity_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        uniqueTaskList.add(CS2103T_WEEK8_QUIZ);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        uniqueTaskList.add(CS2100_TUTORIAL_HOMEWORK);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(DuplicateTaskException.class, () -\u003e uniqueTaskList.setTask("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                CS2103T_WEEK8_QUIZ, CS2100_TUTORIAL_HOMEWORK));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void remove_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.remove(null));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void remove_taskDoesNotExist_throwsTaskNotFoundException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(TaskNotFoundException.class, () -\u003e uniqueTaskList.remove(CS2100_TUTORIAL_HOMEWORK));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void remove_existingTask_removesTask() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        uniqueTaskList.add(CS2103T_WEEK8_QUIZ);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        uniqueTaskList.remove(CS2103T_WEEK8_QUIZ);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void setTasks_nullUniqueTaskList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.setTasks((UniqueTaskList) null));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void setTasks_uniqueTaskList_replacesOwnListWithProvidedUniqueTaskList() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        uniqueTaskList.add(CS2103T_WEEK8_QUIZ);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        expectedUniqueTaskList.add(CS2100_TUTORIAL_HOMEWORK);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        uniqueTaskList.setTasks(expectedUniqueTaskList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void setTasks_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.setTasks((List\u003cTask\u003e) null));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void setTasks_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        uniqueTaskList.add(CS2103T_WEEK8_QUIZ);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        List\u003cTask\u003e taskList \u003d Collections.singletonList(CS2100_TUTORIAL_HOMEWORK);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        uniqueTaskList.setTasks(taskList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        expectedUniqueTaskList.add(CS2100_TUTORIAL_HOMEWORK);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void setTasks_listWithDuplicateTasks_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        List\u003cTask\u003e listWithDuplicateTasks \u003d Arrays.asList(CS2103T_WEEK8_QUIZ, CS2103T_WEEK8_QUIZ);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(DuplicateTaskException.class, () -\u003e uniqueTaskList.setTasks(listWithDuplicateTasks));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e uniqueTaskList"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                .asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 157
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(HOON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(IDA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 2,
      "-": 108
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.AddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 1,
      "-": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"addressbook.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 1,
      "-": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.testutil.SampleTasks.getSampleSchedule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.AddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlySchedule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.Schedule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.storage.flashcardstorage.JsonFlashcardBankStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.storage.quizstorage.JsonQuizRecordsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "import seedu.address.storage.schedulestorage.JsonScheduleStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        JsonScheduleStorage scheduleStorage \u003d new JsonScheduleStorage(getTempFilePath(\"sch\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        JsonFlashcardBankStorage flashcardBankStorage \u003d new JsonFlashcardBankStorage(getTempFilePath(\"flbank\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        JsonQuizRecordsStorage quizRecordsStorage \u003d new JsonQuizRecordsStorage(getTempFilePath(\"qzrds\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "        storageManager \u003d new StorageManager(scheduleStorage, flashcardBankStorage,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                quizRecordsStorage, addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void scheduleReadSave() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "         * {@link JsonAddressSchedule} class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonScheduleTest} class."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "         */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Schedule original \u003d getSampleSchedule();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        storageManager.saveSchedule(original);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        ReadOnlySchedule retrieved \u003d storageManager.readSchedule().get();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertEquals(original, new Schedule(retrieved));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void getScheduleFilePath() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertNotNull(storageManager.getScheduleFilePath());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 18,
      "cupofjoee": 4,
      "chuyiting": 6,
      "bowei-yu": 3,
      "-": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/flashcardstorage/JsonAdadptedFlashcardTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.address.storage.flashcardstorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.address.storage.flashcardstorage.JsonAdaptedFlashcard.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.NEWTONS_SECOND_LAW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.flashcard.Answer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.flashcard.Question;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class JsonAdadptedFlashcardTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private static final String VALID_QUESTION \u003d NEWTONS_SECOND_LAW.getQuestion().toString();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private static final String VALID_ANSWER \u003d NEWTONS_SECOND_LAW.getAnswer().toString();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void toModelType_validFlashcardDetails_returnsFlashcard() throws Exception {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        JsonAdaptedFlashcard flashcard \u003d new JsonAdaptedFlashcard(NEWTONS_SECOND_LAW);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(NEWTONS_SECOND_LAW, flashcard.toModelType());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void toModelType_nullQuestion_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        JsonAdaptedFlashcard flashcard \u003d new JsonAdaptedFlashcard(null, VALID_ANSWER);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Question.class.getSimpleName());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, flashcard::toModelType);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void toModelType_nullAnswer_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        JsonAdaptedFlashcard flashcard \u003d new JsonAdaptedFlashcard(VALID_QUESTION, null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Answer.class.getSimpleName());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, flashcard::toModelType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/flashcardstorage/JsonAdaptedFlashcardSetTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.address.storage.flashcardstorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.address.storage.flashcardstorage.JsonAdaptedFlashcardSet.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcardSets.PHYSICS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.DECAY_CONSTANT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.HOOKES_LAW;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.NEWTONS_SECOND_LAW;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.flashcard.FlashcardSetName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class JsonAdaptedFlashcardSetTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private static final String VALID_NAME \u003d PHYSICS.getFlashcardSetName().toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private static final List\u003cJsonAdaptedFlashcard\u003e VALID_FLASHCARD_LIST \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            new ArrayList\u003c\u003e(Arrays.asList(new JsonAdaptedFlashcard(NEWTONS_SECOND_LAW),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                    new JsonAdaptedFlashcard(HOOKES_LAW),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                    new JsonAdaptedFlashcard(DECAY_CONSTANT)));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void toModelType_validFlashcardSetDetails_returnsFlashcardSet() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        JsonAdaptedFlashcardSet flashcardSet \u003d new JsonAdaptedFlashcardSet(PHYSICS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(PHYSICS, flashcardSet.toModelType());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void toModelType_nullFlsetName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        JsonAdaptedFlashcardSet flashcardSet \u003d new JsonAdaptedFlashcardSet(null, VALID_FLASHCARD_LIST);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, FlashcardSetName.class.getSimpleName());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, flashcardSet::toModelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/flashcardstorage/JsonAdaptedFlashcardTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.address.storage.flashcardstorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class JsonAdaptedFlashcardTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/flashcardstorage/JsonFlashcardBankStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.address.storage.flashcardstorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcardSets.PHYSICS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcardSets.getTypicalFlashcardBank;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.systemlevelmodel.FlashcardBank;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlyFlashcardBank;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.testutil.FlashcardSetBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class JsonFlashcardBankStorageTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonFlashcardBankStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void readFlashcardBank_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readFlashcardBank(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private java.util.Optional\u003cReadOnlyFlashcardBank\u003e readFlashcardBank(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return new JsonFlashcardBankStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                .readFlashcardBank(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertFalse(readFlashcardBank(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readFlashcardBank(\"notJsonFormatFlashcardBank.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void readFlashcardBank_invalidFlashcardSetFlashcardBank_throwDataConversionException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readFlashcardBank(\"invalidFlashcardSet.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void readFlashcardBank_invalidAndValidFlashcardSet_throwDataConversionException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readFlashcardBank(\"invalidAndValidFlashcardSet.json\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void readFlashcardBank_invalidFlashcardFlashcardBank_throwDataConversionException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readFlashcardBank(\"invalidFlashcard.json\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void readFlashcardBank_invalidAndValidFlashcard_throwDataConversionException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readFlashcardBank(\"invalidAndValidFlashcard.json\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void readAndSaveFlashcardBank_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempFlashcardSet.json\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardBank original \u003d getTypicalFlashcardBank();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        JsonFlashcardBankStorage jsonFlashcardBankStorage \u003d new JsonFlashcardBankStorage(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        jsonFlashcardBankStorage.saveFlashcardBank(original, filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        ReadOnlyFlashcardBank readBack \u003d jsonFlashcardBankStorage.readFlashcardBank(filePath).get();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(original, new FlashcardBank(readBack));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        original.setFlashcardSet(PHYSICS, new FlashcardSetBuilder().build());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        jsonFlashcardBankStorage.saveFlashcardBank(original, filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        readBack \u003d jsonFlashcardBankStorage.readFlashcardBank(filePath).get();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(original, new FlashcardBank(readBack));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        String validFlsetName \u003d \"Chemistry\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        original.addFlashcardSet(new FlashcardSetBuilder()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                .withFlashcardSetName(validFlsetName)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                .build());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        jsonFlashcardBankStorage.saveFlashcardBank(original); // file path not specified"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        readBack \u003d jsonFlashcardBankStorage.readFlashcardBank().get(); // file path not specified"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(original, new FlashcardBank(readBack));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void saveFlashcardBank_nullFlashcardBank_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveFlashcardBank(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Saves {@code schedule} at the specified {@code filePath}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private void saveFlashcardBank(ReadOnlyFlashcardBank flashcardBank, String filePath) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            new JsonFlashcardBankStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                    .saveFlashcardBank(flashcardBank, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void saveFlashcardBank_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveFlashcardBank(new FlashcardBank(), null));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 123
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/flashcardstorage/JsonSerializableFlashcardBankTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.address.storage.flashcardstorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcardSets.getTypicalFlashcardBank;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.systemlevelmodel.FlashcardBank;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class JsonSerializableFlashcardBankTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableFlashcardBankTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private static final Path TYPICAL_FLASHCARD_SETS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalFlashcardSets.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private static final Path DUPLICATE_FLASHCARD_SETS_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateFlashcardSets.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void toModelType_typicalFlashcardSetsFile_success() throws Exception {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        JsonSerializableFlashcardBank dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_FLASHCARD_SETS_FILE,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                JsonSerializableFlashcardBank.class).get();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardBank flashcardBankFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardBank typicalFlashcardBank \u003d getTypicalFlashcardBank();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertEquals(typicalFlashcardBank, flashcardBankFromFile);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public void toModelType_duplicateFlashcardSets_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        JsonSerializableFlashcardBank dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_FLASHCARD_SETS_FILE,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                JsonSerializableFlashcardBank.class).get();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableFlashcardBank.MESSAGE_DUPLICATE_FLASHCARD_SETS,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/schedulestorage/JsonAdaptedDateTimeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.address.storage.schedulestorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.model.task.DateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class JsonAdaptedDateTimeTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private static final String INVALID_DATE_TIME \u003d \"12/10/2020 12:00\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private static final String VALID_DATE_TIME \u003d \"2020-10-10 12:00\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void toModelType_validDateTime_returnsDateTime() throws Exception {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        JsonAdaptedDateTime dateTime \u003d new JsonAdaptedDateTime(VALID_DATE_TIME);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        DateTime dateTimeObject \u003d new DateTime(VALID_DATE_TIME);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertEquals(dateTimeObject, dateTime.toModelType());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void toModelType_invalidDateTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        JsonAdaptedDateTime dateTime \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                new JsonAdaptedDateTime(INVALID_DATE_TIME);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String expectedMessage \u003d DateTime.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, dateTime::toModelType);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 29,
      "bowei-yu": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/schedulestorage/JsonAdaptedTaskTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.address.storage.schedulestorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.storage.schedulestorage.JsonAdaptedTask.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.testutil.SampleTasks.CS2103T_WEEK8_QUIZ;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class JsonAdaptedTaskTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private static final Optional\u003cString\u003e VALID_DESCRIPTION \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            Optional.ofNullable((CS2103T_WEEK8_QUIZ.getDescription().get().toString()));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private static final Optional\u003cString\u003e VALID_DATE_TIME \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            CS2103T_WEEK8_QUIZ.getDateTime().map(dateTime -\u003e dateTime.toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static final Optional\u003cInteger\u003e VALID_DURATION \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            CS2103T_WEEK8_QUIZ.getDuration().map(dur -\u003e dur.duration);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void toModelType_validTaskDetails_returnsTask() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        JsonAdaptedTask task \u003d new JsonAdaptedTask(CS2103T_WEEK8_QUIZ);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertEquals(CS2103T_WEEK8_QUIZ, task.toModelType());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void toModelType_nullTitle_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        JsonAdaptedTask task \u003d new JsonAdaptedTask(null, VALID_DESCRIPTION, VALID_DATE_TIME, VALID_DURATION);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 32,
      "bowei-yu": 1,
      "chuyiting": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/schedulestorage/JsonScheduleStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.address.storage.schedulestorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.testutil.SampleTasks.CS2100_TUTORIAL_HOMEWORK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.testutil.SampleTasks.CS2101_OP2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.testutil.SampleTasks.getSampleSchedule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.ReadOnlySchedule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.Schedule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class JsonScheduleStorageTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonScheduleStorageTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void readSchedule_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readSchedule(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private java.util.Optional\u003cReadOnlySchedule\u003e readSchedule(String filePath) throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return new JsonScheduleStorage(Paths.get(filePath)).readSchedule(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(readSchedule(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readSchedule(\"notJsonFormatSchedule.json\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void readSchedule_invalidTaskSchedule_throwDataConversionException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readSchedule(\"invalidTaskSchedule.json\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void readSchedule_invalidAndValidTaskSchedule_throwDataConversionException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readSchedule(\"invalidAndValidTaskSchedule.json\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void readAndSaveSchedule_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempSchedule.json\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Schedule original \u003d getSampleSchedule();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        System.out.println(original.toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        JsonScheduleStorage jsonScheduleStorage \u003d new JsonScheduleStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        jsonScheduleStorage.saveSchedule(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        ReadOnlySchedule readBack \u003d jsonScheduleStorage.readSchedule(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertEquals(original, new Schedule(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        original.removeTask(CS2100_TUTORIAL_HOMEWORK);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        jsonScheduleStorage.saveSchedule(original, filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        readBack \u003d jsonScheduleStorage.readSchedule(filePath).get();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertEquals(original, new Schedule(readBack));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        original.addTask(CS2101_OP2);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        jsonScheduleStorage.saveSchedule(original); // file path not specified"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        readBack \u003d jsonScheduleStorage.readSchedule().get(); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertEquals(original, new Schedule(readBack));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void saveSchedule_nullSchedule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveSchedule(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Saves {@code schedule} at the specified {@code filePath}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private void saveSchedule(ReadOnlySchedule schedule, String filePath) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            new JsonScheduleStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                    .saveSchedule(schedule, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void saveSchedule_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveSchedule(new Schedule(), null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 106,
      "bowei-yu": 1,
      "chuyiting": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/schedulestorage/JsonSerializableScheduleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.address.storage.schedulestorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.Schedule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.testutil.SampleTasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class JsonSerializableScheduleTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableScheduleTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private static final Path TYPICAL_TASKS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalTasksSchedule.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private static final Path INVALID_TASK_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidTaskSchedule.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private static final Path DUPLICATE_TASK_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateTaskSchedule.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void toModelType_typicalTasksFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        JsonSerializableSchedule dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_TASKS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                JsonSerializableSchedule.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Schedule scheduleFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Schedule typicalTasksSchedule \u003d SampleTasks.getSampleSchedule();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        boolean test \u003d scheduleFromFile.equals(typicalTasksSchedule);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertEquals(scheduleFromFile, typicalTasksSchedule);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void toModelType_invalidTaskFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        JsonSerializableSchedule dataFromFile \u003d JsonUtil.readJsonFile(INVALID_TASK_FILE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                JsonSerializableSchedule.class).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void toModelType_duplicateTasks_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        JsonSerializableSchedule dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_TASK_FILE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                JsonSerializableSchedule.class).get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableSchedule.MESSAGE_DUPLICATE_TASK,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 46,
      "bowei-yu": 1,
      "chuyiting": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.AddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a new {@code Person} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder withPerson(Person person) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 1,
      "chuyiting": 1,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.addressbookcommands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cupofjoee"
        },
        "content": "    private final EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cupofjoee": 1,
      "chuyiting": 1,
      "-": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/FlashcardBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.flashcard.Answer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.flashcard.Question;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class FlashcardBuilder {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String DEFAULT_QUESTION \u003d \"What is GitHub?\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String DEFAULT_ANSWER \u003d \"GitHub is a code hosting platform \""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            + \"for version control and collaboration\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private Question question;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private Answer answer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Creates a {@code FlashcardBuilder} with the default details."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public FlashcardBuilder() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        question \u003d new Question(DEFAULT_QUESTION);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        answer \u003d new Answer(DEFAULT_ANSWER);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Initializes the FlashcardBuilder with the data of {@code flashcardToCopy}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public FlashcardBuilder(Flashcard flashcardToCopy) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        question \u003d flashcardToCopy.getQuestion();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        answer \u003d flashcardToCopy.getAnswer();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Sets the {@code Question} of the {@code Flashcard} that we are building."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public FlashcardBuilder withQuestion(String question) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.question \u003d new Question(question);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Sets the {@code Answer} of the {@code Flashcard} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public FlashcardBuilder withAnswer(String answer) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.answer \u003d new Answer(answer);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public Flashcard build() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return new Flashcard(question, answer);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/FlashcardSetBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.flashcard.FlashcardSetName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class FlashcardSetBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String DEFAULT_FLASHCARD_SET_NAME \u003d \"Physics\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private FlashcardSetName flashcardSetName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private List\u003cFlashcard\u003e flashcards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Creates a {@code FlashcardSetBuilder} with the default details."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public FlashcardSetBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        flashcardSetName \u003d new FlashcardSetName(DEFAULT_FLASHCARD_SET_NAME);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Initializes the FlashcardBuilder with the data of {@code flashcardSetToCopy}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public FlashcardSetBuilder(FlashcardSet flashcardSetToCopy) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        flashcardSetName \u003d flashcardSetToCopy.getName();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        flashcards \u003d flashcardSetToCopy.getFlashcards();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Sets the {@code FlashcardSetName} of the {@code FlashcardSet} that we are building."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public FlashcardSetBuilder withFlashcardSetName(String flashcardSetName) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.flashcardSetName \u003d new FlashcardSetName(flashcardSetName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Sets the {@code flashcards} of the {@code FlashcardSet} that we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public FlashcardSetBuilder withFlashcards(List\u003cFlashcard\u003e flashcards) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.flashcards \u003d flashcards;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Adds a {@code Flashcard} to the {@code FlashcardSet} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * @param flashcard to be added"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public FlashcardSetBuilder addFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.flashcards.add(flashcard);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Deletes a {@code Flashcard} from the {@code FlashcardSet} that we are building,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * at the given index."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public FlashcardSetBuilder deleteFlashcard(Index flashcardIndex) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        this.flashcards.remove(flashcardIndex.getZeroBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public FlashcardSet build() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return new FlashcardSet(flashcardSetName, flashcards);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.addressbookcommands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.logic.commands.addressbookcommands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 2,
      "-": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/SampleTasks.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.Schedule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " * A utility class containing a list of {@code Task} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class SampleTasks {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final Task CS2103T_WEEK8_QUIZ \u003d new TaskBuilder().withTitle(\"CS2103T\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            .withDescription(\"Week 8 Quiz\").withDateTime(\"2020-09-27 12:00\").withDuration(\"30\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final Task CS2100_TUTORIAL_HOMEWORK \u003d new TaskBuilder().withTitle(\"CS2100\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            .withDescription(\"Pipeline homework\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            .withDateTime(\"2020-10-04 10:00\").withDuration(\"40\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final Task ST2334_ASSIGNMENT \u003d new TaskBuilder().withTitle(\"ST2334\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            .withDescription(\"Chapter 2 Quiz\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            .withDateTime(\"2020-10-01 23:00\").withDuration(\"50\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final Task CS2101_OP2 \u003d new TaskBuilder().withTitle(\"CS2101\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            .withDescription(\"Oral Presentation 2\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            .withDateTime(\"2020-10-25 10:00\").withDuration(\"60\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    // Manually added with no Description"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final Task CS2100_FINAL \u003d new TaskBuilder().withTitle(\"CS2100\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            .withDescription(\"\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            .withDateTime(\"2020-11-30 13:00\").withDuration(\"60\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    // Manually added with no DateTime"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final Task CS2101_FEEDBACK \u003d new TaskBuilder().withTitle(\"CS2101\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            .withDescription(\"Luminus Feedback\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            .withDateTime(\"\").withDuration(\"60\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private SampleTasks() {} // prevents instantiation"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Returns an {@code Schedule} with all the typical tasks."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static Schedule getSampleSchedule() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Schedule sc \u003d new Schedule();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        for (Task task : getSampleTasks()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            sc.addTask(task);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return sc;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static List\u003cTask\u003e getSampleTasks() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CS2103T_WEEK8_QUIZ,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                CS2100_TUTORIAL_HOMEWORK,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                ST2334_ASSIGNMENT,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                CS2100_FINAL,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                CS2101_FEEDBACK));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 58,
      "chuyiting": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TaskBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.model.task.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.task.Duration;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " * A utility class to help with building Task objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class TaskBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final String DEFAULT_TITLE \u003d \"CS2103T\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Weekly team meeting\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final String DEFAULT_DATE_TIME \u003d \"2020-10-10 13:00\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final String DEFAULT_DURATION \u003d \"30\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private Title title;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private DateTime dateTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Duration duration;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Creates a {@code TaskBuilder} with the default details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public TaskBuilder() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        title \u003d new Title(DEFAULT_TITLE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        dateTime \u003d new DateTime(DEFAULT_DATE_TIME);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        duration \u003d new Duration((DEFAULT_DURATION));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Initializes the TaskBuilder with the data of {@code taskToCopy}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public TaskBuilder(Task taskToCopy) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        title \u003d taskToCopy.getTitle();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        description \u003d taskToCopy.getDescription().orElse(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        dateTime \u003d taskToCopy.getDateTime().orElse(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        duration \u003d taskToCopy.getDuration().orElse(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Sets the {@code Title} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public TaskBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        this.title \u003d new Title(title);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Sets the {@code Description} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public TaskBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        this.description \u003d description.equals(\"\") ? null : new Description(description);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Sets the {@code DateTime} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public TaskBuilder withDateTime(String dateTime) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        this.dateTime \u003d dateTime.equals(\"\") ? null : new DateTime(dateTime);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Sets the {@code Duration} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public TaskBuilder withDuration(String duration) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        this.duration \u003d duration.equals(\"\") ? null : new Duration(duration);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public Task build() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return new Task(title, description, dateTime, duration);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 70,
      "chuyiting": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPersonList().size() / 2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * Change absolute path into relative path."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static Path toRelativePath(Path path) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if (path.isAbsolute()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            File root \u003d new File(\"/\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            String rootPath \u003d root.getAbsolutePath();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            String relativePath \u003d path.toString().substring(rootPath.length());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return Paths.get(relativePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return path;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 14,
      "-": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalFlashcardSets.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.CHICKEN_JOKE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.DECAY_CONSTANT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.EXPLAIN_INTEREST_TO_AD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.HOOKES_LAW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.NEGATIVE_EXTERNALITIES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.NEWTONS_SECOND_LAW;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.OPPORTUNITY_COST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.PROCRASTINATION_JOKE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.WATCH_JOKE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.systemlevelmodel.FlashcardBank;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class TypicalFlashcardSets {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final FlashcardSet PHYSICS \u003d new FlashcardSetBuilder()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .addFlashcard(NEWTONS_SECOND_LAW)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .addFlashcard(HOOKES_LAW)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .addFlashcard(DECAY_CONSTANT)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final FlashcardSet ECONOMICS \u003d new FlashcardSetBuilder()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .withFlashcardSetName(\"Economics\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .addFlashcard(OPPORTUNITY_COST)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .addFlashcard(NEGATIVE_EXTERNALITIES)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .addFlashcard(EXPLAIN_INTEREST_TO_AD)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final FlashcardSet ICEBREAKER_JOKES \u003d new FlashcardSetBuilder()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .withFlashcardSetName(\"Icebreaker jokes\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .addFlashcard(CHICKEN_JOKE)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .addFlashcard(WATCH_JOKE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .addFlashcard(PROCRASTINATION_JOKE)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private TypicalFlashcardSets() {} // prevents instantiation"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Returns a {@code FlashcardBank} with all the typical flashcard sets."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static FlashcardBank getTypicalFlashcardBank() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardBank flashcardBank \u003d new FlashcardBank();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        for (FlashcardSet flset : getTypicalFlashcards()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            flashcardBank.addFlashcardSet(flset);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return flashcardBank;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static List\u003cFlashcardSet\u003e getTypicalFlashcards() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardSet physics \u003d new FlashcardSetBuilder(PHYSICS).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardSet economics \u003d new FlashcardSetBuilder(ECONOMICS).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardSet icebreakerJokes \u003d new FlashcardSetBuilder(ICEBREAKER_JOKES).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(physics, economics, icebreakerJokes));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalFlashcards.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.flashcard.FlashcardSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "import seedu.address.model.flashcard.FlashcardSetName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": " * A utility class containing a list of {@code Flashcard} objects to be used in tests."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "public class TypicalFlashcards {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final Flashcard NEWTONS_SECOND_LAW \u003d new FlashcardBuilder()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .withQuestion(\"Newton\u0027s Second Law\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .withAnswer(\"The rate of change of momentum of a body is directly proportional\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                    + \" to the resultant force acting on it\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                    + \" and occurs in the direction of the force\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final Flashcard HOOKES_LAW \u003d new FlashcardBuilder()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .withQuestion(\"Hooke\u0027s Law\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .withAnswer(\"The change in length x of the material is directly proportional \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                    + \"to the resultant force applied to it, \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                    + \"provided that the limit of proportionality is not exceeded\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final Flashcard DECAY_CONSTANT \u003d new FlashcardBuilder()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .withQuestion(\"Decay constant\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .withAnswer(\"Probability of a radioactive nucleus decaying per unit time\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final Flashcard OPPORTUNITY_COST \u003d new FlashcardBuilder()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .withQuestion(\"Define the idea of opportunity cost\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .withAnswer(\"Benefits or value of the next best alternative forgone\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final Flashcard NEGATIVE_EXTERNALITIES \u003d new FlashcardBuilder()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .withQuestion(\"What are negative externalities?\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .withAnswer(\"Harmful side effects of production or consumption on persons \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                    + \"other than the producers or consumers themselves.\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                    + \"The third parties are not compensated for the external costs.\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final Flashcard EXPLAIN_INTEREST_TO_AD \u003d new FlashcardBuilder()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .withQuestion(\"Explain how interest rate increasing leads to a decrease in aggregate demand (AD).\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .withAnswer(\"increase i/r -\u003e increased cost of borrowing \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "                    + \"-\u003e decrease in Consumption and Investments -\u003e decrease in AD\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final Flashcard CHICKEN_JOKE \u003d new FlashcardBuilder()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .withQuestion(\"Why did the chicken cross the road?\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .withAnswer(\"To get to the other side\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final Flashcard WATCH_JOKE \u003d new FlashcardBuilder()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .withQuestion(\"Why did the late dude sit on his watch?\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .withAnswer(\"He wanted to be on time\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final Flashcard PROCRASTINATION_JOKE \u003d new FlashcardBuilder()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .withQuestion(\"Define procrastination\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .withAnswer(\"I\u0027ll do it later\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static final String KEYWORD_MATCHING_PTERODACTYL \u003d \"Pterodactyl\"; // A keyword that matches PTERODACTYL"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    private TypicalFlashcards() {} // prevents instantiation"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     * Returns a {@code FlashcardSet} with all the typical flashcards."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static FlashcardSet getTypicalFlashcardSet() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardSetName physics \u003d new FlashcardSetName(\"Physics\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        FlashcardSet flset \u003d new FlashcardSet(physics);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        for (Flashcard flashcard : getTypicalFlashcards()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "            flset.addFlashcard(flashcard);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return flset;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    public static List\u003cFlashcard\u003e getTypicalFlashcards() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(NEWTONS_SECOND_LAW, HOOKES_LAW, DECAY_CONSTANT));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bowei-yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bowei-yu": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final Index INDEX_FIRST \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final Index INDEX_SECOND \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 2,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import static seedu.address.logic.commands.commandtestutils.AddressCommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 11,
      "-": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalTasks.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import seedu.address.model.systemlevelmodel.Schedule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " * A utility class containing a list of {@code Task} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class TypicalTasks {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final Task CS2103T_WEEK8_QUIZ \u003d new TaskBuilder().withTitle(\"CS2103T\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            .withDescription(\"Week 8 Quiz\").withDateTime(\"2020-09-27 12:00\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final Task CS2100_TUTORIAL_HOMEWORK \u003d new TaskBuilder().withTitle(\"CS2100\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            .withDescription(\"Pipeline homework\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            .withDateTime(\"2020-10-04 10:00\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final Task ST2334_ASSIGNMENT \u003d new TaskBuilder().withTitle(\"ST2334\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            .withDescription(\"Chapter 2 Quiz\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            .withDateTime(\"2020-10-01 23:00\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    // Manually added with no Description"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final Task CS2100_FINAL \u003d new TaskBuilder().withTitle(\"CS2100 Final\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            .withDescription(\"\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            .withDateTime(\"2020-11-30 13:00\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    // Manually added with no DateTime"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final Task CS2101_FEEDBACK \u003d new TaskBuilder().withTitle(\"CS2101\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            .withDescription(\"Luminus Feedback\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            .withDateTime(\"\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private TypicalTasks() {} // prevents instantiation"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Returns an {@code Schedule} with all the typical tasks."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static Schedule getTypicalSchedule() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Schedule sc \u003d new Schedule();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        for (Task task : getTypicalTasks()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            sc.addTask(task);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return sc;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static List\u003cTask\u003e getTypicalTasks() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CS2103T_WEEK8_QUIZ,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                CS2100_TUTORIAL_HOMEWORK,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                ST2334_ASSIGNMENT,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                CS2100_FINAL,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                CS2101_FEEDBACK));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 60,
      "chuyiting": 1
    }
  }
]
