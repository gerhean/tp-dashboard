[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-T15-2/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T15-2/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-T15-2/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-T15-2/tp)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* This project simulates an ongoing software project for a desktop application (called _FlashNotes_) used for managing flashcards."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  * It is **written in OOP fashion**. It provides a **reasonably well-written** code base **bigger** (around 6 KLoC) than what students usually write in beginner-level SE modules, without being overwhelmingly big."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  * It comes with a **reasonable level of user and developer documentation**."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "* For the detailed documentation of this project, see the **[Flash Notes Product Website](https://ay2021s1-cs2103t-t15-2.github.io/tp/) **."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org) If you would like to contribute code to this project, see [se-education.org](https://se-education.org#https://se-education.org/#contributing) for more info."
      }
    ],
    "authorContributionMap": {
      "pengxiangg": 2,
      "chuyouchia": 1,
      "foongsq": 2,
      "-": 5
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "mainClassName \u003d \u0027seedu.flashnotes.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    archiveName \u003d \u0027flashnotes.jar\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "run {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 6,
      "-": 70
    }
  },
  {
    "path": "config/checkstyle/checkstyle.xml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!DOCTYPE module PUBLIC"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "        \"-//Checkstyle//DTD Checkstyle Configuration 1.3//EN\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "        \"https://checkstyle.org/dtds/configuration_1_3.dtd\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!--"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    This configuration file enforces rules for a modified version of the module\u0027s code standard at"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    https://oss-generic.github.io/process/codingstandards/coding-standards-java.html"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cmodule name\u003d\"Checker\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cmodule name\u003d\"FileTabCharacter\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that there are no tab characters in the file. --\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cmodule name\u003d\"NewlineAtEndOfFile\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Accept LF, CR or CRLF to accomodate devs who prefer different line endings --\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cproperty name\u003d\"lineSeparator\" value\u003d\"lf_cr_crlf\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cmodule name\u003d\"RegexpSingleline\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that FIXME is not used in comments.  TODO is preferred. --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cproperty name\u003d\"format\" value\u003d\"((//.*)|(\\*.*))FIXME\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cproperty name\u003d\"message\" value\u003d\u0027TODO is preferred to FIXME.\"\u0027 /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cmodule name\u003d\"SuppressionFilter\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cproperty name\u003d\"file\" value\u003d\"${config_loc}/suppressions.xml\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cmodule name\u003d\"LineLength\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks if a line is too long. --\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cproperty name\u003d\"max\" value\u003d\"120\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c!-- All Java AST specific tests live under TreeWalker module. --\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cmodule name\u003d\"TreeWalker\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Required to allow exceptions in code style --\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"SuppressionCommentFilter\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"offCommentFormat\" value\u003d\"CHECKSTYLE.OFF\\: ([\\w\\|]+)\"/\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"onCommentFormat\" value\u003d\"CHECKSTYLE.ON\\: ([\\w\\|]+)\"/\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"checkFormat\" value\u003d\"$1\"/\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    IMPORT CHECKS"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks the ordering of import statements follow the rules that the default Eclipse formatter uses."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    The order rule \"STATIC###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE\" consists of:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "      1. STATIC: static imports"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "      2. STANDARD_JAVA_PACKAGE: standard java/javax imports"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "      3. SPECIAL_IMPORTS: defined as org imports"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "      4. THIRD_PARTY_PACKAGE: defined as com imports"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"CustomImportOrder\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foongsq"
        },
        "content": "      \u003cproperty name\u003d\"customImportOrderRules\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                value\u003d\"STATIC###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE\"/\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foongsq"
        },
        "content": "      \u003cproperty name\u003d\"specialImportsRegExp\" value\u003d\"^org\\.\"/\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foongsq"
        },
        "content": "      \u003cproperty name\u003d\"thirdPartyPackageRegExp\" value\u003d\"^com\\.\"/\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foongsq"
        },
        "content": "      \u003cproperty name\u003d\"sortImportsInGroupAlphabetically\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks for redundant import statements."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    An import statement is redundant if:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "      * It is a duplicate of another import. This is, when a class is imported more than once."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "      * The class non-statically imported is from the java.lang package, e.g. importing java.lang.String."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "      * The class non-statically imported is from the same package as the current package."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"RedundantImport\"/\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks for unused import statements."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    An import statement is unused if:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "      It\u0027s not referenced in the file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"UnusedImports\"/\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"AvoidStarImport\"/\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    NAMING CHECKS"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Validate abbreviations (consecutive capital letters) length in identifier name --\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"AbbreviationAsWordInName\"\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"ignoreFinal\" value\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowedAbbreviationLength\" value\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"PackageName\"\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates identifiers for package names against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z]+(\\.[a-z][a-z0-9]{1,})*$\"/\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"TypeName\"\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates static, final fields against the expression \"^[A-Z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"TypeName\"/\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"ConstantName\"\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates non-private, static, final fields against the expression \"^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\". --\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"ConstantName\"/\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"applyToPrivate\" value\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cmessage key\u003d\"name.invalidPattern\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "               value\u003d\"Variable \u0027\u0027{0}\u0027\u0027 should be in ALL_CAPS (if it is a constant) or be private (otherwise).\"/\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"StaticVariableName\"\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates static, non-final fields against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"StaticVariableName\"/\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*_?$\"/\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"MemberName\"\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates non-static members against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"MemberName\"/\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*$\"/\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"MethodName\"\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates identifiers for method names against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"MethodName\"/\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*(_[a-z][a-zA-Z0-9]+){0,2}$\"/\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"ParameterName\"\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates identifiers for method parameters against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"LocalFinalVariableName\"\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates identifiers for local final variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"LocalVariableName\"\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates identifiers for local variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    LENGTH and CODING CHECKS"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that array type declarations follow Java Style"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "      Java style: public static void main(String[] args) // Allowed"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "      C style:    public static void main(String args[]) // Not allowed"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"ArrayTypeStyle\"/\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks if a catch block is empty and does not contain any comments. --\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"EmptyCatchBlock\"/\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"LeftCurly\"\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks for placement of the left curly brace (\u0027{\u0027). --\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"RightCurly\"\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks right curlies on CATCH, ELSE, and TRY blocks are on"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "      the same line. e.g., the following example is fine:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpre\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        if {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "          ..."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        } else"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/pre\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- This next example is not fine:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpre\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        if {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "          ..."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        else"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/pre\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks for braces around loop blocks --\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"NeedBraces\"\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!--"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "      if (true) return 1; // Not allowed"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "      if (true) { return 1; } // Not allowed"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "      else if {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1; // else if should always be multi line"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "      if (true)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1; // Not allowed"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyLoopBody\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that each variable declaration is in its own statement and on its own line. --\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"MultipleVariableDeclarations\"/\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"OneStatementPerLine\"/\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that long constants are defined with an upper ell.--\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"UpperEll\" /\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"FallThrough\"\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Warn about falling through to the next case statement.  Similar to"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "      javac -Xlint:fallthrough, but the check is suppressed if a single-line comment"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "      on the last non-blank line preceding the fallen-into case contains \u0027fall through\u0027 (or"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "      some other variants which we don\u0027t publicized to promote consistency)."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"reliefPattern\""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "                value\u003d\"fall through|Fall through|fallthru|Fallthru|falls through|Falls through|fallthrough|Fallthrough|No break|NO break|no break|continue on\"/\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"MissingSwitchDefault\"/\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that Class variables should never be declared public. --\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"VisibilityModifier\"\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"protectedAllowed\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowPublicFinalFields\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"ignoreAnnotationCanonicalNames\" value\u003d\"RegisterExtension, TempDir\"/\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    ORDER CHECKS"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that the order of at-clauses follows the tagOrder default property value order."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "         @author, @version, @param, @return, @throws, @exception, @see, @since, @serial, @serialField, @serialData, @deprecated"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"AtclauseOrder\"/\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks if the Class and Interface declarations is organized in this order"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "      1. Class (static) variables. Order: public, protected, package level (no access modifier), private."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "      2. Instance variables. Order: public, protected, package level (no access modifier), private."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "      3. Constructors"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "      4. Methods"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name \u003d\"DeclarationOrder\"/\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"ModifierOrder\"\u003e"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Warn if modifier order is inconsistent with JLS3 8.1.1, 8.3.1, and"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "           8.4.3.  The prescribed order is:"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "           public, protected, private, abstract, static, final, transient, volatile,"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "           synchronized, native, strictfp"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"OverloadMethodsDeclarationOrder\"/\u003e"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    WHITESPACE CHECKS"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that comments are indented relative to their position in the code --\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"CommentsIndentation\"/\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"WhitespaceAround\"\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that various tokens are surrounded by whitespace."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "           This includes most binary operators and keywords followed"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "           by regular or curly braces."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"ASSIGN, BAND, BAND_ASSIGN, BOR,"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN,"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        EQUAL, GE, GT, LAND, LCURLY, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE,"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN,"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS,"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION,"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        RCURLY, SL, SLIST, SL_ASSIGN, SR_ASSIGN, STAR, STAR_ASSIGN\"/\u003e"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Allow empty constructors e.g. MyClass() {} --\u003e"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyConstructors\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Allow empty methods e.g. void func() {} --\u003e"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyMethods\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Allow empty types e.g. class Foo {}, enum Foo {} --\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyTypes\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Allow empty loops e.g. for (int i \u003d 1; i \u003e 1; i++) {} --\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyLoops\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Allow empty lambdas e.g. () -\u003e {} --\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyLambdas\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"WhitespaceAfter\"\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that commas, semicolons and typecasts are followed by whitespace. --\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"COMMA, SEMI, TYPECAST\"/\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"NoWhitespaceAfter\"\u003e"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that there is no whitespace after various unary operators. Linebreaks are allowed. --\u003e"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS,"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        UNARY_PLUS\"/\u003e"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowLineBreaks\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- No trailing whitespace --\u003e"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"Regexp\"\u003e"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"[ \\t]+$\"/\u003e"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"illegalPattern\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"message\" value\u003d\"Trailing whitespace\"/\u003e"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"OperatorWrap\"\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that the non-assignment type operator is at the next line in a line wrap."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "           This includes \"?\", \":\", \"\u003d\u003d\", \"!\u003d\", \"/\", \"+\", \"-\", \"*\", \"%\", \"\u003e\u003e\", \"\u003e\u003e\u003e\","
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "           \"\u003e\u003d\", \"\u003e\", \"\u003c\u003c\", \"\u003c\u003d\", \"\u003c\", \"^\", \"|\", \"||\", \"\u0026\", \"\u0026\u0026\", \"instanceof\","
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "           \"\u0026\" when used in a generic upper or lower bounds constraints,"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "             e.g. \u003cT extends Foo \u0026 Bar\u003e"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "           \"::\" when used as a reference to a method or constructor without arguments."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "             e.g. String::compareToIgnoreCase"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"QUESTION, COLON, EQUAL, NOT_EQUAL, DIV, PLUS, MINUS, STAR, MOD, SR, BSR,"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        GE, GT, SL, LE, LT, BXOR, BOR, LOR, BAND, LAND, LITERAL_INSTANCEOF, TYPE_EXTENSION_AND, METHOD_REF\"/\u003e"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"option\" value\u003d\"nl\"/\u003e"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"OperatorWrap\"\u003e"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that the assignment type operator is at the previous end of line in a line wrap."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "           This includes \"\u003d\", \"/\u003d\", \"+\u003d\", \"-\u003d\", \"*\u003d\", \"%\u003d\", \"\u003e\u003e\u003d\", \"\u003e\u003e\u003e\u003d\", \"\u003c\u003c\u003d\", \"^\u003d\", \"\u0026\u003d\"."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"ASSIGN, DIV_ASSIGN, PLUS_ASSIGN, MINUS_ASSIGN, STAR_ASSIGN, MOD_ASSIGN,"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        SR_ASSIGN, BSR_ASSIGN, SL_ASSIGN, BXOR_ASSIGN, BOR_ASSIGN, BAND_ASSIGN\"/\u003e"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"option\" value\u003d\"eol\"/\u003e"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"SeparatorWrap\"\u003e"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that the \".\", \"@\" is at the next line in a line wrap. --\u003e"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"DOT, AT\"/\u003e"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"option\" value\u003d\"nl\"/\u003e"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"SeparatorWrap\"\u003e"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that the \",\", \"]\", \"[\", \"...\", \";\", \"(\" is at the previous end of line in a line wrap. --\u003e"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"COMMA, RBRACK, ARRAY_DECLARATOR, ELLIPSIS, SEMI, LPAREN\"/\u003e"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"option\" value\u003d\"eol\"/\u003e"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"Indentation\"\u003e"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"caseIndent\" value\u003d\"0\" /\u003e"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"NoWhitespaceBefore\"\u003e"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that there is no whitespace before various unary operators. Linebreaks are allowed. --\u003e"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"SEMI, DOT, POST_DEC, POST_INC\"/\u003e"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowLineBreaks\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"ParenPad\"\u003e"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that there is no whitespace before close parenthesis or after open parenthesis. --\u003e"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that non-whitespace characters are separated by no more than one whitespace character."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "         a \u003d 1; // Allowed"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "         a  \u003d 1; // Not allowed (more than one space before \u003d)"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"SingleSpaceSeparator\"\u003e"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validate whitespace surrounding comments as well."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "           a \u003d 1; // Allowed (single space before start of comment)"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "           a \u003d 1; /* Allowed (single space before start of comment) */"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "           /* Allowed (single space after end of comment) */ a \u003d 1;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "           a \u003d 1;  // Not allowed (more than one space before start of comment)"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "           a \u003d 1;  /* Not allowed (more than one space before start of comment) */"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "           /* Not allowed (more than one space after end of comment) */  a \u003d 1;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "           This doesn\u0027t validate whitespace within comments so a comment /* like  this */ is allowed."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"validateComments\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    JAVADOC CHECKS"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that every class, enumeration and interface have a header comment. --\u003e"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"JavadocType\"\u003e"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that every public method (excluding getters, setters and constructors) has a header comment. --\u003e"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"JavadocMethod\"\u003e"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowedAnnotations\" value\u003d\"Override, Test, BeforeAll, BeforeEach, AfterAll, AfterEach, Subscribe\"/\u003e"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"scope\" value\u003d\"public\"/\u003e"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"validateThrows\" value\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingReturnTag\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"METHOD_DEF, ANNOTATION_FIELD_DEF\"/\u003e"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"InvalidJavadocPosition\"/\u003e"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"MissingJavadocMethodCheck\"\u003e"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"minLineCount\" value\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingPropertyJavadoc\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"ignoreMethodNamesRegex\" value\u003d\"(set.*|get.*)\"/\u003e"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/module\u003e"
      }
    ],
    "authorContributionMap": {
      "foongsq": 4,
      "-": 394
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "### Jacob Chia Chu You"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003cimg src\u003d\"images/chuyouchia.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "[[github](http://github.com/chuyouchia)]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "[[portfolio](team/chuyouchia.md)]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Team Lead"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: UI"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foongsq"
        },
        "content": "### Foong Siqi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foongsq"
        },
        "content": "\u003cimg src\u003d\"images/foongsq.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foongsq"
        },
        "content": "[[github](http://github.com/foongsq)]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foongsq"
        },
        "content": "[[portfolio](team/foongsq.md)]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* Role: Deliverables and Deadlines"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* Responsibilities: Ensure project deliverables are done on time and in the right format."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "### Sruthi Saravanan"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "\u003cimg src\u003d\"images/sruthisarav.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "[[github](http://github.com/Sruthisarav)]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "[[portfolio](team/sruthisarav.md)]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "* Role: Documentation"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "* Responsibilities: Responsible for the quality of various project documents."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "### Peng Xiang"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "\u003cimg src\u003d\"images/pengxiangg.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "[[github](http://https://github.com/pengxiangg)]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "[[portfolio](team/pengxiangg.md)]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* Role: Integration"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* Responsibilities: In charge of versioning of the code, maintaining the code repository,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "integrating various parts of the software to create a whole."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rachel170"
        },
        "content": "### Rachel Ho Xin Ying"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rachel170"
        },
        "content": "\u003cimg src\u003d\"images/rachel170.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rachel170"
        },
        "content": "[[github](http://github.com/rachel170)]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rachel170"
        },
        "content": "[[portfolio](team/rachel170.md)]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rachel170"
        },
        "content": "* Role: Testing"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rachel170"
        },
        "content": "* Responsibilities: Ensures the testing of the project is done properly and on time."
      }
    ],
    "authorContributionMap": {
      "rachel170": 6,
      "pengxiangg": 7,
      "chuyouchia": 4,
      "foongsq": 6,
      "-": 30,
      "Sruthisarav": 6
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "## **Introduction**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "This documentation contains an overview of the structure and implementation of FlashNotes. It is made for "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "developers who wish to maintain, modify or understand the software development behind FlashNotes."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "There are a total of 4 sections in this Developer Guide:\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "* Design: Discusses the high-level design of FlashNotes."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "* Links: Consists of links to guides used in Documentation, logging, testing, configuration and dev-ops."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "* Implementation: Covers the additional key features and considerations behind each design decision made in "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    FlashNotes."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "* Appendix: Consists of 3 sections which are: Requirement, Manual Testing and Effort. "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    * Requirement: Covers the product scope, user stories, use cases, non-functional requirements and glossary."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    * Manual Testing: Covers how to test each additional feature we added to FlashNotes."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    * Effort: Covers challenges faced."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/AY2021S1-CS2103T-T15-2/tp/blob/master/src/main/java/seedu/flashnotes/Main.java) and [`MainApp`](https://github.com/AY2021S1-CS2103T-T15-2/tp/blob/master/src/main/java/seedu/flashnotes/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `addDeck n/Singapore`."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foongsq"
        },
        "content": "![ArchitectureSequenceDiagram](images/ArchitectureSequenceDiagram.png)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "[`Ui.java`](https://github.com/AY2021S1-CS2103T-T15-2/tp/blob/master/src/main/java/seedu/flashnotes/ui/Ui.java)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "The UI consists of a `MainWindow` which acts as a stage, and the `MainWindow` that references a `RootNode` to display the scene."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "The Root Node contains the scene, which is composed of UI parts like`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "There are 2 different types of implementations available for the root node. One of them is the FlashCardListRoot, and the other is the DeckCardListRoot. Both classes implement RootNode interface so that the MainWindow object can access both through polymorphism."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "Note that the Review Window is a component of the FlashCardListRoot and not a component of the DeckCardListRoot. As a result, the review window can only be initiated from the FlashCardListRoot."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "The 2 of the 3 different modes mentioned in the user guide corresponds to the 2 implementations of root node. The last one corresponds to the Review window in terms of UI display. More info can be found at [Implementation of UI.](#implementation-of-ui-3-different-modes)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/AY2021S1-CS2103T-T15-2/tp/blob/master/src/main/java/seedu/flashnotes/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/AY2021S1-CS2103T-T15-2/tp/blob/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "### Model Component"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "[`Model.java`](https://github.com/AY2021S1-CS2103T-T15-2/tp/blob/master/src/main/java/seedu/flashnotes/model/Model.java)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "The `model`,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* Stores a `UserPref` Object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* Stores the Flashnotes data"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* Exposes an unmodifiable `ObservableList\u003cFlashcard\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list changes. This list is to show cards in the card page of the Ui."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* Exposes an unmodifiable `ObservableList\u003cFlashcard\u003e` that can be \u0027observed\u0027. This list is to show the cards that are being reviewed in the review page of the Ui."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* Exposes an unmodifiable `ObservableList\u003cDeck\u003e` that can be \u0027observed\u0027. This list shows the list of decks in the Main Mode of the Ui."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* Does not depend on any of the other three components."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* The `Tag` of each Flashcard refers to which `Deck` the `Flashcard` belongs to."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* FlashNotes will handle the association between `Tag` and `Deck`."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "[`Logic.java`](https://github.com/AY2021S1-CS2103T-T15-2/tp/blob/master/src/main/java/seedu/flashnotes/logic/Logic.java)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "1. `Logic` uses the `FlashNotesParser` class to parse the user command."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a flashcard)."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"deleteDeck 1\")` API call."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "![DeleteSequenceDiagram](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rachel170"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rachel170"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rachel170"
        },
        "content": "**API** : "
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rachel170"
        },
        "content": "[`Storage.java`](https://github.com/AY2021S1-CS2103T-T15-2/tp/tree/master/src/main/java/seedu/flashnotes/storage/Storage.java)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rachel170"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rachel170"
        },
        "content": "* can save `UserPref` objects and general data within FlashNotes in json format."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rachel170"
        },
        "content": "* can read back data in json save file on next initialization of FlashNotes."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rachel170"
        },
        "content": "* can update save file\u0027s data during execution of a valid command entered by the user."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rachel170"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rachel170"
        },
        "content": "Classes used by multiple components are in the `seedu.flashnotes.commons` package."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rachel170"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rachel170"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rachel170"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rachel170"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rachel170"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rachel170"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "### Implementation of UI (3 Different Modes)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "Both of the root nodes represent the types of scenes available to the main window:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* `FlashCardListRoot` contains `FlashCardListPanel` which will display a list of flashcards available to the user."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* `DeckCardListRoot` contains `DeckCardListPanel` which will display a list of decks available to the user."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "The reasoning for splitting out the two different types of scenes is to allow the Main Window to solely perform the function of the stage, while having the root nodes handle the logic related to the individual scenes and their components."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "This provides better cohesion and utilizes the single responsibility principle as the classes are individually responsible for a smaller part of the UI rendered. It also improves the extensibility for the future if more modes and screens are to be added to the product."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "foongsq"
        },
        "content": "Similarly, we also chose to separate the review mode from the Main and Card mode. However, we decided to open a new "
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "foongsq"
        },
        "content": "JavaFX window for users to review their cards in instead. This is because opening a new window allows us to "
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "foongsq"
        },
        "content": "differentiates the review mode from the other modes better visually. This way, the UI for the review mode can also be "
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "foongsq"
        },
        "content": "more minimalistic, reducing distractions for users when reviewing their flashcards."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "foongsq"
        },
        "content": "We also fixed the review window to be a small size. Since there is a 140 character limit for questions and answers, we "
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "foongsq"
        },
        "content": "thought that there would be no need for users to maximize the review window, so we disabled that ability."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "foongsq"
        },
        "content": "When the review window is open, there would be a total of 2 command boxes on the user\u0027s screen, (one in the main "
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "foongsq"
        },
        "content": "window and one in the review window). We did not think that it would make sense for the user to be interacting with the "
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "foongsq"
        },
        "content": "main window when they are in review mode, so we decided to disable the command box in the main window when the review "
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "foongsq"
        },
        "content": "window is open. This is so that users can focus more on the review session."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "### Implementation of commands"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "The following general activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "![CommandActivityDiagram](images/CommandActivityDiagram.png)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "### Handle invalid inputs/commands"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "#### Deck vs Card related commands"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* The system disables card-related commands (e.g. addCard, deleteCard, editCard, review, find) when user is at the Main mode."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* The system disables deck-related commands (e.g. addDeck, deleteDeck, enterDeck, clear) when user is inside a deck."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* FlashNotes keeps track of whether the user is currently inside a deck, and the name of the deck that the user is currently in."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* The Parser will block these commands, taking arguments passed from Logic, which checks the state of FlashNotes through the model."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "#### Review related commands"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* The system only allows review-related commands (e.g. f, c, w, endReview)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* FlashNotes also keeps track of whether the user is currently inside review mode."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "* The Parser (logic) will check if the user is in review mode through the model, and disables certain commands if the user is currently in a review session."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "foongsq"
        },
        "content": "#### Design considerations: How to check for invalid commands"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* **Alternative 1 (current choice):** Checking of commands are done in the logic component."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    * Pros: Model component does not need to keep track and handle invalid inputs by user"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    * Cons: Coupling between logic and model is increased"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* **Alternative 2:** Checking of commands are done in the model component."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    * Pros: Reduced coupling"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    * Cons: Model has to handle commands, reducing cohesion."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "### Implementation of Main Mode features"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "#### 3 possible designs for Decks in Main Mode"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "In the planning phrase, our team came up with 3 possible alternatives for how we wanted to implement decks in our flashcard app, and the details were as follows:"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "* **Alternative 1 (current choice):** List of Decks and list of flashcards stored independently"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "  * Pros:"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    * Initialization of flashcard list and deck list is very fast using the stored data."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    * No need to store duplicate cards if one card belongs to more than 1 deck, thus saving space"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "  * Cons: "
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    * When retrieving cards belonging to a certain deck, it may take a long while to filter the relevant cards if the total list of cards become huge"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "* **Alternative 2:** Store Flashcards within the deck."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "  * Pros: "
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    * Speed of retrieving cards belonging to a deck would be faster than in alternative 1"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "  * Cons:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    * Requires an overhaul of the code base and all references of flashcards."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    * If a card needs to belong to more than 1 deck, then duplicate cards need to be created for that purpose. This results in unnecessary space wasted."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "* **Alternative 3:** Use tag object in individual flashcards to directly represent deck objects"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "  * Pros: "
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    * Easy to implement by transforming AB3."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "  * Cons: "
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    * Slow to render if there are too many cards to be searched through."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    * May need to create a default card that stores the relevant tags for decks that are empty, which is unintuitive and unnecessary."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    "
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "Alternative 1 and 2 were the strongest candidates, but alternative 1 won out due to ease of implementation and extensibility. "
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "With alternative 1, it saves more space, and the performance difference is negligible when trying to filter the flashcard list since the UI only needs to render 4 cards at any point in time."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "#### Adding a new Deck feature"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "`FlashNotes` supports the creation of new Decks. It extends `ReadOnlyFlashNotes`, which stores internally as an `UniqueDeckList` and a `UniqueCardList`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* `FlashNotes#addDeck()`  —  Add a new Deck with a unique deck name."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "foongsq"
        },
        "content": "`Model` interface depends on  `FlashNotes#addDeck()` to support functionality of `Model#addDeck()`."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "##### Given below is an example usage scenario."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "Step 1. The user launches the application for the first time. The `FlashNotes` will be initialized with the stored FlashNote state."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "Step 2. The user executes `addDeck n/Deck1` command to add a new Deck in the FlashNotes. The `addDeck` command calls `Model#addDeck()`, which executes the command and saves it to `FlashNotes`."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "Step 3. The user is now able to see the new `Deck1` added."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** "
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "If the deck already exists (duplicate deck name), it will throw a `DuplicateDeckException`, so the newly created deck will not be saved into the `FlashNotes`. The implementation details are in UniqueDeckList. "
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "Also, AddDeckCommandParser has been removed from the sequence diagram below to simplify the diagram."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "##### Corresponding sequence diagram for `addDeck` command:"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "The following sequence diagram shows how Add Deck operation works:"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "![AddDeckSequenceDiagram](images/AddDeckSequenceDiagram.png)"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `addDeckCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "##### Design Consideration: How Add Deck Command interacts with Model and underlying FlashNotes object"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "Our team looked at the 2 different ways in which Add Deck Command can interact with model-related objects. "
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "* **Alternative 1 (current choice):** Add Deck command interacts with the Model and not directly with model’s internal components such as FlashNotes and user prefs."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    * Pros:"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        * This also increases maintainability as Add Deck Command only has to be concerned with the methods that Model provides and not the other implementation details should they be subjected to change."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        * This follows the Facade Pattern where the ModelManager acts as the Facade class to the underlying internal Flashnotes object and all other related data components."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        * Consistency of implementation with the other commands in FlashNotes architecture makes it easier for developers to trace and worth the slight increment in abstraction."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    * Cons:"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        * Some might view that the ModelManager is taking on too many methods"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "* **Alternative 2:** Add Deck command interacts with the underlying FlashNotes object directly."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    * Pros:"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        * Flashnotes already directly provides the method, hence by reducing the number of function calls, the program may run marginally faster."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    * Cons:"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        * Separation of concern principle would be violated. More than 1 object (ModelManager and FlashNotes) are able to interact with commands directly."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        * Increases the number of dependencies on underlying FlashNotes objects and other objects contained in Model, hence reducing testability and maintainability."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "As alternative 1 was clearly superior, with the minor drawback of having an additional layer of abstraction, our team chose to keep implementation consistent and continue to interact with model-related objects through Model instead of accessing the underlying objects directly."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "Furthermore, the class here may not be considered too heavy with methods since there are only a 2 types of objects involved and hence the cons of using alternative 1 is limited."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "#### Listing all flashcards, Reserved Deck Name and Default Deck"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "The `listAll` command allows Users to enter a list showing all flashcards in FlashNotes."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "As the `listAll` command is available on the Main Mode, entering the list of all flashcards will be treated as entering a deck."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "In order to differentiate the deck that the user is in, the reserved deck name of \"list\" is used to inform the model that the user is currently looking at the list of all the cards."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "However, in order to allow users to perform card-level operations in the reserved deck \"list\", any cards created will be sent to the \"Default\" deck."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "Also, to prevent any conflicts with the model, users will not be able to create a deck called \"list\"."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "The following activity diagrams summarizes what happens when a user adds a new card:"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "![AddCardDiagram](images/AddCardListAllDiagram.png)"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "The model has the methods `Model#getDefaultDeckName` and `Model#getReservedDeckName` to retrieve the default and reserved deck names. "
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "The logic component will reference the these names from the model component during command executions."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "##### Design Considerations: How to implement showing all cards."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* **Alternative 1 (current choice):** Allow users to list all flashcards and add flashcards while in this list"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    * Pros: User has increased flexibility of adding cards"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    * Cons: The system needs to check for reserved deck name "
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    "
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* **Alternative 2:** Prevent users to list all flashcards"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    * Pros: The system does not have to check and reserve a deck name or use a default deck name"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    * Cons: User will not be able to see a list of all flashcards in FlashNotes"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    "
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* **Alternative 3:** Prevent users from adding flashcards while viewing all flashcards"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    * Pros: The system does not have to check and reserve a deck name or use a default deck name"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    * Cons: Will have to implement extra logic to block the card level commands while the user is viewing all flashcards"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "### Implementation of Card Mode Features"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "Card methods that are supported in Card Mode by `FlashNotes`:"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* `FlashNotes#addFlashcard(Flashcard flashcard)`: Adds a flashcard"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* `FlashNotes#removeFlashcard(Flashcard key)`: Deletes a flashcard"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* `FlashNotes#setFlashcard(Flashcard target, Flashcard editedFlashcard)`: Updates the information of a flashcard"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "These operations are exposed in the Model interface as `Model#addFlashcard(Flashcard flashcard)`, `Model#deleteFlashcard(Flashcard target)` and `Model#setFlashcard(Flashcard target, Flashcard editedFlashcard) respectively.`"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "Given below is an example usage scenario."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "The user executes `deleteCard 2` to delete the card at index 2 from the observed list."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "1. the `deleteCard` command will get the card at the index of the currently displayed list."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "1. The `Model#deleteFlashcard(target)` is called."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "1. The `ModelManager` will call `FlashNotes#removeFlashcard(key)`"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "1. Then `FlashNotes` will call the `UniqueFlashcardList#remove(toRemove)`, which will remove the flashcard from the list of flashcards."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "The following sequence diagram shows how the `deleteCard` operation works:"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "![DeleteCardDiagram](images/DeleteCardSequenceDiagram.png)"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ":information_source: **Note:** The lifeline for `deleteCardCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "##### Design Considerations: How to implement Card Mode Commands"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* **Alternative 1 (current choice):** Implement logic of card-level commands in FlashNotes"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    * Pros: Easy to implement as all logic for card-level commands is implemented in FlashNotes."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    * Cons: Deck class does not know when the flashcards are modified."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    "
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* **Alternative 2:** Implement logic of card-level operations in Deck"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    * Pros: Deck can modify its own list of flashcards."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    * Cons: Need to redesign the list of flashcards to be a composition of Deck."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "foongsq"
        },
        "content": "### Implementation of Review Mode features "
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "foongsq"
        },
        "content": "Our FlashNotes application allows users to test their knowledge and mastery of flashcards through a review session."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "foongsq"
        },
        "content": "#### Opening the review mode"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "foongsq"
        },
        "content": "The review session is implemented by opening a new JavaFX window. This new window has its own command box (where users "
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "foongsq"
        },
        "content": "type in commands) and result display box (where the application displays messages to the user). On top of that, there is"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "foongsq"
        },
        "content": "also the Individual Flashcard section of the window that shows the question of 1 flashcard. When the \"flip\" command is "
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "foongsq"
        },
        "content": "executed, the answer to that question will be showed instead."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "foongsq"
        },
        "content": "The following activity diagram shows the typical workflow when a user reviews flashcards in the review mode."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "foongsq"
        },
        "content": "![ReviewWorkflowActivityDiagram](images/ReviewWorkflowActivityDiagram.png)"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "foongsq"
        },
        "content": "To support the opening of this review session, we added the following command:"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* `review` - A command that sets up the list of flashcards to review and opens a new review window displaying those cards."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "foongsq"
        },
        "content": "The following is a sequence diagram that demonstrates how a review command sets up the review session:"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "foongsq"
        },
        "content": "![ReviewSequenceDiagram](images/ReviewSequenceDiagram.png)"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "foongsq"
        },
        "content": "`ModelManager#setUpReviewList()` method sets up the list of flashcards to review inside `Model`."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "foongsq"
        },
        "content": "It duplicates the list of filtered flashcards in the model as of the moment that the review command was"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "foongsq"
        },
        "content": "called, it then shuffles these cards using the `FXCollections.shuffle()` method, and it trims the list of"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "foongsq"
        },
        "content": "flashcards to review according to the review limit set by users."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "foongsq"
        },
        "content": "#### Setting and Checking Review Limit feature"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "Our FlashNotes application allows users to set the maximum number of cards that they want to review in a single"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "review session (review limit). "
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "Users only have to set the review limit once and it will be saved as user preferences in a storage file. Users will"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "then only need to use this feature again when they want to change the review limit again in the future."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "foongsq"
        },
        "content": "The initial value for the review limit is set to `Integer.MAX_VALUE` in `preferences.json`, which tells the program that the user did not"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "set a review limit and hence the program will allow users to review all their flashcards in a certain deck at each review"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "session. "
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "foongsq"
        },
        "content": "The valid range of integer inputs for this command is any integer more than 0. However, as we thought it wouldn\u0027t "
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "make sense on the user\u0027s end to set 0 or negative values as the review limit."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "The following is an activity diagram showing how the set review command is intended to be used"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "when a user wants to use FlashNotes to review a deck of flashcards."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "![SetReviewLimitActivityDiagram](images/SetReviewLimitActivityDiagram.png)"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "foongsq"
        },
        "content": "We also implemented a command `checkReviewLimit` for users to check the review limit that they have set, in case they"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "foongsq"
        },
        "content": "forgot what the current review limit is."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "foongsq"
        },
        "content": "We stored the review limit using the `long` data type. If we stored the review limit using an `Integer` data type, when "
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "foongsq"
        },
        "content": "a user inputs a review limit greater than `Integer.MAX_VALUE`, the program will recognise the review limit as not an Integer"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "foongsq"
        },
        "content": "and tell users that the command format is invalid. We solved this problem by storing the review limit using a `long` data type."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "foongsq"
        },
        "content": "Now, when the user inputs a review limit greater than `Integer.MAX_VALUE`, the parser will notice this and throw a relevant "
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "foongsq"
        },
        "content": "`ParseException` telling users that their review limit is out of range, instead of telling users that the command format is invalid. "
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "foongsq"
        },
        "content": "##### Design Considerations: Where to save the review limit"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* **Alternative 1 (current choice):** Save review limit in the user preferences file."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    * Pros: Users would not have to set review limit every time they start up the application."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    * Cons: We have to write to the data file `preferences.json` instead of simply saving the limit as a variable in "
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    model."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* **Alternative 2:** Save review limit internally in `Model`."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    * Pros: Do not have to write into a data file."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    * Cons: Users would have to set review limit every time they start up the application."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "foongsq"
        },
        "content": "#### Flip Card feature"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "Our FlashNotes application allows users to flip the cards they are currently reviewing in the review mode to"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "see the answer for the question on the flashcard. "
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "foongsq"
        },
        "content": "##### Implementation"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "Users only have to type the `f` command to flip their flashcard. Users can flip the flashcard as many times as they "
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "would like to in the review mode."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "The initial value of `isFlipped` is set to false, so that the review mode is showing the question on the flashcard "
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "first."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "To support the flipping of flashcards, the following commands were added:"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "* `f` - A command that flips the flashcard currently being reviewed and displays the question or answer depending on "
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "the number of times the card had been flipped."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "The following is a sequence diagram that demonstrates how a flip command flips a card in the review session:"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "![FlipCommandSequenceDiagram](images/FlipCommandSequenceDiagram.png)"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "This feature is implemented by adding an isFlipped boolean in the `Model` of the `Flashcard`. To toggle this boolean,"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "a function call is made from the `ModelManager#carryOutFlipCommand()` which is called by the `FlipCommand#execute()` "
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "when it is created from the `FlashNotesParser`."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "##### Design Considerations: Flip Card Implementation"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* **Alternative 1 (current choice):** Change `isFlipped` boolean in the flashcard model."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    * Pros: "
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        * Only need the instance of the flashcard to update or check whether the particular flashcard has been "
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    flipped in the review mode."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        * Ensures that the logic of flipping of flashcard isn\u0027t done in the UI."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    * Cons: Increases coupling."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* **Alternative 2:** Implement the boolean `isFlipped` in the UI part, `IndividualFlashcard`."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    * Pros: No need for extra function calls as flipping is directly done in the UI."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    * Cons:"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        * Logic is being done in the UI section."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        * Hard to test using testcases. Have to manually test."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    "
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "foongsq"
        },
        "content": "#### Next Card feature"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "Our FlashNotes application allows users to go to the next card to review once they are done reviewing the current "
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "flashcard.    "
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "foongsq"
        },
        "content": "##### Implementation"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "Users only have to type the `c` or `w` command to see the next flashcard where `c` means that they managed to review"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "the flashcard correctly and `w` means that they got the question wrong. These commands will only work after the user"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "sees the answer of the flashcard currently being reviewed which is noted by whether the flashcard has been flipped or"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "not. "
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "The initial value of `isCorrect` is set to 0 to denote that the card has yet to be reviewed."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "To support the ability to go to the next flashcard in the review session, the following commands were added:"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "* `c` - A command that goes to the next flashcard after marking the flashcard as correct."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "* `w` - A command that goes to the next flashcard after marking the flashcard as wrong and adding it back to the review"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        list."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a `c` or `w` command:"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "![NextCommandActivityDiagram](images/NextCommandActivityDiagram.png)"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "This feature is implemented by adding an isCorrect int in the `Model` of the `Flashcard`. To update this int,"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "a function call is made from the `ModelManager#markFlashcardBeingReviewed(int result)` which is a call from "
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "`CorrectCommand#execute()` or `WrongCommand#execute()` when it is created by the `FlashNotesParser`."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "Design Considerations for Next Card Implementation are similar to that of Flip Card feature."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "rachel170"
        },
        "content": "#### Review Statistics Feature"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "rachel170"
        },
        "content": "FlashNotes application supports testing of the user\u0027s knowledge of the flashcards through a review session. "
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "rachel170"
        },
        "content": "In addition to this, as a user wants to be able to see how many cards they got correct after a review session, so that"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "rachel170"
        },
        "content": "they can track their topics\u0027 mastery and feel a sense of accomplishment for studying efficiently (user story). Due to"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "rachel170"
        },
        "content": "this user story, FlashNotes will incorporate a review statistics feature to fulfill the user\u0027s needs."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "rachel170"
        },
        "content": "##### Tracking and Generation of the Review Statistics Feature"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "rachel170"
        },
        "content": "During a review session, FlashNotes will keep track of the number of questions the user answered correctly on their "
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "rachel170"
        },
        "content": "first try at the question. In order to compliment the implementation of Review Mode, the implementation made use of the "
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "rachel170"
        },
        "content": "addition of `correctAnswers` attribute in `IndividualFlashcard` to keep track of the count of questions answered "
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "rachel170"
        },
        "content": "correctly on the first attempt. "
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "rachel170"
        },
        "content": "To ensure the variable incrementation is done only if the current flashcard contains a question that the user is attempting"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "rachel170"
        },
        "content": "for the first time in the review session, a check in `IndividualFlashcard` for the `index` is done to ensure it is within "
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "rachel170"
        },
        "content": "the range of `numOfFlashcards`."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "rachel170"
        },
        "content": "To ensure the variable incrementation is done only if the current flashcard contains a question that the user answered "
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "rachel170"
        },
        "content": "correctly, a check is done for the `isCorrect` variable to ensure that the current flashcard has been marked as"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "rachel170"
        },
        "content": "correct by the user."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "rachel170"
        },
        "content": "At the end of the review session, FlashNotes will display:"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * `correctAnswers` - The total number of questions marked correct on the user\u0027s first attempt at it."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * `numOfFlashcards` - The total number of unique questions utilized in the review session."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * A calculated percentage value generated from `correctAnswers` and `numOfFlashcards`."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "rachel170"
        },
        "content": "The calculated percentage value from a review session will be considered as the \u0027Review Statistics\u0027 in FlashNotes."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "rachel170"
        },
        "content": "To provide a measure of accuracy, the percentage value will be calculated as a `double` value, which will be rounded off "
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "rachel170"
        },
        "content": "to the nearest 1 decimal place for display or storage purposes."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "rachel170"
        },
        "content": "##### Relationship of Review Statistics and Deck"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "rachel170"
        },
        "content": "To further help the user keep track of their topic mastery, FlashNotes will save the calculated percentage from the "
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "rachel170"
        },
        "content": "last review session initiated in the deck to the `Deck` class, which will be displayed in the Main Mode of FlashNotes, "
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "rachel170"
        },
        "content": "under the relevant Deck\u0027s name."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "rachel170"
        },
        "content": "Review Statistics will be saved as the `resultStatistics` attribute as a String in the current `Deck` class "
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "rachel170"
        },
        "content": "design implementation. As a String, it can be easily retrieved and displayed to the user through the UI component."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "rachel170"
        },
        "content": "As such, only review sessions initiated from an existing deck will be saved to the relevant deck."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "rachel170"
        },
        "content": "In the event that a user initiated a review session for all of FlashNotes\u0027 flashcards, the review statistics will only"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "rachel170"
        },
        "content": "be generated and displayed for the user\u0027s benefit, but not save to FlashNotes."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "rachel170"
        },
        "content": "##### Extending Storage to Include Deck"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "rachel170"
        },
        "content": "Seeing as FlashNotes already saves Flashcard data for the user, it seemed reasonable to expand the storage component to "
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "rachel170"
        },
        "content": "save FlashNotes\u0027 deck data as well, since it will also allow the user to better track their topic\u0027s mastery if they can "
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "rachel170"
        },
        "content": "view their last review session\u0027s statistic for the deck whenever they open FlashNotes."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "rachel170"
        },
        "content": "###### Design Consideration: Storage Implementation for Deck"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* **Alternative 1 (current choice):** Expand the current Storage implementation to include `Deck` data instead of only saving `Flashcard` data."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "rachel170"
        },
        "content": "  * Pros: Partial implementation by teammates already exist."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "rachel170"
        },
        "content": "  * Pros: Implementation can provide base code for future addition to the `Deck` class."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "rachel170"
        },
        "content": "  * Cons: Design and implementation for `Deck` and `UniqueDeckList` is not concrete yet. Changes done now may clash with future changes to the classes."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "rachel170"
        },
        "content": "* **Alternative 2:** Store review statistics as an attribute of Tag"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "rachel170"
        },
        "content": "  * Pros: Easier to implement, simply expand tag feature to include review statistics data of the deck that the tag is representing."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "rachel170"
        },
        "content": "  * Cons: Will result in storing several repetitions of the data since it is an add-on to each instance of a unique tag in the json file. This can needlessly take up more space if there are a huge amount of flashcards and only a few decks.  "
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "rachel170"
        },
        "content": "##### Returning to Card Mode from Review mode"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "rachel170"
        },
        "content": "Upon completing the review session, a new command (`endReview`) was added to FlashNotes to allow the user to return to "
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "rachel170"
        },
        "content": "the main window of FlashNotes that displays the Card Mode they initiated the review session from. This is to allow the "
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "rachel170"
        },
        "content": "user to easily continue using FlashNotes should they wish to leave the Review Mode for any reason."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "rachel170"
        },
        "content": "##### Implementation"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "rachel170"
        },
        "content": "To support the above features, the following code changes were added:"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "rachel170"
        },
        "content": "A new command have been added to FlashNotes to allow return to Card Mode from Review Mode:"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "rachel170"
        },
        "content": "* `endReview` - A command that closes the review session\u0027s window at the end of the review session, and handles the ending process of review session. (Only available in review mode.)"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "rachel170"
        },
        "content": "To support the storage of each deck\u0027s review statistic, a new class has been added to the Storage component in FlashNotes:"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "rachel170"
        },
        "content": "* `JsonAdaptedDeck` object contain two variable for Deck Storage, `String deckName` to identify the deck, and `String resultStatistics` to contain the deck\u0027s review statistics."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "rachel170"
        },
        "content": "* `JsonAdaptedDeck#updateModel(FlashNotes flashNotes)` is a method used to update the generated model from reading the flashcard data with the deck\u0027s data. It depends on `FlashNotes#updateDeckPerformanceScore(Double reviewScore, String deckName)` to update the generated model with the deck data from the save file."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "rachel170"
        },
        "content": "`JsonSerializableFlashNotes` object has been adjusted to depend on a list of `JsonAdaptedDeck` objects to read and write "
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "rachel170"
        },
        "content": "each deck\u0027s data to the FlashNotes save file."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "rachel170"
        },
        "content": "Additionally, the following operations have been implemented to support the storage of result statistics feature:"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "rachel170"
        },
        "content": "* Model component:"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    * `FlashNotes#updateDeckPerformanceScore(Double reviewScore, String deckName)` - Updates the reviewStatistics attribute of a specific deck (through `deckName`) with the given Double value (`reviewScore`)."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    * `FlashNotes#getUniqueDeckList()` - Return the FlashNotes\u0027 model\u0027s `UnqiueDeckList`."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    * `UniqueDeckList#findDeck(String deck)` - Returns an existing `Deck` object from its `internalList` with the same `deckName` as the given String input. If no such `Deck` object exist, a `null` object is returned instead."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "rachel170"
        },
        "content": "* UI component:"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    * `IndividualFlashcard#displayStatistics()` - Calculates the user\u0027s review session\u0027s score, updates the model with the generated statistics and update display at the end of the review session."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "rachel170"
        },
        "content": "Further more, the following operations have been adjusted to support the feature:"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "rachel170"
        },
        "content": "* `Storage#saveFlashNotes(ReaOnlyFlashNotes flashNotes)` - This operation, and all methods dependent on it, has been expanded to accept an additional parameter `UniqueDeckList decklist` to facilitate the saving of the deck data in FlashNotes."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "rachel170"
        },
        "content": "* `FlashNotes#resetData(ReadOnlyFlashNotes newData)` - This operation has been adjusted to include the recreation of the FlashNotes model\u0027s deck data read from Storage."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "rachel170"
        },
        "content": "To provide the UI display and changes related to review statistics, the following UI component have received a few code additions:"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "rachel170"
        },
        "content": "* `DeckCard` - Changed constructor method to account for display of review statistics of the last review session in that deck."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "rachel170"
        },
        "content": "* `ReviewWindow#handleExit()` - Adjusted to return to card view upon execution of `endReview` command."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "rachel170"
        },
        "content": "###### Basic Description of the Backend Process of the End of a Review Session:"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "rachel170"
        },
        "content": "1. User reaches the end of the review session (by correctly answering the last of the questions that has not been answered yet or has been answered wrongly before). "
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "rachel170"
        },
        "content": "1. The UI component will calculate the user\u0027s score by generating the percentage of cards the user answered correctly on the first try during the session."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "rachel170"
        },
        "content": "1. The generated review session statistic is conveyed to the Model component, where the `FlashNotes` model updates the relevant deck with the generated value."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "rachel170"
        },
        "content": "1. FlashNotes\u0027 UI component will display the review statistics generated as part of the end of review session message."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "rachel170"
        },
        "content": "1. User enters `endReview` command to end the review session."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "rachel170"
        },
        "content": "1. The processing of the `endReview` command through the Parser component will lead to the command execution in Logic component and trigger the save function of FlashNotes, thus updating FlashNote\u0027s json file with the new review session statistic for the deck."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "rachel170"
        },
        "content": "###### Corresponding Sequence Diagram for `endReview`:"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "rachel170"
        },
        "content": "The following sequence diagram shows how the endReview command operation works:"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "![EndReviewSequenceDiagram](images/EndReviewSequenceDiagram.png)"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "### Implementation of Critical Classes:"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "foongsq"
        },
        "content": "#### Implementation of CommandResult"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "foongsq"
        },
        "content": "FlashNotes interacts with users using the `CommandResult` object. When users pass commands into FlashNotes, FlashNotes "
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "foongsq"
        },
        "content": "will execute those commands and give users feedback according to the commands passed in. "
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "foongsq"
        },
        "content": "`CommandResult` objects are generated when Command objects are executed by the `LogicManager#execute(…)` method. Upon "
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "foongsq"
        },
        "content": "generation, all CommandResult objects contain a string `feedbackToUser` which contains success or error messages that will"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "foongsq"
        },
        "content": "be shown to the user. This CommandResult object is then passed to UI classes, such as `MainWindow` and `ReviewWindow`. The "
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "foongsq"
        },
        "content": "UI classes will then show this `feedbackToUser` in the `ResultDisplay` box."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "Upon execution of the Commands, users might request a change of modes, such as moving from Main Mode to Card Mode, or "
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "Card Mode to Review Mode. This information is passed to the UI classes using the `CommandResult` object too. Some commands"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "foongsq"
        },
        "content": "such as the `enterDeck` or `review` will generate a `CommandResult` object with more arguments such as `showHelp`, `exit`,"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "foongsq"
        },
        "content": "`startReview`. These arguments will be accessed by UI classes using the public getter methods `CommandResult#isShowHelp()`,"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "foongsq"
        },
        "content": "`CommandResult#isExit()` etc. The correct UI screens will be rendered accordingly by respective methods such as "
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "foongsq"
        },
        "content": "`DeckCardListRoot#handleExit()`, `ReviewWindow#handleHelp()` etc."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "foongsq"
        },
        "content": "The following class diagram shows how the UI classes are related to the commandResult class, and their relevant methods."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "foongsq"
        },
        "content": "![UiCommandResultClassDiagram](images/UiCommandResultClassDiagram.png)"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "#### Implementation of FlashNotesParser"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "FlashNotesParser is the overall parser that is used to handle the commands from any of the command boxes in the various modes."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "As a result, it needs to be able to take in the commands and also know what are the modes that it is in in order to trigger the correct commands in the 3 different modes."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "Note that in our project architecture, the Model component is responsible for storing the state and data related to the application in general. "
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "FlashNotesParser is purely an object that determines the commands that are accepted based on the current state of the Model\u0027s underlying FlashNotes object."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "While inside of the `LogicManager#execute(...)` method, the method checks with Model for the booleans related to mode."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "Afterwards, FlashNotesParser takes in the mode checking booleans obtained from model in `FlashNotesParser#parseCommand(...)`. "
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "The booleans regarding the modes enables FlashNotes to be able to decide which of the 3 following methods to use:"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "* `parseCommandInReviewMode(...)`"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "* `parseCommandInMainMode(...)`"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "* `parseCommandInCardMode(...)`"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "##### Corresponding activity diagram for `FlashNotesParser`:"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "The following activity diagram shows how the FlashNotesParser works:"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "![FlashNotesParserSequenceDiagram](images/FlashNotesParserActivityDiagram.png)"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "* NUS FASS student who likes to write down lecture notes"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "* practices active learning techniques via flash cards"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "**Value proposition**: manage, read and create flashcards faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                    | I want to …​                     | So that I can…​                                                        |"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "| `* * *`  | new user                                   | see usage instructions         | refer to instructions when I forget how to use the App                 |"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "foongsq"
        },
        "content": "| `* * *`  | user                                       | add a new deck                 |                                                                        |"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "foongsq"
        },
        "content": "| `* * *`  | user                                       | open a deck                    | see what flashcards I have created in that deck so far                 |"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "foongsq"
        },
        "content": "| `* * *`  | user                                       | delete a deck                  | get rid of decks of flashcards that I no longer need quickly           |"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "foongsq"
        },
        "content": "| `* * `   | user                                       | rename a deck                  | organize my decks better                                               |"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "| `* * *`  | user                                       | add a new card                 |                                                                        |"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "| `* * *`  | user                                       | delete a card                  | remove entries that I no longer need                                   |"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "| `* * *`  | user                                       | find a card by keyword         | locate certain cards without having to go through the entire list      |"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "foongsq"
        },
        "content": "| `* * *`  | user                                       | review a deck                  | test my knowledge about the content of the cards in that deck          |"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "foongsq"
        },
        "content": "| `* * *`  | user                                       | mark a flashcard as right or wrong | keep track of which cards I have already mastered and which cards I still need to review again |"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "foongsq"
        },
        "content": "| `* * *`  | user                                       | see how many cards I got correct after a review session | track my topics mastery and feel a sense of accomplishment for studying efficiently |"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "| `* `    | user                                       | hide old cards                 | clear clutter when there are too many cards in the deck                |"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "| `*`      | user with many related cards in the app    | nest the card decks by tags    | locate a cards of the same group easily when reviewing                 |"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "(For all use cases below, the System is the FlashNotes and the Actor is the user, unless specified otherwise)"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "##### Use case: UC01 - Create new Deck"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "**Precondition**: User is in the Main Mode, and is not in review mode."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "1. User creates a new deck."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "1. FlashNotes shows the newly created deck."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    Use Case ends."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "**Extension:**"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* 1a. Deck name already exist."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    * 1a1. FlashNotes shows an error message "
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    "
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    "
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "##### Use case: UC02 - Open a Deck"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "**Precondition**: User is in the Main Mode."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "1. User opens a deck"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "1. FlashNotes shows a list of cards in the deck."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* 1a. User opens a deck that does not exist."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    * 1a.1. FlashNotes shows an error message. "
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    "
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    "
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* 2a. Deck is empty."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    * 2a1. FlashNotes displays an empty list."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    "
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    "
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "##### Use case: UC03 - Delete a Deck"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "**Precondition**: User is in the Main Mode."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "1. User deletes a deck."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "1. FlashNotes deletes the deck and shows the updated list of decks."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    Use Case ends."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "**Extension:**"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* 2a. Deck does not exist in FlashNotes."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    * 2a1. FlashNotes shows an error message."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    Use Case ends.   "
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    "
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "##### Use case: UC04 - Rename a Deck"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "**Precondition**: User is in the Main Mode."
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "1. User renames a deck."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "1. FlashNotes shows the deck with the new name."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    Use Case ends."
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "**Extension:**"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* 2a. User renames deck to the same name as an already existing deck."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    * 2a1. FlashNotes shows an error message. "
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    "
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    Use Case ends.    "
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    "
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "##### Use case: UC05 - Show all cards"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "**Precondition**: User is in the Main Mode."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "1. User requests to see all the cards."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "1. FlashNotes shows all the cards to the user."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    "
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    Use Case ends."
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "Extensions"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    "
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* 2a. User adds a card."
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    * 2a1. FlashNotes adds the card into a default deck."
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    "
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    Use Case ends."
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "##### Use case: UC06 - Add a card"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "**Precondition**: User is in Main Mode."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "1. User \u003cu\u003eopens a deck (UC02)\u003c/u\u003e."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "1. User adds a card."
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "1. FlashNotes adds the card into the current deck."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* 2a. There is a duplicate card."
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    * 2a1. FlashNotes shows an error message."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    "
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    Use case resumes at Step 2."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "##### Use case: UC07 - Delete a Card"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "**Precondition**: User is in the Main Mode, and is not in review mode."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "1. User \u003cu\u003eopens a deck (UC02)\u003c/u\u003e."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "1. User requests to delete a card "
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "1. FlashNotes deletes the card."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    "
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* 2a. Card does not exist in FlashNotes."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    * 2a1. FlashNotes shows an error message."
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    "
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    Use case resumes at Step 2."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "##### Use case: UC08 - Edit a card"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "**Precondition**: User is in Main Mode."
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "1. User \u003cu\u003eopens a deck (UC02)\u003c/u\u003e."
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "1. User requests to edit a specific card in the deck."
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "1. FlashNotes edits the card."
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* 2a. Card does not exist in FlashNotes."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    * 2a1. FlashNotes shows an error message."
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    "
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case resumes at step 2."
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "##### Use case: UC09 - Find keywords in card"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "**Precondition**: User is in Main Mode."
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "1. User \u003cu\u003eopens a deck (UC02)\u003c/u\u003e."
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "1. User searches for keyword(s) of cards in the deck."
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "1. FlashNotes shows the cards that contain the keyword in the question."
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* 2a. The keyword does not exist in any card."
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    * 2a1. FlashNotes shows an empty list."
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    "
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    "
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "##### Use case: UC10 - Seeing a list of cards in the deck"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "**Precondition**: User is in Card mode."
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "1. User \u003cu\u003efind for cards using keyword(s) (UC09)\u003c/u\u003e."
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "1. User requests to see a list of cards in the deck again."
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "1. FlashNotes shows the list of all cards in the deck again."
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "##### Use case: UC11 - Return to Main Mode"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "**Precondition**: User is in Card mode."
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "1. User requests to return to Main Mode."
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "1. FlashNotes shows the list of decks to the user."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    Use Case ends."
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "##### Use case: UC12 - Review cards"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "**Precondition**: User is in Main Mode."
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "1. User \u003cu\u003eopens a deck (UC02)\u003c/u\u003e."
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "1. User requests to start a review on the cards shown."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "1. FlashNotes starts a review session."
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "1. FlashNotes displays a card with only the question to the user."
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "1. User flips the card to see the answer."
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "1. FlashNotes displays the answer to the user."
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "1. User marks the card as correct or wrong."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "1. Repeat steps 3 to 6 until there are no more cards."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "1. FlashNotes displays the statistics of the review. "
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "1. User ends the review."
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "1. FlashNotes returns User back to the original page."
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "**Extension:**"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* 7a. User correct remembers the answer of the flashcard."
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    * 7a1. User marks the card as correct."
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    * 7a2. FlashNotes shows next card."
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    "
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "   Use case resumes from Step 4."
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* 7b. User unable to remember the correct answer of the flashcard."
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "   * 7b1. User marks card as wrong."
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "   * 7b2. FlashNotes adds card back into the lists of card to be reviewed again."
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "   * 7b3. FlashNotes shows the next card."
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "   "
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "   Use case resumes from Step 4."
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* *a. User ends the review session prematurely."
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    * *a1. FlashNotes does not show user the Review statistics."
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    * *a2. FlashNotes does not update the Review statistics of the deck reviewed."
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    "
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    Use case resumes from Step 10."
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "2.  Should be able to hold up to 1000 cards without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "4.  Interactions should not take more than 2 seconds."
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "5.  The user can directly edit the data file."
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "6.  Should be usable by someone not used to CLI."
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* **FlashNotes**: The software that stores flashcards and decks."
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* **Flashcard**: A card with a question and answer."
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* **Deck**: A collection of flashcards."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* **Main Mode**: A mode which displays a list of decks"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* **Card Mode**: A mode which displays a list of cards"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* **Review Mode**: The mode in which users can navigate through flashcards to review, and test their knowledge on the content of those cards."
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* **Tag**: A note to indicate which deck the card belongs to."
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* **Review card limit**: The maximum number of cards that can be reviewed in a single review session."
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "   1. Download the jar file and copy into an empty folder."
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "   2. Double-click the jar file Expected: Shows the GUI with a set of sample flashcards. The window size may not be optimum."
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "   2. Re-launch the app by double-clicking the jar file. \u003cbr\u003e"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "        Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "       "
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "### Creating a deck"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "1. Creating a deck."
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    1. Prerequisites: User is in Main mode."
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    "
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    1. Test case: `addDeck n/Economics` \u003cbr\u003e"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        Expected: Creates a new empty deck called \u0027Economics\u0027 and adds it to the list of decks displayed."
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "### Editing a deck name"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "1. Editing a deck name."
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "   1. Prerequisites: User is in Main Mode and FlashNotes contains a deck called \"Economics\" at index 1 and a deck called \"Singapore."
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "   1. Test case: `editDeckName 1 n/Econs`\u003cbr\u003e"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        Expected: The name of deck at Index 1 is changed to Econs."
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "   2. Test case: `editDeckName 1 n/Singapore` \u003cbr\u003e"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        Expected: Deck name at index 1 is not changed. Error message is shown that the deck \"Singapore\" already exists."
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "### Deleting a deck"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "1. Deleting a deck."
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "   1. Prerequisites: User is in Main mode and FlashNotes contains at least one deck."
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "   2. Test case: `deleteDeck 1` \u003cbr\u003e"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        Expected: First deck is deleted from the list."
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "   3. Test case: `deleteDeck 0` \u003cbr\u003e"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        Expected: No deck is deleted. Error details shown in the status message. "
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "### Setting and checking the review card limit"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "1. Setting the maximum number of cards that can be reviewed in a single review session."
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    1. Prerequisites: User is in Home screen or Card screen."
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    "
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    1. Test case: `setReviewLimit 20` \u003cbr\u003e"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "       Expected: The message \"Review card limit successfully updated! Review limit is now 20.\" should appear in the result display box."
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "       "
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    1. Test case: `setReviewLimit 0` \u003cbr\u003e"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "       Expected: The message \"Review card limit must be an integer greater than 0 and smaller than 2147483648.\" should appear in the result display box."
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        "
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    1. Test case: `setReviewLimit all` \u003cbr\u003e"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "       Expected: The message \"Review card limit successfully updated! There is now no review limit.\" should appear in the result display box."
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "       "
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    1. Test case: `setReviewLimit 20` from the review window \u003cbr\u003e"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "       Expected: The message \"This command is not available in review mode. Please exit the review mode by typing \u0027endReview\u0027 and try again.\" should appear in the result display box."
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "1. Checking the maximum number of cards that can be reviewed in a single review session."
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    1. Prerequisites: User is in Home screen or Card screen."
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    "
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    1. Test case: `checkReviewLimit` \u003cbr\u003e"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "       Expected: The message \"Review card limit is 20!\" should appear in the result display box. (assuming review limit is 20)"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "       "
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    1. Test case: `checkReviewLimit 7` \u003cbr\u003e"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "       Expected: The message \"This command contains more arguments than necessary. Please try the command again without any arguments: checkReviewLimit\" should appear in the result display box."
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "### Entering a deck"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "1. Entering a deck."
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "   1. Prerequisites: Flashnotes have decks with names \u0027Singapore\u0027 and \u0027Malaysia\u0027."
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    "
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "   2. Test case: `enterDeck Singapore` \u003cbr\u003e"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "       Expected: All cards with the tag \u0027Singapore\u0027 will be shown. Cards with tags \u0027Malaysia\u0027 will not be shown.    "
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "   3. Test case: `enterDeck singapore` \u003cbr\u003e"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "       Expected: None of the cards are shown (as the keyword is case-sensitive). "
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "   4. Test case: `enterDeck Singapore Malaysia` \u003cbr\u003e"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "       Expected: No cards are shown as there is no deck with a name \u0027Singapore Malaysia\u0027.   "
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "### Listing all flashcards"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "1. Shows a list of all flashcards, and enters card mode."
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    1. Prerequisites: User is in Home mode."
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    "
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    2. Test case: `listAll` \u003cbr\u003e"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        Expected: The newly rendered list of flashcards can be seen. The list contains all flashcards currently stored "
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        in FlashNotes irrespective of the deck."
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "### Adding a card"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "1. Adding a card in a normal deck created by user."
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    1. Prerequisites: Enter a deck using the command `enterDeck DECK_NAME`. "
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    "
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    2. Test case: `addCard q/question1 a/answer1` \u003cbr\u003e"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        Expected: The specified card is added and shown to the user."
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        "
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "1. Adding a card while in the list of all flashcards."
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    "
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    1. Prerequisites: Enter the list of all flashcards using the command `listAll`."
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    "
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    2. Test case: `addCard q/question1 a/answer1` \u003cbr\u003e"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        Expected: The flashcard is added to the list of flashcards shown."
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        The specified card is added to a deck called \"Default\". "
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        The \"Default\" deck will be created in the Main Mode if the deck does not exists.       "
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "### Editing a card"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "1. Editing a card while in card mode."
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    1. Prerequisites: User is in Card Mode with at least one card in the list."
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    "
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    2. Test case: `editCard 2 a/Lee Kuan Yew` \u003cbr\u003e"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        Expected: The answer for the second card is changed to \u0027Lee Kuan Yew\u0027."
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        "
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    3. Test case: `editCard 2 q/Who is Singapore\u0027s prime minister? a/Lee Hsien Loong` \u003cbr\u003e"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        Expected: The question for the second card is changed to \u0027Who is Singapore\u0027s prime minister?\u0027 and the answer "
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        is changed to \u0027Lee Hsien Loong\u0027."
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        "
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    4. Test case: `editCard 0 q/Who is Singapore\u0027s prime minister?`\u003cbr\u003e"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        Expected: No card is edited. Error details shown."
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "### Deleting a card"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "1. Deleting a card in card mode."
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "   1. Prerequisites: User is in Card Mode with at least one card in the list."
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "   2. Test case: `deleteCard 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "      Expected: First card is deleted from the list. Details of the deleted card shown in the status message."
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "   3. Test case: `deleteCard 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "      Expected: No card is deleted. Error details shown in the status message."
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "   4. Other incorrect delete commands to try: `deleteCard`, `deleteCard x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "      Expected: Similar to previous.   "
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "      "
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "### Finding a flashcard"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "1. Finding a flashcard in Card mode."
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    1. Prerequisites: User is in Card mode. "
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    "
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    1. Test case: `find history` \u003cbr\u003e"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        Expected: The flashcard(s) with questions that contain the word \u0027history\u0027 will be displayed."
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        "
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "### Listing all flashcards in card mode"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "1. List flashcards in Card Mode."
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    1. Prerequisites: User is in Card Mode. User has successfully executed the find command."
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    "
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    1. Test case: `list` \u003cbr\u003e"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        Expected: User will go back to the deck of cards they were viewing before they executed the find command."
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "### Going back home"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "1. Going back to Main Mode from Card Mode."
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    "
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    1. Prerequisites: User is in card mode."
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    "
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    1. Test case: `home` \u003cbr\u003e"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "       Expected: The list of orange decks in the Main Mode can now be seen."
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "foongsq"
        },
        "content": "### Reviewing a deck of cards"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "1. Opening the review window."
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    1. Prerequisites: User is in card screen."
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    "
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    1. Test case: `review` \u003cbr\u003e"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "foongsq"
        },
        "content": "       Expected: A new window should pop up containing a command box, result display, and the question on the first flashcard."
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    "
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    1. Test case: `review 7` \u003cbr\u003e"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "foongsq"
        },
        "content": "       Expected: The message \"This command contains more arguments than necessary. Please try the command again without any arguments: review\" should appear in the result display box."
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        "
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "1. Flipping a card that is being reviewed."
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    1. Prerequisites: User is in review mode, and the review session is still ongoing."
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    "
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    1. Test case: `f` when the card is showing the question\u003cbr\u003e"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        Expected: The card should be flipped to show the answer for this question."
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        "
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    1. Test case: `f` when the card is showing the answer \u003cbr\u003e"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        Expected: The card should be flipped to show the question for this answer."
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "1. Marking flashcard that is being reviewed as correct."
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    1. Prerequisites: User is in review mode, and the review session is still ongoing."
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    "
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    1. Test case: `c` when the card is showing the question\u003cbr\u003e"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        Expected: Error Message to indicate that the card should be flipped first before it can be marked as correct."
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    "
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    1. Test case: `c` when the card is showing the answer \u003cbr\u003e"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        Expected: If the card wasn\u0027t the last card in the list, it should show the question of the next card and the progress in the progress bar should increase. Otherwise, it should show the review statistics."
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "1. Marking flashcard that is being reviewed as wrong."
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    1. Prerequisites: User is in review mode, and the review session is still ongoing."
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    "
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    1. Test case: `w` when the card is showing the question\u003cbr\u003e"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        Expected: Error Message to indicate that the card should be flipped first before it can be marked as wrong."
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    "
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    1. Test case: `w` when the card is showing the answer \u003cbr\u003e"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        Expected: It should show the question of the next card and the progress bar should still have the same progress."
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        "
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "1. Ending a review session."
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    1. Prerequisites: User is in review mode."
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    "
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    1. Test case: `endReview` \u003cbr\u003e"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "       Expected: Review Window closes, and you are returned to the Card Mode you started the review session from."
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "foongsq"
        },
        "content": "-------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "foongsq"
        },
        "content": "## **Appendix: Effort**"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "foongsq"
        },
        "content": "### Challenge 1: UI Modes"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "foongsq"
        },
        "content": "At first, the AddressBook3 (AB3) only had 1 interface for users, which is the Main Window that shows a list of people and "
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "foongsq"
        },
        "content": "their details. When developing our flashcard application, we struggled to find a way for users to organize and review"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "foongsq"
        },
        "content": "their flashcards effectively with the single interface that came with AB3. "
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "foongsq"
        },
        "content": "The easiest method we explored to achieve this was to modify the `list` command to let users view their flashcards in specific "
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "foongsq"
        },
        "content": "decks, and show the cards one by one when users want to review them. However, we were not satisfied with the visual effect of "
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "foongsq"
        },
        "content": "this solution. "
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "foongsq"
        },
        "content": "The next method we explored was to **implement 3 different interfaces** for our application, the *Main* mode, the *Card*"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "foongsq"
        },
        "content": "mode, and the *Review* mode. **Different commands are allowed** in the different modes. "
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "foongsq"
        },
        "content": "Implementing this required us to **redesign the entire UI component** into something with more layers of "
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "foongsq"
        },
        "content": "abstraction and complexity. In doing so, we encountered some problems with the GUI settings not being saved properly and also "
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "foongsq"
        },
        "content": "sizing issues with different windows on different operating systems. However, we managed to resolve them in the and ultimately, "
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "foongsq"
        },
        "content": "we ended up with a **highly effective and user-friendly** flashcard application."
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "rachel170"
        },
        "content": "### Challenge 2: One object type versus Two object types with a perceived composition relationship"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "rachel170"
        },
        "content": "At the start of our team project, refactoring AB3 into FlashNotes resulting in the `Person` object changing into "
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "rachel170"
        },
        "content": "the `Flashcard` object. As out project progressed, there was a need to include a second object, which was the `Deck`"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "rachel170"
        },
        "content": "object in the Model component of FlashNotes. Our team faced several challenges with our choice to implement the `Deck` class."
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "rachel170"
        },
        "content": "Due to the perceived composition relationship between `Deck` and `Flashcard` and the chosen design for `Deck` implementation, "
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "rachel170"
        },
        "content": "commands that result in the change of a `Deck` object (e.g. editting deck name or deleting a deck) meant that there was "
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "rachel170"
        },
        "content": "a need to look through all of the `Flashcard` objects in FlashNotes to carry out the necessary changes regarding the `Deck`"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "rachel170"
        },
        "content": "object depending on the command issued."
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "rachel170"
        },
        "content": "On top of that, as part of our **Review Statistics Feature**, we wanted to be able to save the data in the `Deck` class as well. "
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "rachel170"
        },
        "content": "To support this, we had to expand the old Storage implementation from AB3 to include the addition of the data in the"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "rachel170"
        },
        "content": "`Deck` class. "
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "rachel170"
        },
        "content": "To prevent confusion, there was a need to ensure the implementation saved all the decks\u0027 data in FlashNotes"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "rachel170"
        },
        "content": "to the existing save file used for the `Flashcard` data. This was a challenge as not only did we need to implement new "
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "rachel170"
        },
        "content": "methods and classes to facilitate the saving of `Deck` data to the `flashnotes.json` save file, we also had to make "
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "rachel170"
        },
        "content": "adjustments to existing code, so that we will be able accurately read in the newly stored `Deck` data from the save file"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "rachel170"
        },
        "content": "whenever FlashNotes is launched."
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "rachel170"
        },
        "content": "### Challenge 3: Increment of the number of accessible features"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "rachel170"
        },
        "content": "There are at least 4 accessible commands in each of the three modes of FlashNotes, in comparison to the 7 total commands in AB3."
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * Main Mode has 10 accessible commands unique to it."
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * Card Mode has at least 10 accessible commands unique to it."
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * Review Mode has 4 accessible commands unique to it."
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "rachel170"
        },
        "content": " "
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "rachel170"
        },
        "content": "Refer to the [User Guide\u0027s Command Summary](https://ay2021s1-cs2103t-t15-2.github.io/tp/UserGuide.html#command-summary)"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "rachel170"
        },
        "content": "section for the entire listing of all the commands."
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "rachel170"
        },
        "content": "### Achievement of Project"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "rachel170"
        },
        "content": "1. User story - Of the 13 [User Stories](https://ay2021s1-cs2103t-t15-2.github.io/tp/DeveloperGuide.html#user-stories) "
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "rachel170"
        },
        "content": "listed, we managed to fulfill 12 of them in various ways."
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "rachel170"
        },
        "content": "1. Maintain the simplicity and cohesiveness of the features from the original AB3 project."
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "rachel170"
        },
        "content": "1. Provided extensive unit and manual testing on the product, making it reliable and efficient for production usage."
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "rachel170": 167,
      "pengxiangg": 328,
      "chuyouchia": 160,
      "foongsq": 134,
      "-": 236,
      "Sruthisarav": 242
    }
  },
  {
    "path": "docs/Documentation.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Documentation guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "**Setting up and maintaining the project website:**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "* We use [**Jekyll**](https://jekyllrb.com/) to manage documentation."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "* The `docs/` folder is used for documentation."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "* To learn how set it up and maintain the project website, follow the guide [_[se-edu/guides] **Using Jekyll for project documentation**_](https://se-education.org/guides/tutorials/jekyll.html)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "**Style guidance:**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rachel170"
        },
        "content": "* Follows the [**_Google developer documentation style guide_**](https://developers.google.com/style)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "* Also relevant is the [_[se-edu/guides] **Markdown coding standard**_](https://se-education.org/guides/conventions/markdown.html)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "**Diagrams:**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* See the [_[se-edu/guides] **Using PlantUML**_](https://se-education.org/guides/tutorials/plantUml.html)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "**Converting a document to the PDF format:**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* See the guide [_[se-edu/guides] **Saving web documents as PDF files**_](https://se-education.org/guides/tutorials/savingPdf.html)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "rachel170": 1,
      "-": 24,
      "Sruthisarav": 1
    }
  },
  {
    "path": "docs/SettingUp.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Setting up and getting started"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up the project in your computer"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "First, **fork** this repo, and **clone** the fork into your computer."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to use Intellij IDEA (highly recommended):"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Verify the setup**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "   1. Run the `seedu.flashnotes.Main` and try a few commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   1. [Run the tests](Testing.md) to ensure they all pass."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "## Before writing code"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the coding style**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/checkstyle.html) to set up IDEA\u0027s coding style to match ours."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Set up CI**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Learn the design**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [AddressBook’s architecture](DeveloperGuide.md#architecture)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Do the tutorials**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   These tutorials will help you get acquainted with the codebase."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Tracing code](tutorials/TracingCode.md)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Removing fields](tutorials/RemovingFields.md)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Adding a new command](tutorials/AddRemark.md)"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 1,
      "-": 54
    }
  },
  {
    "path": "docs/Testing.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Testing guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Running tests"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 1: Using IntelliJ JUnit test runner**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run a subset of tests, you can right-click on a test package,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 2: Using Gradle**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  * Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-secondary\"\u003e:link: **Link**: Read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html) to learn more about using Gradle."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "## Types of tests"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This project has three types of tests:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Unit tests* targeting the lowest level methods/classes.\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "   e.g. `seedu.flashnotes.commons.StringUtilTest`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Integration tests* that are checking the integration of multiple code units (those code units are assumed to be working).\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "   e.g. `seedu.flashnotes.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together.\u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "   e.g. `seedu.flashnotes.logic.LogicManagerTest`"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 3,
      "-": 33
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "Welcome to the FlashNotes User Guide."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "FlashNotes is a **desktop app for text-based flashcards**, built for students who wish to utilise English flashcards for studying. FlashNotes is also optimized for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, FlashNotes will be faster than traditional GUI apps."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "Flashcards are one of the oldest forms of studying methods, but it is also remarkably difficult to keep track of the vast amount of content to study for. However, with FlashNotes, you can now keep track of your flashcards and their content with ease."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "FlashNotes allows you to organise your flashcards by topics or subjects using Decks. "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "FlashNotes utilises a studying technique known as [Active Recall](https://en.wikipedia.org/wiki/Active_recall), allowing you to test yourself using flashcards to check if you have mastered your content."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "Furthermore, FlashNotes will also keep track of your progress and show you an overview of how well you have mastered your content using flashcards."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "This User Guide is for user who have no prior knowledge on how to create and review flashcards using FlashNotes. We will teach you how create and manage your flashcards more efficiently, and how to review your flashcards for studying using FlashNotes. "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "We will provide you with all the various features and commands of FlashNotes, and its details. "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "To get started, head over to the [Quick Start](#quick-start) section."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "To see the summary of all our commands, go to the [Command Summary](#command-summary) section."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "Here\u0027s the Table of Contents for a brief overview of our User Guide, or for you to quickly access other sections of our User Guide."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "## Glossary"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* **Flashcard**: A flashcard shows a question and the answer to the question."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* **Decks**: A deck will contain flashcards."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* **Index**: The number at the start of each deck or flashcard."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* **Review**: A mode where only the question of the flashcard is shown; the answer will be hidden from you."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* **Prefix**: A reserved word that needs to be placed before your inputs to indicate the start of your input."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* :information_source:: Additional info"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* :warning:: Warning"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "## Understanding the 3 different modes:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "FlashNotes has 3 different modes, the main mode, card mode and review mode. Each mode has its own set of valid commands.  "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "You will always start in the Main Mode when you open FlashNotes."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foongsq"
        },
        "content": "### Mode 1: Main Mode"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "Contains a list of decks of flashcards. \u003cbr\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "Users can: "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "* View a list of decks"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "* Create, edit and delete decks"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "* Open a deck to view flashcards in it (Enters card mode)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "* List all flashcards from all decks"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "* Clear all decks"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "* Set maximum number of cards to review"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* View User Guide"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "* Exit the program"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "![Main Mode GUI Breakdown](images/Mainmode_GUIBreakdown.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foongsq"
        },
        "content": "### Mode 2: Card Mode"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foongsq"
        },
        "content": "Contains a list of flashcards."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foongsq"
        },
        "content": "\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foongsq"
        },
        "content": "Users can:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* Create, edit and delete flashcards"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* Find flashcards by question"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* Set maximum number of cards to review"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* Start a review session"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* Return to main mode"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* View User Guide"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* Exit the program"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foongsq"
        },
        "content": "![Card Mode GUI Breakdown](images/CardMode_GUIBreakdown.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foongsq"
        },
        "content": "### Mode 3: Review Mode"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foongsq"
        },
        "content": "Displays flashcards one at a time for users to review."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foongsq"
        },
        "content": "\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foongsq"
        },
        "content": "Users can:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* Flip the flashcard to view the answer"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* Mark a flashcard as correct or wrong to review the next card"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* View statistics at the end of the review session"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "![Review Mode GUI Breakdown](images/ReviewMode_GUIBreakdown.png)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick start"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rachel170"
        },
        "content": "1. Download the latest version of `flashnotes.jar` from [here](https://github.com/AY2021S1-T15-2/tp/releases)."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "1. Copy the file to the folder you want to use as the _home folder_ for your FlashNotes."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "1. For Mac Users: \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    * Open your \u0027System Preferences\u0027"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    * Click on \u0027Security \u0026 Privacy\u0027"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    * Click on \u0027Privacy\u0027 tab and click on \u0027Input Monitoring\u0027 section"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    * Enable java to monitor input from your keyboard even while using other apps as shown in the image below."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    ![Figure 1: Mac users System Preferences](images/systemPreference.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rachel170"
        },
        "content": "1. Double-click the file to start the app. A view similar to the one below should appear in a few seconds. Note how FlashNotes contains some sample data after initial launch.\u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "   ![Figure 2: Initial View with GUI Details](images/UG_GUIDetails.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rachel170"
        },
        "content": "   * **Command Box**: Where you input commands for FlashNotes."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rachel170"
        },
        "content": "   * **Result Box**: Where FlashNotes displays the resulting message to your last input in the Command Box."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rachel170"
        },
        "content": "   * **List of Decks**: Displayed list of decks currently in FlashNotes."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rachel170"
        },
        "content": "1. Type a command in the **Command Box** and press Enter to execute it. Some example commands you can try are:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rachel170"
        },
        "content": "   * **`addDeck`**`n/Languages `: Creates a new (empty) Deck named \u0027Languages\u0027."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "   * **`listAll`** : Lists all available flashcards in FlashNotes."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rachel170"
        },
        "content": "   * **`clear`** : Deletes all cards."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rachel170"
        },
        "content": "   * **`help`** : Opens the Help window."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rachel170"
        },
        "content": "   * **`enterDeck`**`Singapore `: Lists all cards inside the deck \u0027Singapore\u0027."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`exit`** : Exits the app."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "1. After executing each command, a success or failure message will be displayed in the **Result Box**. This will let you know if you have successfully executed the relevant commands or not. Given that you have provided the correct command prefixes, it can even provide additional information on why your command has failed.  \u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "1. Refer to the **Features** section below for the details of each command."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rachel170"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rachel170"
        },
        "content": "   "
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rachel170"
        },
        "content": "   **:information_source: About the sample data:**\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rachel170"
        },
        "content": "   "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rachel170"
        },
        "content": "   Initial launch of FlashNotes will result in the application loading in with our provided sample data. This is to accommodate first-time users wishing to familiarize themselves with FlashNotes before using it in-depth."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    "
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rachel170"
        },
        "content": "   Our provided sample data is not accurate nor necessary to the application. As such, you can easily delete the sample data in the following way:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rachel170"
        },
        "content": "   "
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rachel170"
        },
        "content": "   * Usage of the `clear` command.\u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     Clears all flashcard and deck data currently in FlashNotes. Refer to [Main Mode Features](#main-mode-features) for further details about the command."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rachel170"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "## Explanation of Command Formats used in features"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* Words in `UPPER_CASE` are the inputs to be supplied by you.\u003cbr\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "foongsq"
        },
        "content": "  e.g. in `addCard q/QUESTION a/ANSWER`, `QUESTION` is an input which can be `What is the question?`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* Inputs can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "  e.g. if the command specifies `q/QUESTION a/ANSWER`, `a/ANSWER q/QUESTION` is also acceptable."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "  "
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": " * Inputs in square brackets `[ ]` represent optional inputs for the command."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "## Main Mode Features"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "**:information_source: Quick Summary of Main Mode:**\u003cbr\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "* Main Mode primarily allows management of flashcard decks."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "* In order to manage flashcards directly, you will need to enter card mode using the `enterDeck` Command."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "### Entering a specified deck: `enterDeck`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "Enters card mode and shows your flashcards within your chosen deck."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "foongsq"
        },
        "content": "Format: `enterDeck DECKNAME`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "* `enterDeck Economics` return cards stored in the deck `Economics`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "Outcome expected:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "1. Enter the Enter Deck command into the command bar."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "![EnterDeckCommand](images/enterDeck_init.png)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "1. You will see the list of cards stored in the deck named Economics. The result display will also show the number of cards in the list."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "![EnterDeck](images/enterDeck_success.png)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ":warning: Things to note:"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "* The deck name entered is **case-sensitive**. e.g. `GET1025` will not match `get1025`"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* Only **full phrases** will be matched with the relevant decks e.g. `GE` will not match `GET1025`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "### Create a new Deck : `addDeck`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "Creates a new empty deck and adds to the list of decks displayed."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "Format: `addDeck n/DECKNAME`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "* `addDeck n/Singapore History` creates an empty deck called `Singapore History`."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "Outcome expected:"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "1. Enter the Add Deck Command into the command bar as per the example."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "![AddDeckCommand](images/addDeck_init.png)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "1. You should see the newly rendered list of decks. If there are more decks than the screen can fit, scroll down to find your newly created deck. It will be the last one in the list."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "![AddDeck](images/addDeck_success.png)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "1. After scrolling down, you will be able to see your newly created deck. It is empty though, waiting for you to fill it up with meaningful flashcards!"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "![AddDeck](images/addDeck_successScrolled.png)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ":warning: Things to note:"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* The deck name is **case-sensitive**. e.g. `GET1025` will not match `get1025`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* If there is a deck that has the **same existing** case-sensitive name, the deck will not be created because it would be considered a duplicate deck by the system."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* There is a **40 character limit** for `DECKNAME`."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* Reserved names (such as `list`) can\u0027t be used as `DECKNAME`."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "* If multiple name prefixes are in the command text, only the last one would be selected."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* If you are in *Card* mode, you need to navigate back to the *Main* Mode via the Home command before adding new deck."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "### Rename a new Deck : `editDeckName`"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "Edit a deck name and the tags of all corresponding cards in the deck. "
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "Note that all cards\u0027 tag correspond to the deck that they belong to."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "Format: `editDeckName INDEX n/NEWDECKNAME`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* `editDeckName 1 n/History` will change the name of the deck at index `1` to `History`."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "Outcome Expected:"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "1\\. Enter the Edit Deck Name command (`editDeckName 1 n/History`) into the command bar as shown in the example. The name of the deck at index 1 will be edited."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "![EditDeckNameBefore](images/EditDeckNameBefore.png)"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "2\\. When successful, you will see that the name of the deck at index 1 has been changed to History."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "![EditDeckNameAfter](images/EditDeckNameAfter.png)"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ":warning: Things to note:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* Edits the deck at the specified `INDEX`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* The index refers to the index number shown in the currently displayed list of decks."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* The `NEWDECKNAME` is case-sensitive."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* The `NEWDECKNAME` should not be a name that already exists as a deck."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "### Delete a new Deck : `deleteDeck`"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "Deletes the deck and all the associated cards in your specified deck."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "Format: `deleteDeck INDEX`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* `deleteDeck 3` will delete the deck at index 3 and all its corresponding cards."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "Outcome Expected:"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "1\\. Enter the deleteDeck command (`deleteDeck 3`) into the command box as shown in the example. The deck at the index 3 will be deleted."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "![DeleteDeckBefore](images/DeleteDeckBefore.png)"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "2\\. The deck at index 3 has been deleted and you will be shown the remaining set of decks (if any)."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "![DeleteDeckAfter](images/DeleteDeckAfter.png)"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ":warning: Things to note:"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* Deletes the deck at the specified `INDEX`"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* The index refers to the index number shown in the currently displayed list of decks."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "### List all flashcards : `listAll`"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "foongsq"
        },
        "content": "Shows a list of all flashcards, and enters card mode."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "Format: `listAll`"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "Outcome Expected:"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "1. Enter the `listAll` Command into the command bar as per the example."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "![ListCommand](images/list_init.png)"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "1. You should see the newly rendered list of flashcards. The list contains all flashcards currently stored in FlashNotes irrespective of the deck."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "![List](images/list_success.png)"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ":warning: Things to note:"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* Any cards added while in the list mode will be added to the `Default` deck."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* No additional inputs should be added behind the `listAll` command."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "* Note that starting a review in this screen will not attribute the review results to any deck. It will not be stored at the end of the review session."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "foongsq"
        },
        "content": "### Set card limit for review session : `setReviewLimit`"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "foongsq"
        },
        "content": "Sets the maximum number of cards that can be reviewed in a single review session."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "foongsq"
        },
        "content": " "
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "foongsq"
        },
        "content": "If the review card limit is greater than or equal to the number of cards in the deck you want to review:"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* Eg. Review limit is 20 while there are 10 cards in the deck, then all the cards in the deck will be "
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "foongsq"
        },
        "content": "shuffled and put in the queue for you to review in the review window."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "foongsq"
        },
        "content": "If the review card limit is smaller than the number of cards in the deck you want to review:"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* Eg. review limit is 3 while there are 10 cards in the deck, then 3 cards will be randomly chosen "
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "foongsq"
        },
        "content": "from the deck and put in the queue for you to review in the review window. "
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "foongsq"
        },
        "content": "Format: `setReviewLimit REVIEW_LIMIT`"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "foongsq"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* `setReviewLimit 20` sets a limit of 20 cards per review session."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* `setReviewLimit all` removes the card limit and lets you review all cards in the deck."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "foongsq"
        },
        "content": "Outcome Expected:"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "foongsq"
        },
        "content": "1. Enter the `setReviewLimit` command with the review limit you want into the command box as shown. "
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "foongsq"
        },
        "content": "![Set Review Limit Before Main](images/setReviewLimit3Before_Main.png)"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "foongsq"
        },
        "content": "1. When successful, the following success message will be displayed."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "foongsq"
        },
        "content": "![Set Review Limit After Main](images/setReviewLimit3After_Main.png)"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "1. You can check that the review limit is indeed 3 by entering the commands `enterDeck Singapore` (which contains 4 flashcards in total) and type `review`. (3 flashcards will be chosen randomly from the deck of 4 cards) Use the `f` and `c` commands to review the flashcards. After reviewing the 3rd flashcard, you should have reached the end of the review session as shown below."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "![Set Review Limit After](images/setReviewLimit3ReviewAfter.png)"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "foongsq"
        },
        "content": "1. When an invalid review limit is entered, the following error message will be displayed."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "foongsq"
        },
        "content": "![Set Review Limit Error Main](images/SetReviewLimitError_Main.png)"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "foongsq"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "foongsq"
        },
        "content": ":warning: Things to note:"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* The review limit can be an **integer greater than 0 and smaller than 2147483648**. The program doesn\u0027t handle any"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "foongsq"
        },
        "content": "review limit greater than 2147483647."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* The review limit can be the string `all`. (case-insensitive)"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* Note that when the review limit is set to `all`, the review limit is maximum number of cards you can review."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "foongsq"
        },
        "content": "(Which is 2147483647 cards)"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* This review card limit **applies to all decks** once it is set. "
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* This review card limit is **remembered by the program**. (You do not have to set the card limit "
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "foongsq"
        },
        "content": "again after he/she closes and reopens the application)"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* This command be used in both the *Main* and *Card* modes."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "foongsq"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "foongsq"
        },
        "content": "### Check card limit for review session : `checkReviewLimit`"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "foongsq"
        },
        "content": "Checks the maximum number of cards that can be reviewed in a single review session."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "foongsq"
        },
        "content": "Format: `checkReviewLimit`"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* `checkReviewLimit` "
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "foongsq"
        },
        "content": "Outcome Expected:"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "foongsq"
        },
        "content": "1. Enter the `checkReviewLimit` command into the command box as shown below. "
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "foongsq"
        },
        "content": "![Check Review Limit Before Main](images/CheckReviewLimitBefore_Main.png)"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "foongsq"
        },
        "content": "1. When successful, the following success message will be displayed."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "foongsq"
        },
        "content": "![Check Review Limit After Main](images/CheckReviewLimitAfter_Main.png)"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "foongsq"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "foongsq"
        },
        "content": ":warning: Things to note:"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* This review card limit **applies to all decks**. "
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* This review card limit is **remembered by the program**. (You do not have to set the card limit "
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "foongsq"
        },
        "content": "again after he/she closes and reopens the application)"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* This command be used in both the *Main* and *Card* modes."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "foongsq"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "foongsq"
        },
        "content": "### Viewing help : `help`"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "foongsq"
        },
        "content": "Shows a message explaining how to access the help page."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "foongsq"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "foongsq"
        },
        "content": "Outcome Expected:"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "foongsq"
        },
        "content": "1. The help window will show you the link to our user guide."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "foongsq"
        },
        "content": "![help message](images/helpMessage.png)"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "foongsq"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "foongsq"
        },
        "content": ":warning: Things to note:"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* This command be used in the *Main*, *Card* and *Review* modes."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "foongsq"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "### Clear all cards and decks : `clear`"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "Clears all decks and flashcards from the program."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "Outcome Expected:"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "1. Enter the Clear Command into the command bar as per the example."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "![ClearCommand](images/clear_init.png)"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "1. You should now see that FlashNotes is empty."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "![Clear](images/clear_success.png)"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ":warning: Things to note:"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* All cards and decks will be cleared."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "* No additional inputs should be added behind the clear command."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "* There is no undo command available in the system presently. Hence, the clear command is irreversible."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "### Exiting the program : `exit`"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "rachel170"
        },
        "content": "Exits FlashNotes."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "rachel170"
        },
        "content": "Outcome Expected:"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "foongsq"
        },
        "content": "1. User enters `exit` command in *Main* Mode. \u003cbr\u003e"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "rachel170"
        },
        "content": "![Exiting FlashNotes](images/UG_ExitCommand.png)"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "rachel170"
        },
        "content": "1. FlashNotes closes and saves all current data."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "rachel170"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "rachel170"
        },
        "content": ":warning: Things to note:"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* `exit` can be activated from *Main* Mode and *Card* Mode, but not *Review* Mode."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "rachel170"
        },
        "content": "* No additional inputs should be added behind the `exit` command."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "rachel170"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving the data"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "rachel170"
        },
        "content": "FlashNotes saves its data into hard disk automatically after every command,  so there is no need to save its data manually."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "foongsq"
        },
        "content": "The data of FlashNotes is contained in the `flashnotes.json` file. This saved file can be found in the `data` folder contained inside of the folder that you installed FlashNotes into."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "foongsq"
        },
        "content": "For further details on how to transfer FlashNotes data, please refer to the [FAQ](#faq) section."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "## Card Mode Features"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "**:information_source: Quick Summary of Card Mode:**\u003cbr\u003e"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* Card Mode primarily allows management of flashcards."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* In order to manage decks directly, need to return to main mode via home command."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "### Adding a flashcard : `addCard`"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "Adds a card to the currently stored notes."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "Format: `addCard q/QUESTION a/ANSWER`"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* `addCard q/Who was Singapore\u0027s First President? a/Yusok Ishak`"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "Outcome Expected:"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "1\\. Enter the addCard Command into the command box as shown. The question will precede after the prefix `q/` and the answer will precede after the prefix `a/`. "
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "![Add Card Before](images/AddCardBefore.png)"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "2\\. When successful, you will see the newly added flashcard at the bottom of the list."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "![Add Card After](images/AddCardAfter.png)"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "foongsq"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "foongsq"
        },
        "content": ":warning: Things to note:"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* There is a 140 character limit for QUESTION and ANSWER."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "foongsq"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "### Editing a flashcard : `editCard`"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "Edits an existing flashcard in the flashcard deck."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "Format: `editCard INDEX [q/QUESTION] [a/ANSWER] [t/TAG]`"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "*  `editCard 2 a/Lee Kuan Yew` Edits the answer of the 2nd flashcard to be `Lee Kuan Yew`"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "Outcome Expected:"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "1. Initial view of card mode. \u003cbr\u003e"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "![Initial View](images/editCardCommandStep1.png)"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "1. Type `editCard INDEX [q/QUESTION] [a/ANSWER]` into the command box and enter. \u003cbr\u003e"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "![Enter Edit Card Command](images/editCardCommandStep2.png)"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "1. The result of executing the editCard command. The question and answer of the selected flashcard would have "
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "changed. \u003cbr\u003e"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "![Result of Edit Card Command](images/editCardCommandStep3.png)"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ":warning: Things to note:"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "* Edits the flashcard at the specified `INDEX`. The index refers to the index number shown in the displayed desk list. The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "* Note that editing the tag of the card will cause the card to move to the Deck with the name exactly as per the new tag name."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* `TAG` refers to the deck which the card belongs to."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* When the `TAG` of the card is edited into a tag/deck that does not exist yet, FlashNotes will create that deck and place the flashcard into that deck."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "### Finding flashcards : `find`"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "Finds flashcards which contain any of the given keywords in their respective questions. "
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "Find returns full word matches, excluding punctuation."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "* `find history` returns `History of WWII` and `History of Cuban war of Independence`"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "* `find Business` returns `Business Management`"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "* `find conflict resolution` returns `Handling Conflict` and `Resolution`"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "Outcome Expected:"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "foongsq"
        },
        "content": "1. Enter the find Command into the command box as shown. "
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "foongsq"
        },
        "content": "![Find Before](images/FindCommandBefore.png)"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "1. When successful, the flashcard(s) with questions that contains the matching keywords will be displayed."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "foongsq"
        },
        "content": "![Find After](images/FindCommandAfter.png)"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "foongsq"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "foongsq"
        },
        "content": ":warning: Things to note:"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* The search is **case-insensitive**. e.g `test` will match `Test`"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* **Only full phrases will be matched** e.g. `Art` will not match `Artifact`"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* Find command only **searches keywords from the questions**, since the purpose of using flashcards is to self test."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* Flashcards matching at least one keyword will be returned. (e.g. `Conflict Resolution` will return `Handling Conflict`, `Resolution`)"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "foongsq"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "### Listing all flashcards in a deck: `list`"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "Lists all flashcards in the deck."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "format: `list`"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "Outcome Expected:"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "Shows all flashcards in the deck that the user is in."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ":warning: Things to note:"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* No additional inputs should be added behind the `list` command."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* Typically used after the `find` command when you want to see all cards in the deck again."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "### Deleting a flashcard : `deleteCard`"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "rachel170"
        },
        "content": "Deletes the specified flashcard from the flashcard deck."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "Format: `deleteCard INDEX`"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* `list` followed by `deleteCard 2` deletes the 2nd flashcard from the flashcard deck."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* `find English` followed by `deleteCard 1` deletes the 1st flashcard shown in the results of the `find` command."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "Outcome Expected:"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "foongsq"
        },
        "content": "1. Enter the `deleteCard` Command with the `INDEX` of the flashcard to delete into the command box as shown. "
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "foongsq"
        },
        "content": "![Delete Card Before](images/DeleteCardCommandBefore.png)"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "foongsq"
        },
        "content": "1. When successful, the flashcard(s) matching the `INDEX` specified will be deleted."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "foongsq"
        },
        "content": "![Delete Card After](images/DeleteCardCommandAfter.png)"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "foongsq"
        },
        "content": "1. If an invalid `INDEX` is specified, the following error message will be displayed."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "foongsq"
        },
        "content": "![Delete Card Error](images/DeleteCardCommandError.png)"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "foongsq"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "foongsq"
        },
        "content": ":warning: Things to note:"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* Deletes the flashcard at the specified `INDEX`."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* The index refers to the index number shown in the currently displayed list of flashcards"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "foongsq"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "### Return to Main Mode : `home`"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "Return to Main mode with list of decks."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "Format: `home`"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "Outcome Expected:"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "1. Enter the Home Command into the command bar as per the example."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "![Main Mode](images/home_init.png)"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "1. You should now see the list of orange decks in the Main Mode."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "![Main Mode](images/home_success.png)"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ":warning: Things to note:"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* It can only be activated from the *Card* mode to navigate back to *Main* Mode."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* No additional inputs should be added behind the home command."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "### Opens the review mode: `review`"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "Opens the review mode to display cards one by one so that you can review them."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "Format: `review`"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "Outcome Expected:"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "foongsq"
        },
        "content": "1. Enter the `review` command."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "foongsq"
        },
        "content": "![Review Before](images/ReviewCommandBefore.png)"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "foongsq"
        },
        "content": "1. When successful, a new review window will pop up and the command box of the main window will be disabled until the"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "foongsq"
        },
        "content": "review window is closed."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "foongsq"
        },
        "content": "![Review After](images/ReviewCommandAfter.png)"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "foongsq"
        },
        "content": "1. When the `review` command is called in an empty deck, the following error message will be shown."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "foongsq"
        },
        "content": "![Review Error](images/ReviewCommandError.png)"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "foongsq"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "foongsq"
        },
        "content": ":warning: Things to note:"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* This command is only valid in the *Card* mode."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* The cards to be reviewed is determined by the list of cards currently displayed in the *Card* mode."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "foongsq"
        },
        "content": "(Eg. If there were originally 10 cards in the deck, and you use the `find` command to search for specific cards. "
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "foongsq"
        },
        "content": "If only 1 card matches your search query, and you use the `review` command, only that 1 card will be reviewed."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "foongsq"
        },
        "content": "To review all the 10 cards in the deck, you can use the `list` command to display all cards in the *Card* mode"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "foongsq"
        },
        "content": "again before using the `review` command.)"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* You should not be able to maximize the review window."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "foongsq"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "## Review Mode Features"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "**:information_source: Quick Summary of Review Mode:**\u003cbr\u003e"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "* Review Mode primarily allows active flashcards to be used for revision."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "* It also provides relevant statistics upon completion of review session."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "* Enter Review mode by calling `review` command in card mode."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "### Flip a flashcard: `f`"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "Flips the flashcard which is being reviewed so that you can view the answer to the question."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "Format: `f`"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "* `f` returns `The sea is blue because water absorbs colors in the red part of the light spectrum` "
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " which is the answer to the question `Why is the sea blue?`."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "Outcome Expected:"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "1. Initial view of flashcard. \u003cbr\u003e"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "![Intitial View](images/flipCommandStep1.png)"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "1. Type `f` into the command box and enter. \u003cbr\u003e"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "![Type Flip Command](images/flipCommandStep2.png)"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "1. The result after flip command has been executed. The answer to the question can now be seen. \u003cbr\u003e"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "![Result of Flip Command](images/flipCommandStep3.png)"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "1. Type `f` into the command box again and enter to flip the card again. \u003cbr\u003e"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "![Type Flip Command](images/flipCommandStep4.png)"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "1. The result after flip command has been executed. The question is now visible instead of the answer. \u003cbr\u003e"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "![Result of Flip Command](images/flipCommandStep5.png)"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ":warning: Things to note:"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "* Flashcard can be flipped as many times as the user wants, to alternate between the question and the answer."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": " "
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": " \u003c/div\u003e"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "### Mark a flashcard as correct: `c`"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "Marks the flashcard that is being reviewed as correct and proceeds to show the next flashcard."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "Format: `c`"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "* `c` returns next card in deck if any."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "Outcome Expected:"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "1. Initial view of flashcard that has been flipped. \u003cbr\u003e"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "![Intitial View](images/correctCommandStep1.png)"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "1. Type `c` into the command box and enter to mark the flashcard as correct. \u003cbr\u003e"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "![Type Correct Command](images/correctCommandStep2.png)"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "1. The result after the correct command has been executed. The next flashcard will be shown and the progress bar will "
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "show an increase in progress. \u003cbr\u003e"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "![Result of Correct Command](images/correctCommandStep3.png)"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "Possible Error users might encounter:"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "1. Typing `c` into the command box when flashcard has not been flipped. \u003cbr\u003e"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "![Type Correct Command](images/correctCommandStep4.png)"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "1. Error message telling users to flip the card first before marking the card, is shown in the result display. \u003cbr\u003e"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "![Error Message](images/correctCommandStep5.png)"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "1. Type `f` into the command box and enter. \u003cbr\u003e"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "![Type Flip Command](images/correctCommandStep6.png)"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "1. The result after flip command has been executed. The Answer to the question can now be seen. \u003cbr\u003e"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "![Result of Flip Command](images/correctCommandStep7.png)"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "1. Type `c` into the command box and enter to mark the flashcard as correct. \u003cbr\u003e"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "![Type Correct Command](images/correctCommandStep8.png)"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "1. The result after the correct command has been executed. The next flashcard will be shown and the progress bar will "
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "   show an increase in progress. \u003cbr\u003e"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "![Result of Correct Command](images/correctCommandStep9.png)"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ":warning: Things to note:"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "* Flashcard can only be marked as correct after the card has been flipped to show the answer."
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "* Even if the user has flipped to view the answer, and flips back to view the question, the user has to "
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "flip back to the answer again before they can mark the flashcard as correct."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "* Flipping the flashcard even number of times will result in the question to be shown, and hence the flashcard cannot"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": " be marked in this case."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": " "
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": " \u003c/div\u003e"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "### Mark a flashcard as wrong: `w`"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "Marks the flashcard that is being reviewed as wrong and proceeds to show the next flashcard."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "Format: `w`"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "* Marks flashcard as wrong before moving on to show the question of the next flashcard."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "* `w` returns next card in deck if any."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "Outcome Expected: \u003cbr\u003e"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "1. Initial view of flashcard that has been flipped."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "![Intitial View](images/wrongCommandStep1.png)"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "1. Type `w` into the command box and enter to mark the flashcard as wrong. \u003cbr\u003e"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "![Type Wrong Command](images/wrongCommandStep2.png)"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "1. The result after the wrong command has been executed. The next flashcard will be shown. \u003cbr\u003e"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "![Result of Wrong Command](images/wrongCommandStep3.png)"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "Possible Error users might encounter:"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "1. Typing `w` into the command box when flashcard has not been flipped. \u003cbr\u003e"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "![Type Wrong Command](images/wrongCommandStep4.png)"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "1. Error message telling users to flip the card first before marking the card, is shown in the result display. \u003cbr\u003e"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "![Error Message](images/wrongCommandStep5.png)"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "1. Type `f` into the command box and enter. \u003cbr\u003e"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "![Type Flip Command](images/wrongCommandStep6.png)"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "1. The result after flip command has been executed. The Answer to the question can now be seen. \u003cbr\u003e"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "![Result of Flip Command](images/wrongCommandStep7.png)"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "1. Type `w` into the command box and enter to mark the flashcard as wrong. \u003cbr\u003e"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "![Type Wrong Command](images/wrongCommandStep8.png)"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "1. The result after the wrong command has been executed. The next flashcard will be shown. \u003cbr\u003e"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "![Result of Wrong Command](images/wrongCommandStep9.png) "
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ":warning: Things to note:"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "* Flashcard can only be marked as wrong after the card has been flipped to show the answer."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "* Even if the user has flipped to view the answer, and flips back to view the question, the user has to "
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "flip back to the answer again before they can mark the flashcard as wrong."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "* Flipping the flashcard even number of times will result in the question to be shown, and hence the flashcard cannot"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": " be marked in this case."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": " "
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": " \u003c/div\u003e"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "### End current review session: `endReview`"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "foongsq"
        },
        "content": "Ends the current review session and returns you to the *Card* Mode that the review session started from."
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "Format: `endReview`"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "rachel170"
        },
        "content": "Outcome Expected: \u003cbr\u003e"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "rachel170"
        },
        "content": "1. User has reached the end of the review session and entered the `endReview` command. \u003cbr\u003e"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "rachel170"
        },
        "content": "![End of Review Window](images/UG_ReviewStatistics.png)"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "foongsq"
        },
        "content": "1. Review Window closes, and you are returned to the *Card Mode* you started the review session from. \u003cbr\u003e"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "rachel170"
        },
        "content": "![Return to Main Window](images/UG_ReturnToCardMode.png)"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "rachel170"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "rachel170"
        },
        "content": ":warning: Things to note:"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* `endReview` can only be activated from the Review Window to return to the *Card* Mode you started the review session from."
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "rachel170"
        },
        "content": "* No additional inputs should be added behind the `endReview` command."
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "rachel170"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "rachel170"
        },
        "content": "### About Review Statistics"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "rachel170"
        },
        "content": "At the end of a review session, FlashNotes will calculate your score for the session and display in a format similar to the image shown below. \u003cbr\u003e"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "rachel170"
        },
        "content": "![Review Window with Review Statistics](images/UG_ReviewStatistics.png)"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "rachel170"
        },
        "content": "As shown in the above image, the Review Window will display the following information:"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * The **total number of questions** you undertook in the review session."
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * The **number of questions marked as correct during your first attempt** at the question."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * The calculated **percentage of questions answered correctly on your first attempt**, a numeric value between 0 and 100, rounded to 1 decimal place."
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "rachel170"
        },
        "content": "Of the three types of information, only the calculated percentage will be saved by FlashNotes. This is so that you can track your revision progress for any deck that you conduct a review session in."
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "rachel170"
        },
        "content": "To view the statistics of your last review session for any deck, simply navigate back to the **Main Mode** and look under the Deck\u0027s name as indicated in the image below."
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "![Review Statistics In Main Mode](images/UG_ReviewStatisticsInHome.png)"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "rachel170"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "rachel170"
        },
        "content": ":warning: Things to note:"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "rachel170"
        },
        "content": "* FlashNotes will calculate and save your review statistics only if you have marked all the questions in the review session as correct. Exiting or ending the review session early will not generate or save the result statistics of the incomplete review session."
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "rachel170"
        },
        "content": "* Regarding the review statistics of any review session started after the usage of the `listAll` command in **Main Mode** (or in other words: any review sessions started with all the cards in FlashNotes), the review statistics for such review sessions will still be generated and displayed, but it will not be saved by FlashNotes."
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "rachel170"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "How do I transfer my data to another Computer?"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "foongsq"
        },
        "content": "Install the app in the other computer and overwrite the data file with the file that contains the "
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "data of your previous FlashNotes home folder."
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "What should I do if I have problems launching the application?"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "Ensure that Java 11 has been installed on your computer, and that you have the most recent version of the application."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "When I exit the program, will all my new flashcards and updates be saved?"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "Yes! Whatever changes that have been made while the application was running will be saved in the data folder. To "
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "ensure none of your data is lost, do not delete the data folder."
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "Is it possible to restore a deck that I just deleted?"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "Sorry but no. There is no such functionality at this point in time."
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "What should I do when I get a \u0027Java Quit unexpectedly\u0027 error. (For Mac Users)"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "Open System Preferences in you computer,  click on ‘Security \u0026 Privacy’ and then proceed to click on Privacy Tab and "
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "the ‘Input Monitoring’ section. Enable java to monitor input from your keyboard even while using other apps."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "### Main Mode"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "foongsq"
        },
        "content": "**Add Deck** | `Format: addDeck n/DECKNAME`\u003cbr\u003e e.g., `addDeck n/Default`"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "foongsq"
        },
        "content": "**Open Deck** | `Format: enterDeck DECKNAME` \u003cbr\u003e e.g., `enterDeck Default`"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "foongsq"
        },
        "content": "**Delete Deck** | `Format: deleteDeck INDEX`\u003cbr\u003e e.g., `deleteDeck 1`"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "foongsq"
        },
        "content": "**Edit Deck Name** | `Format: editDeckName INDEX n/NEWDECKNAME`\u003cbr\u003e e.g., `editDeckName 1 n/History`"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "**List All** | `listAll`"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "**Help** | `help`"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "**Clear** | `clear`"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "foongsq"
        },
        "content": "**Set Review Limit** | `setReviewLimit LIMIT` \u003cbr\u003e e.g., `setReviewLimit 30`, `setReviewLimit all`"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "foongsq"
        },
        "content": "**Check Review Limit** | `checkReviewLimit`"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "rachel170"
        },
        "content": "**Exit** | `exit`"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "### Card Mode"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "**Add Card** | `Format: addCard q/QUESTION a/ANSWER `"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "**Delete Card** | `deleteCard INDEX`\u003cbr\u003e e.g., `deleteCard 3`"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "**Edit Card** | `editCard INDEX [q/QUESTION] [a/ANSWER] [t/TAG]`\u003cbr\u003e e.g.,`editCard 2 q/What is the real question? a/This is a real question.`"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "**Find** | `find KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `find President`"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "**List** | `list`"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "**Help** | `help`"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "**Home** | `home`"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "**Start Review** | `review`"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "foongsq"
        },
        "content": "**Set Review Limit** | `setReviewLimit LIMIT` \u003cbr\u003e e.g., `setReviewLimit 30`, `setReviewLimit all`"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "foongsq"
        },
        "content": "**Check Review Limit** | `checkReviewLimit`"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "foongsq"
        },
        "content": "**Exit** | `exit`"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "### Review Mode"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "Action | Format"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "**Flip** | `f`"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "**Correct** | `c`"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "**Wrong** | `w`"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "**End Review** | `endReview`"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "foongsq"
        },
        "content": "**Help** | `help`"
      }
    ],
    "authorContributionMap": {
      "rachel170": 78,
      "pengxiangg": 194,
      "chuyouchia": 138,
      "foongsq": 214,
      "-": 134,
      "Sruthisarav": 207
    }
  },
  {
    "path": "docs/diagrams/AddCardListAllDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ":User executes addCard command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "if () then ([User in the list that shows"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "all cards (listAll command)])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    :Card is added to \"Default\" Deck;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "else ([User in normal deck])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    :Card is added to the deck"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    that the user is in;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "endif"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "stop"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "pengxiangg": 18
    }
  },
  {
    "path": "docs/diagrams/AddDeckSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "participant \":FlashNotesParser\" as FlashNotesParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "participant \"u:AddDeckCommand\" as AddDeckCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "participant \":FlashNotes\" as FlashNotes MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "[-\u003e LogicManager : execute(addDeck n/Deck1)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "LogicManager -\u003e FlashNotesParser : parseCommand(addDeck n/Deck 1)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "activate FlashNotesParser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "create AddDeckCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "FlashNotesParser -\u003e AddDeckCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "activate AddDeckCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "AddDeckCommand --\u003e FlashNotesParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "deactivate AddDeckCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "FlashNotesParser --\u003e LogicManager : u"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "deactivate FlashNotesParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "LogicManager -\u003e AddDeckCommand : execute()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "activate AddDeckCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "AddDeckCommand -\u003e Model : addDeck(Deck1)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "Model -\u003e FlashNotes : addDeck(Deck1)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "activate FlashNotes"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "FlashNotes --\u003e Model :"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "deactivate FlashNotes"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "Model --\u003e AddDeckCommand"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "AddDeckCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "deactivate AddDeckCommand"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "AddDeckCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "destroy AddDeckCommand"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 52
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"addDeck n/Singapore\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foongsq"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"addDeck n/Singapore\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : addDeck(deck)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foongsq"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveFlashNotes(flashNotes, deckList)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "foongsq": 4,
      "-": 34
    }
  },
  {
    "path": "docs/diagrams/CommandActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "if () then ([command is valid])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    :Save Command Result to Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    :Store changes in FlashNotesStorage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    :Display Command Result on Screen;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    :Throws CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    :Displays error message"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    in Result Display;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "endif"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "stop"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 20
    }
  },
  {
    "path": "docs/diagrams/DeleteCardSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "skinparam classFontSize 18"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "participant \":FlashNotesParser\" as FlashNotesParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "participant \"u:DeleteCardCommand\" as DeleteCardCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "participant \":FlashNotes\" as FlashNotes MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "[-\u003e LogicManager : execute(deleteCard 1)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "LogicManager -\u003e FlashNotesParser : parseCommand(deleteCard 1)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "activate FlashNotesParser"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "create DeleteCardCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "FlashNotesParser -\u003e DeleteCardCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "activate DeleteCardCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "DeleteCardCommand --\u003e FlashNotesParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "deactivate DeleteCardCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "FlashNotesParser --\u003e LogicManager : a"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "deactivate FlashNotesParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "LogicManager -\u003e DeleteCardCommand : execute()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "activate DeleteCardCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "DeleteCardCommand -\u003e Model : deleteFlashcard(target)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "Model -\u003e FlashNotes : removeFlashcard(key)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "activate FlashNotes"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "FlashNotes --\u003e Model :"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "deactivate FlashNotes"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "Model --\u003e DeleteCardCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "DeleteCardCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "deactivate DeleteCardCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "DeleteCardCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "destroy DeleteCardCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "pengxiangg": 53
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "participant \":FlashNotesParser\" as FlashNotesParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "participant \":DeleteDeckCommandParser\" as DeleteDeckCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "participant \"d:DeleteDeckCommand\" as DeleteDeckCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": "[-\u003e LogicManager : execute(\"deleteDeck 1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foongsq"
        },
        "content": "LogicManager -\u003e FlashNotesParser : parseCommand(\"deleteDeck 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "activate FlashNotesParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "create DeleteDeckCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "FlashNotesParser -\u003e DeleteDeckCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "activate DeleteDeckCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "DeleteDeckCommandParser --\u003e FlashNotesParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "deactivate DeleteDeckCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foongsq"
        },
        "content": "FlashNotesParser -\u003e DeleteDeckCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "activate DeleteDeckCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "create DeleteDeckCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "DeleteDeckCommandParser -\u003e DeleteDeckCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "activate DeleteDeckCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "DeleteDeckCommand --\u003e DeleteDeckCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "deactivate DeleteDeckCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "DeleteDeckCommandParser --\u003e FlashNotesParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "deactivate DeleteDeckCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "DeleteDeckCommandParser -[hidden]-\u003e FlashNotesParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "destroy DeleteDeckCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "FlashNotesParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "deactivate FlashNotesParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "LogicManager -\u003e DeleteDeckCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "activate DeleteDeckCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foongsq"
        },
        "content": "DeleteDeckCommand -\u003e Model : deleteDeck(\"1\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "Model --\u003e DeleteDeckCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "DeleteDeckCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "CommandResult --\u003e DeleteDeckCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "DeleteDeckCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "deactivate DeleteDeckCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "foongsq": 4,
      "-": 37,
      "Sruthisarav": 28
    }
  },
  {
    "path": "docs/diagrams/EndReviewSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rachel170"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rachel170"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rachel170"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rachel170"
        },
        "content": "box UI UI_COLOR_T1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rachel170"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rachel170"
        },
        "content": "Participant \":ReviewWindow\" as review UI_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rachel170"
        },
        "content": "Participant \":FlashcardListRoot\" as cardView UI_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rachel170"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rachel170"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rachel170"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rachel170"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"endReview\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rachel170"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rachel170"
        },
        "content": "ui -[USER_COLOR]\u003e review : executeCommand(\"endReview\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rachel170"
        },
        "content": "activate review UI_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rachel170"
        },
        "content": "review -[UI_COLOR]\u003e logic : execute(\"endReview\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rachel170"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rachel170"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveFlashNotes(flashNotes, decks)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rachel170"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rachel170"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rachel170"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rachel170"
        },
        "content": "logic -[LOGIC_COLOR]-\u003e review"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rachel170"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rachel170"
        },
        "content": "review -[UI_COLOR]\u003e review: hide()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rachel170"
        },
        "content": "activate review UI_COLOR_T2"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rachel170"
        },
        "content": "review --[UI_COLOR]\u003e review"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rachel170"
        },
        "content": "deactivate review"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rachel170"
        },
        "content": "review -[UI_COLOR]\u003e review: handleExit()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rachel170"
        },
        "content": "activate review UI_COLOR_T2"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rachel170"
        },
        "content": "review -[UI_COLOR]\u003e logic: setIsReviewModeFalse()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rachel170"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rachel170"
        },
        "content": "logic -[LOGIC_COLOR]-\u003e review"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rachel170"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rachel170"
        },
        "content": "review -[UI_COLOR]\u003e cardView **"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rachel170"
        },
        "content": "activate cardView UI_COLOR"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rachel170"
        },
        "content": "note left of review"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rachel170"
        },
        "content": "\"\"handleExit()\"\" sets a"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rachel170"
        },
        "content": "new FlashCardListRoot"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rachel170"
        },
        "content": "object for the primaryStage"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rachel170"
        },
        "content": "to display, returning to"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rachel170"
        },
        "content": "the view of the deck."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rachel170"
        },
        "content": "end note"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rachel170"
        },
        "content": "cardView -[UI_COLOR]-\u003e review"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rachel170"
        },
        "content": "deactivate cardView"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rachel170"
        },
        "content": "review --[UI_COLOR]\u003e review"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rachel170"
        },
        "content": "deactivate review"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rachel170"
        },
        "content": "review --[UI_COLOR]\u003e ui"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rachel170"
        },
        "content": "deactivate review"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rachel170"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rachel170"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rachel170"
        },
        "content": "destroy review"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rachel170"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "rachel170": 70
    }
  },
  {
    "path": "docs/diagrams/FlashNotesParserActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ":FlashNotesParser checks mode of application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "if () then ([in Review Mode])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    :Parses Command in Review Mode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    if () then ([in Home Mode])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            :Parses Command in Home Mode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        else ([else])"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        :Parses Command in Card Mode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "endif"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ":Returns Parsed Command to be executed;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "stop"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 20
    }
  },
  {
    "path": "docs/diagrams/FlipCommandSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "participant \":FlashNotesParser\" as FlashNotesParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "participant \"f:FlipCommand\" as FlipCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "participant \"card:Flashcard\" as Flashcard MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "[-\u003e LogicManager : execute(\"f\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "LogicManager -\u003e FlashNotesParser : parseCommand(\"f\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "activate FlashNotesParser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "create FlipCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "FlashNotesParser -\u003e FlipCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "activate FlipCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "FlipCommand --\u003e Model : carryOutFlipCommand()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "Model -\u003e Flashcard : flipFlashcard()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "activate Flashcard"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "Flashcard -\u003e Model :"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "deactivate Flashcard"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "Model -\u003e FlipCommand :"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "FlipCommand --\u003e FlashNotesParser : commandResult"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "deactivate FlipCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "FlashNotesParser --\u003e LogicManager : commandResult"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "deactivate FlashNotesParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "[\u003c--LogicManager : commandResult"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "destroy FlipCommand"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Sruthisarav": 46
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "Class FlashNotesParser"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ParserUtil"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "LogicManager --\u003e\"1\" FlashNotesParser"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "FlashNotesParser .left.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e Model"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Command .right.\u003e Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "note right of XYZCommand: XYZCommand \u003d AddCommand, \\nFindCommand, etc"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 58,
      "Sruthisarav": 3
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "Interface ReadOnlyFlashNotes \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "Class FlashNotes"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "Class ReadOnlyFlashNotes"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "Package Flashcard {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "Class Flashcard"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "Class Question"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "Class Answer"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "Class UniqueFlashcardList"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "Package Deck {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "Class Deck"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "Class UniqueDeckList"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "FlashNotes .up.|\u003e ReadOnlyFlashNotes"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "ModelManager o--\u003e \"1\" FlashNotes"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "FlashNotes *--\u003e \"1\" UniqueFlashcardList"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "UniqueFlashcardList o--\u003e \"*\" Flashcard"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "Flashcard *--\u003e Question"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "Flashcard *--\u003e Answer"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "Flashcard *--\u003e Tag"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "FlashNotes *--\u003e \"1\" UniqueDeckList"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "UniqueDeckList o--\u003e \"*\" Deck"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "Deck -right[hidden]- Flashcard"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "pengxiangg": 24,
      "-": 32
    }
  },
  {
    "path": "docs/diagrams/NextCommandActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ":User inputs valid command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "if () then ([flashcard is flipped])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    if () then ([isCorrect])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    :Mark isCorrect in"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    Flashcard to true;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    :Increase Progress bar"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    shown in Review Mode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    :Display next flashcard"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "      on review screen;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    else ([else])"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        :Mark isCorrect in"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "         Flashcard to false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        :Add flashcard back"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "           to review list;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        :Display next flashcard"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "          on review screen;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    :Displays error message"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    in Result Display;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "endif"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "stop"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Sruthisarav": 31
    }
  },
  {
    "path": "docs/diagrams/ReviewSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"review\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foongsq"
        },
        "content": "ui -[USER_COLOR]\u003e ui : executeCommand(\"review\")"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foongsq"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foongsq"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"review\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foongsq"
        },
        "content": "logic -[LOGIC_COLOR]\u003e logic : execute(model)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foongsq"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foongsq"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : setUpReviewList()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foongsq"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foongsq"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foongsq"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foongsq"
        },
        "content": "logic -[LOGIC_COLOR]-\u003e ui"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foongsq"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foongsq"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foongsq"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foongsq"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "foongsq": 33
    }
  },
  {
    "path": "docs/diagrams/ReviewWorkflowActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": ":User is in Card Mode;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": ":User enters the Review Mode;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": "repeat: Question displayed, user tries to answer the question mentally;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": ":User flips the card to verify answer;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": "if () then ([correct answer])"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    :User marks answer as correct;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    :Flashcard is removed from the list of flashcards to review;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foongsq"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    :User marks answer as wrong;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    :Flashcard is added back into the list of flashcards to review;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foongsq"
        },
        "content": "endif"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foongsq"
        },
        "content": "repeat while (any more flashcards to review?) is (yes)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foongsq"
        },
        "content": "-\u003e no;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foongsq"
        },
        "content": ":FlashNotes displays review statistics;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foongsq"
        },
        "content": ":User ends the review session and returns to Card Mode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foongsq"
        },
        "content": "stop"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foongsq"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "foongsq": 24
    }
  },
  {
    "path": "docs/diagrams/SetReviewLimitActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": ":User starts up FlashNotes;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": "if () then ([wants to change review limit])"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    :Set review limit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": "endif"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": ":User enters a flashcard deck;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foongsq"
        },
        "content": ":User reviews the flashcards in that deck;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foongsq"
        },
        "content": ":User exits FlashNotes;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foongsq"
        },
        "content": "stop"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "foongsq": 14
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rachel170"
        },
        "content": "Interface FlashNotesStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rachel170"
        },
        "content": "Class JsonFlashNotesStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rachel170"
        },
        "content": "StorageManager o--\u003e FlashNotesStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rachel170"
        },
        "content": "JsonFlashNotesStorage .left.|\u003e FlashNotesStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rachel170"
        },
        "content": "JsonFlashNotesStorage .right.\u003e JsonSerializableFlashNotes"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rachel170"
        },
        "content": "JsonSerializableFlashNotes .down.\u003e JsonAdaptedFlashcard"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rachel170"
        },
        "content": "JsonSerializableFlashNotes .down.\u003e JsonAdaptedDeck"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "rachel170": 7,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "interface RootNode \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "Class XYZListRoot"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "Class XYZListPanel"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "Class XYZCard"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "Class ReviewWindow"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "MainWindow  -- \"1\" RootNode"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "RootNode --\u003e XYZListRoot"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "XYZListRoot *-down-\u003e ReviewWindow"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "XYZListRoot *-down-\u003e HelpWindow"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "XYZListRoot *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "XYZListRoot *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "XYZListRoot *-down-\u003e XYZListPanel"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "XYZListRoot *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "XYZListPanel -down-\u003e \"*\" XYZCard"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "XYZListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "XYZCard --|\u003e UiPart"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "ReviewWindow --|\u003e UiPart"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "XYZCard ..\u003e Model"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "HelpWindow -[hidden]right-\u003e ReviewWindow"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "XYZListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 20,
      "-": 48
    }
  },
  {
    "path": "docs/diagrams/UiCommandResultClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": "skinparam arrowColor UI_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": "skinparam defaultFontColor white"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": "show members"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": "hide RootNode members"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": "Interface RootNode \u003c\u003cInterface\u003e\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foongsq"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foongsq"
        },
        "content": "class FlashcardListRoot {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    executeCommand(String)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    handleHelp()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    handleReview()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    handleExit()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foongsq"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foongsq"
        },
        "content": "class DeckCardListRoot {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    executeCommand(String)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    handleHelp()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    handleExit()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foongsq"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foongsq"
        },
        "content": "class ReviewWindow {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    executeCommand(String)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    handleFlip()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    handleNextCard(int)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    handleHelp()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    handleExit()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foongsq"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foongsq"
        },
        "content": "class CommandResult #3333C4 {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    feedbackToUser"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    isShowHelp()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    isShowExit()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foongsq"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foongsq"
        },
        "content": "FlashcardListRoot *-- ReviewWindow"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foongsq"
        },
        "content": "CommandResult \u003c-[dashed]- ReviewWindow"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foongsq"
        },
        "content": "CommandResult \u003c-[dashed]- FlashcardListRoot"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foongsq"
        },
        "content": "CommandResult \u003c-[dashed]- DeckCardListRoot"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foongsq"
        },
        "content": "RootNode \u003c|-[dashed]- FlashcardListRoot"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foongsq"
        },
        "content": "RootNode \u003c|-[dashed]- DeckCardListRoot"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foongsq"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "foongsq": 48
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "\u003ch1\u003eFlashnotes\u003c/h1\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "[![Java CI](https://github.com/AY2021S1-CS2103T-T15-2/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T15-2/tp/actions)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-T15-2/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-T15-2/tp)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "**Flashnotes is a desktop application for managing and revising your study materials through flash cards.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "Have you ever wanted to study for exams using flashcards but found the process of creating and maintaining unbearably long?"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "Or maybe you found it hard to find the discipline for sticking to a flashcard based system? "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "Then FlashNotes is just the app for you! It has an extremely simple and easy flashcard management process, on top of helping you to track your own revision progress in real time."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "* To get started, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "* If you are interested in the source code for FlashNotes, reading the [**Developer Guide**](DeveloperGuide.html) would be a good place to start."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* This project was extended from AddressBook-Level3 project created by SE-EDU initiative."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "pengxiangg": 5,
      "chuyouchia": 8,
      "-": 10
    }
  },
  {
    "path": "docs/team/chuyouchia.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "title: Jacob Chia\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "## Project: FlashNotes"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "FlashNotes is a desktop address book application used for creating and accessing flashcards for studying. "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 13 kLoC."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "* **New Feature 1**: Implemented a new type of object named Decks. "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    * What it does: Enables the application to store a different type of object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    * Justification: Implementing Decks is vital to ensuring that flashcards can be organised according to themes and topics for revision purposes. It also enables the tracking of revision statistics on the deck level, which is crucial in any flashcard application."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    * Highlights: This enhancement affects existing and future commands as many actions revolves around the Deck object type. It required an in-depth analysis of design alternatives to weigh the tradeoff between the value and the speed of development. Details can be found [here.](https://ay2021s1-cs2103t-t15-2.github.io/tp/DeveloperGuide.html#3-possible-designs-for-decks-in-main-mode)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Implementation in particular was challenging because creating a new object affects all components from UI to Model to even storage. I handled everything end to end, which included UI, business logic and data management."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "         This excludes the saving and reading of data which was done by my teammate Rachel."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "  "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "* **New Feature 2**: Added the ability to add new Decks via addDeck Command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e  "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "* **New Feature 3**: Created a new UI for Home Screen to render Decks"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    * What it does: Enable the user to visually separate a list of decks from list of cards"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    * Justification: Having 2 visually separate screen to view flashcards in gives a sense of the hierarchical relationship between Decks and Flashcards. This separates the 2 different types of objects rendered and the logic of operating in those differing modes."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    * Highlights: Deciding to split the root nodes out from the Main screen was important in allowing scene swaps to happen. This enabled us to include review window into the card mode screen, while excluding it from the main mode."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dchuyou\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dchuyouchia\u0026tabRepo\u003dAY2021S1-CS2103T-T15-2%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003dfunctional-code)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    * Managed the release from v1.2 to v1.4 (4 releases) as the Project Lead"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    * Led discussions on prioritization of issues and features and user interface"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    * Set up github repo and workflows"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    * Modified the GUI color scheme to provide visual separation between Decks and Flashcards"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "* **Contributions to test coverage improvement**: Pull requests ([#132](https://github.com/AY2021S1-CS2103T-T15-2/tp/pull/132/files) ,[#137](https://github.com/AY2021S1-CS2103T-T15-2/tp/pull/137/files))"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    * Wrote documentation for the features`enterDeck`, `addDeck` and `Home`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    * Standardize documentation format for features in User Guide"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    * Updated the documentation for UI component and the [UI class diagram](https://ay2021s1-cs2103t-t15-2.github.io/tp/DeveloperGuide.html#ui-component)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    * Wrote documentation for implementation of deck"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    * Add implementation details of `addDeck` command including [sequence diagrams](https://ay2021s1-cs2103t-t15-2.github.io/tp/DeveloperGuide.html#corresponding-sequence-diagram-for-adddeck-command)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    * Add implementation details with `FlashNotesParser` [activity diagram](https://ay2021s1-cs2103t-t15-2.github.io/tp/DeveloperGuide.html#corresponding-activity-diagram-for-flashnotesparser)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    * Add activity diagram to explain the execution of `Command`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    * Add design considerations and explanation for the [3 different UIs](https://ay2021s1-cs2103t-t15-2.github.io/tp/DeveloperGuide.html#implementation-of-ui-3-different-modes) available in FlashNotes v1.4"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    * Contributed to forum discussions (example: [1](https://github.com/nus-cs2103-AY2021S1/forum/issues/103))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    * Reviewed teammate commits (examples: [1](https://github.com/AY2021S1-CS2103T-T15-2/tp/pull/139), [2](https://github.com/AY2021S1-CS2103T-T15-2/tp/pull/46), [3](https://github.com/AY2021S1-CS2103T-T15-2/tp/pull/71), [4](https://github.com/AY2021S1-CS2103T-T15-2/tp/pull/76), [5](https://github.com/AY2021S1-CS2103T-T15-2/tp/pull/245), [6](https://github.com/AY2021S1-CS2103T-T15-2/tp/pull/176), [7](https://github.com/AY2021S1-CS2103T-T15-2/tp/pull/108), [8](https://github.com/AY2021S1-CS2103T-T15-2/tp/pull/110))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    * Reported bugs and made suggestions for other teams in the class. Bug reports: [1](https://github.com/chuyouchia/ped/issues/1), [2](https://github.com/chuyouchia/ped/issues/2), [3](https://github.com/chuyouchia/ped/issues/3), [4](https://github.com/chuyouchia/ped/issues/4), [5](https://github.com/chuyouchia/ped/issues/5), [6](https://github.com/chuyouchia/ped/issues/6), [7](https://github.com/chuyouchia/ped/issues/7), [8](https://github.com/chuyouchia/ped/issues/8), [9](https://github.com/chuyouchia/ped/issues/9)"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 55
    }
  },
  {
    "path": "docs/team/foongsq.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": "title: Foong Siqi\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": "## Project: FlashNotes"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": "FlashNotes is a desktop flashcards application used for creating and accessing flashcards for studying. The user "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": "interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 12 kLoC."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foongsq"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* **New Feature 1**: Setting up of review mode (Pull request: [#92](https://github.com/AY2021S1-CS2103T-T15-2/tp/pull/92))"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    * What it does: This feature processes the list of flashcards to be reviewed when the user calls the `review` command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    It then passes this list of flashcards to the UI component and opens a new JavaFX window for users to review their"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    flashcards."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    * Justification: This is a very important feature as it forms the foundation of one of the main functions of FlashNotes"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    which is for users to review their flashcards. Also it is one of the aspects of the application that users interact with"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    the most, so it is a significant feature."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    * Highlights: This enhancement required the in-depth analysis of the UI and Model component. The implementation was"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    also challenging as it involved using many methods/functions from JavaFX which is a relatively new framework for me."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* **New Feature 2**: Implementation of review limit (Pull request: [#168](https://github.com/AY2021S1-CS2103T-T15-2/tp/pull/168))"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    * What it does: Saving and retrieving of a maximum number of cards that the user wants to review."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    * Justification: This feature is important as it gives users flexibility and a choice to set preferences. This is the"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    first of many other potential settings we can let users customize, for them to personalize their flashcard making"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    and reviewing experience."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    * Highlights: I implemented the review limit in such a way that it can accept a range of integer inputs from 1 to "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    `Integer.MAX_VALUE` and also valid string inputs such as `all`. "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* **New Feature 3**: Implementation of character limit for question, answer and deck names (Pull request: [#172](https://github.com/AY2021S1-CS2103T-T15-2/tp/pull/172))"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    * What it does: Limits the number of characters that users can input for question, answer and deck names to 140 "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    characters."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    * Justification: This feature is important as it affects some of the UI decisions we made. Some examples include"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    how to handle overflow in the content we want to display, and the sizing of the different windows."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foongsq"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dfoongsq\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    * Used Github Issues Tracker to manage and assign tasks to team mates."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    * Facilitated weekly team meetings about implementation details, deliverables,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    and deadlines."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    * Brainstorm ideas for the different features (How we intend our application to behave, design details etc.)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    * Refactored code for `Name` class in the original AddressBook3 application"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    into the `Question` class for FlashNotes application."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    * Standardized and updated some of the error messages to improve user experience."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    * Organized code and fixed bugs in Parsers, to ensure that the correct commands are allowed in the correct modes."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    * Wrote new testcases for major Parser class `FlashNotesParser`, and also for the new commands I implemented. "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    (Pull request: [#138](https://github.com/AY2021S1-CS2103T-T15-2/tp/pull/138))"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foongsq"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    * Wrote documentation for the features `setReviewLimit`, `checkReviewLimit`, `review`."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    * Updated documentation for `find`, `deleteCard`."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    * Wrote documentation for the section \"Understanding the 3 different modes\"."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    * Updated \"Manual Testing\" section with new features."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    * Standardized formatting and fixed typos that could cause confusion for readers."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foongsq"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    * Add design considerations and explanation for the 3 different UIs available in FlashNotes v1.4."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    * Update documentation in \"Architecture\" section."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    * Documented effort and challenges faced when implenting the 3 UI modes"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    * Wrote documentation for implementation of Review mode."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    * Drew sequence diagram for `review` command execution, activity diagram for `setReviewLimit` command execution, "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    class diagram for UI and `CommandResult` classes, and activity diagram for a typical workflow in the review mode."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    * Standardized formatting and fixed typos that could cause confusion for readers."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foongsq"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    * Reviewed team mates\u0027 pull requests (Pull Request: [#57](https://github.com/AY2021S1-CS2103T-T15-2/tp/pull/57))"
      }
    ],
    "authorContributionMap": {
      "foongsq": 71
    }
  },
  {
    "path": "docs/team/pengxiangg.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "title: Peng Xiang\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "## Project: FlashNotes"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "FlashNotes is a desktop address book application used for creating and accessing flashcards for studying. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 13 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* **New Feature 1**: Created the feature to enter/open decks, delete decks and edit deck name."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    * What it does: "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        * Allows user to enter decks by searching for cards with tags that are equals to the deck. "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        * Users can also delete decks, which will also delete all cards in the deck."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        * Users can also edit the deck name, and the tags of the cards which have the same tag as the deck name."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    * Justifications: This features allow Users to manage their decks, and the cards inside the decks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    * Highlights: As the cards are not implemented as a direct composition of decks, the updating of the tags of the cards had to be handled separately whenever the decks were updated or deleted."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* **New Feature 2**: Added the restriction of commands in Home mode and Card mode."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    * What it does: Certain commands cannot be called in the Home mode and certain commands cannot be called in the Card mode."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    * Justifications: This prevents Users from calling certain commands that were counter-intuitive so that Users can have a more pleasant experience. "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    For example, by allowing Users to add cards **only** in the card mode, users can directly see the new card added."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    * Highlights: Figuring out the design of where to put the checking of the state of the system (home mode or card mode) to ensure that it does not violate any design patterns or principles."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "\t\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* **New Feature 3**: Enhancing the feature of viewing all the cards in the entire system."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    * What it does: Users can view the list of all the cards, while adding cards and deleting cards."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    * Justification: Users can conveniently see every single card, and can add, delete, edit or review all cards."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    * Highlights: In order to allow users to add cards while viewing all the cards, I had to create a pseudo deck name (\u0027list\u0027) for the `listAll` command. I had to implement a \u0027Default\u0027 deck that will automatically send all cards creating while in this \u0027list\u0027 mode. "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    This is because all cards needed to belong to a deck, however, if a card is created in \u0027list\u0027 mode, then it will not belong to any deck, unless a \u0027Default\u0027 deck existed. The \u0027list\u0027 deck name is also reserved, to prevent users from creating a deck called \u0027list\u0027, so that the system will not be confused."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dpengxiangg\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    * Assigned issues in the issue tracker in Github for v1.2"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    * Brainstormed ideas, implementation, features."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    * Solved merge conflicts together with the team."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    * Updated the existing CRUD features for cards to ensure that the cards and decks were linked and were working as intended."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    * Improved the introduction of the User Guide so that Users have a clearer idea of what the User Guide is about."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    * Added a guide and explanation of how to use features such as `editDeckName`, `deleteDeck`, `listAll` and `addCard`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    * Wrote the explanation for the Model Component"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    * Wrote the implementation of the card mode features, the list and listAll features, and the command restriction feature."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    * Updated and maintained the NFR and Glossary"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    * Added new use cases and updated existing use cases to match the correct format."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    * PRs reviewed (with non-trivial review comments): Examples: [1](https://github.com/AY2021S1-CS2103T-T15-2/tp/pull/146), [2](https://github.com/AY2021S1-CS2103T-T15-2/tp/pull/188)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    * PRs reviewed: Examples: [1](https://github.com/AY2021S1-CS2103T-T15-2/tp/pull/77)"
      }
    ],
    "authorContributionMap": {
      "pengxiangg": 56
    }
  },
  {
    "path": "docs/team/rachel170.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rachel170"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rachel170"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rachel170"
        },
        "content": "title: Rachel\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rachel170"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rachel170"
        },
        "content": "## Project: FlashNotes"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rachel170"
        },
        "content": "FlashNotes is a desktop app for flashcards, built for students who wish to utilise flashcards for studying. FlashNotes is also optimized for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rachel170"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rachel170"
        },
        "content": "* **New Feature**: Review Statistics Feature"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rachel170"
        },
        "content": "  * What it does: Track and display statistics for user\u0027s review session. "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rachel170"
        },
        "content": "  * Justification: Allows the user see how many flashcards they got correct during a review sessions that they can track their topics\u0027 mastery."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rachel170"
        },
        "content": "  * Highlights:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    * Calculated and displayed statistics for Review session once user have answered all questions correctly."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    * Update FlashNotes\u0027 model with review statistics data"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rachel170"
        },
        "content": "  * Credits: Review Session code base written by Sruthi and Siqi. "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rachel170"
        },
        "content": "* **New Feature**: Expanding Storage Feature to save `Deck` data"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rachel170"
        },
        "content": "  * What it does: Allow FlashNotes to save data from `Deck` class and load `Deck` data from FlashNotes save file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rachel170"
        },
        "content": "  * Justification: To allow user to track their topic mastery regardless of their instance of FlashNotes."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rachel170"
        },
        "content": "  * Highlights: Expanded Storage component to save `Deck` class data to the same save file as FlashcNotes\u0027 flashcard data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rachel170"
        },
        "content": "  * Credits: `Deck` and `UniqueDeckList` classes implemented by Jacob and Peng Xiang."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rachel170"
        },
        "content": "  "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rachel170"
        },
        "content": "* **New Feature**: `endReview` Command"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rachel170"
        },
        "content": "  * What it does: Allow user to return to the main window showing the Card Mode they started their review session from."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rachel170"
        },
        "content": "  * Justification: Allows user to continue using FlashNotes if they wish to leave the review session for any reason. "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rachel170"
        },
        "content": "  * Highlights: Enabled return to Card View once Review Session ends (be it through `endReview` command or by closing of Review window)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rachel170"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003drachel170)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rachel170"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rachel170"
        },
        "content": "  * Attended and provided helpful input during team meetings, as well as directed several discussions."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rachel170"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rachel170"
        },
        "content": "  * Refactored `Person` class to `Flashcard` class."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rachel170"
        },
        "content": "  * Standardized one word command to not accept further arguments."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rachel170"
        },
        "content": "  * Enabled saving of FlashNotes\u0027 data upon manual closing of the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rachel170"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rachel170"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    * Provided `exit`, `endReview` command usage description and examples."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    * Provided informative section about FlashNote\u0027s \"Saving the data\" and \"About Review Statistics\" features."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    * Updated Quick Start section for FlashNotes."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rachel170"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    * Added details about the `Storage` component with a class diagram for the section."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    * Provided implementation details for the \u0027Review Statistics Feature\u0027 under \u0027Implementation of Review Mode Features\u0027."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    * Added Efforts section."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rachel170"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rachel170"
        },
        "content": "  * Reviewed and approved PR for teammates. (example: [1](https://github.com/AY2021S1-CS2103T-T15-2/tp/pull/249))"
      }
    ],
    "authorContributionMap": {
      "rachel170": 52,
      "chuyouchia": 1
    }
  },
  {
    "path": "docs/team/sruthisarav.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "title: Sruthi\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "## Project: FlashNotes"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "FlashNotes is a desktop address book application used for creating and accessing flashcards for studying. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 12 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "* **New Feature 1**: Flipping of flashcard in Review Mode"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    * What it does: This feature flips the flashcard currently being reviewed when the user calls the `f` command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    This will switch between question and answer of the flashcard currently being reviewed."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    * Justification: This is an important feature in the review mode as when the user is reviewing a deck of flashcards, "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    they wouldn\u0027t want to be able to view the answer immediately. This feature ensures that the user can view either "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    the question or answer at any point in time and not both. Also, every flashcard needs to be flipped in order "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    to be able to proceed to the next flashcard to review in the review mode."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    * Highlights: This enhancement required an in-depth analysis of the Logic and Model components. The implementation "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    was also challenging as it involved interactions between several components(UI, Logic and Model) in order to make "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    the feature work."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    Another highlight would be hiding the view of either the question/answer whenever the flashcard is flipped so that "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    the user doesn\u0027t accidentally view the answer to the question when they are not supposed to be able to."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": " "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "* **New Feature 2**: Marking flashcard as correct in Review Mode"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    * What it does: Marks the flashcard currently being reviewed in the Review Mode as correct and shows the next "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    card in the review list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    * Justification: This feature is important as it enables users to keep track of the flashcards that they get right "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    during the review session, allowing them to move on to the next flashcard."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    * Highlights: I added a progress bar at the bottom of the review mode window so that users can note their "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    progress during a review session. Whenever a flashcard is marked as correct, the users can see the progress "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    increase until it reaches full 100% which means that the user has completed reviewing the list of flashcards for "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    that particular review session.  "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "* **New Feature 3**: Marking flashcard as wrong in Review Mode"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    * What it does: Marks the flashcard currently being reviewed in the Review Mode as wrong and shows the next "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    card in the review list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    * Justification: This feature is important as it enables users to keep track of the flashcards that they get wrong "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    during the review session, allowing them to move on to the next flashcard. For every flashcard that the user "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    reviews incorrectly, the flashcard will be added back to the list so that the user reviews it again within the same "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    review session before they forget about it. "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    * Highlights: I added a progress bar at the bottom of the review mode window so that users can "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    note their progress during a review session. Whenever a flashcard is marked as wrong, the progress in the bar will"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    not change at all, showing the user that they still have just as many cards to review as they did before this "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    flashcard. This is because the user has to review the same flashcard that they had gotten wrong, again, before "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    they forget about the question. "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dfoongsq\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    * Merged PRs for v1.3 documentation and double-checked everyone\u0027s documentation."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    * Attended weekly team meetings about implementation details, deliverables, and deadlines and shared my "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    inputs/opinions/suggestions."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    * Brainstorm ideas for the different features."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": " "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    * Refactored code for `Phone` class in the original AddressBook3 application"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    into the `Answer` class for FlashNotes application."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    * Updated old testcases for `Phone` and changed them to `Answer`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    * Created and updated most of the error messages to improve user experience."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    * Organized code and fixed bugs in Parsers, to ensure that the incorrect commands aren\u0027t executed, but return "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    error messages instead."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    * Created three new parser functions inside FlashNotesParser to parse incorrect commands in the respective modes "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    such that they return appropriate error messages. "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    * Wrote documentation for the commands: `f`, `c`, `w`."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    * Updated the documentation for `editCard`."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    * Wrote documentation for the first half of section \"Understanding the 3 different modes\" and included annotations "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    for Main Mode UI."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    * Updated command section for review mode."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    * Wrote the entirety of the FAQ section."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    * Update documentation in \"Logic\" section."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    * Update Delete Sequence UML diagram and Logic Class UML diagram."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    * Wrote documentation for implementation of the features: flipping flashcard in review mode and marking flashcards "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    as correct or wrong before proceeding to review the next flashcard."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    * Drew a sequence diagram for `f` command execution, and an activity diagram for `c` or `w` command execution in "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    the review mode."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    * Wrote the introduction, which includes target audience, purpose and brief summary of all the sections in the "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    developer\u0027s Guide."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    * Updated Manual Testing section to include all the new features in FlashNotes.    "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    * Reviewed teammates\u0027 pull requests. [link](https://github.com/AY2021S1-CS2103T-T15-2/tp/pull/184)"
      }
    ],
    "authorContributionMap": {
      "Sruthisarav": 88
    }
  },
  {
    "path": "docs/tutorials/AddRemark.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Adding a command\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s walk you through the implementation of a new command — `remark`."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Create a new `remark` command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.logic.commands;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Changes the remark of an existing person in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "### Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "### Run the application"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "![Output displayed](../images/add-remark/RemarkHello.png)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "## Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "## Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` to parse input from the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "### Make the command accept parameters"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "### Parse user input"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.flashnotes.logic.parser` package. The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentTokenizer.java`:**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentMultimap.java`:**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "**`DeleteCommandParser.java`:**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommandParser.java`:**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## Add `Remark` to the model"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "foongsq"
        },
        "content": "Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of person data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person’s question). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "### Add a new `Remark` class"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "Create a new `Remark` in `seedu.flashnotes.model.flashcard`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "validation."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "### Make use of `Remark`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "## Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each person."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "Simply add the following to [`seedu.flashnotes.ui.PersonCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonListCard.fxml`:**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "That’s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "![$remark shows up in each entry](../images/add-remark/$Remark.png)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "## Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "### Modify `Person`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "### Update other usages of `Person`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "## Updating Storage"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "to see what the changes entail."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "## Finalizing the UI"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "## Putting everything together"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "### Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "![Congratulations!](../images/add-remark/RemarkComplete.png)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing tests"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "### Automatically generating tests"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is `methodName_testScenario_expectedResult`. An example would be"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "`execute_filteredList_success`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "foongsq"
        },
        "content": "Following convention, let’s change the question of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 6,
      "foongsq": 2,
      "-": 386
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Removing Fields\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Antoine de Saint-Exupery"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When working on AddressBook, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we’ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## Safely deleting `Address`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "### Assisted refactoring"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.flashnotes.model.flashcard.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "![Usages detected](../images/remove/UnsafeDelete.png)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "![List of conflicts](../images/remove/SafeDeleteConflicts.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Safe delete the field `address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Yes` when prompted to remove getters and setters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `View Usages` again.\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "### Manual refactoring"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "![$address](../images/remove/$address.png)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.fxml`**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "## Tidying up"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**`invalidPersonAddressBook.json`:**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "```json"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    \"question\": \"Person with invalid question field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 1,
      "foongsq": 1,
      "-": 101
    }
  },
  {
    "path": "docs/tutorials/TracingCode.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Tracing code\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Before we start"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "![ArchitectureDiagram](../images/ArchitectureDiagram.png)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "![Architecture sequence diagram from the developer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "guide](../images/ArchitectureSequenceDiagram.png)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows *between* the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram succeeds in informing the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting a break point"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in `seedu.flashnotes.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foongsq"
        },
        "content": "![Using the `Search for target by question` feature. `Navigate` \\\u003e `Symbol`.](../images/tracing/Execute.png)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we’re looking for. However, it is just an `Interface`. Let’s delve further and find the implementation of the interface by using the `Find Usages` feature in IntelliJ IDEA."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " ![LeftGutter](../images/tracing/LeftGutter.png)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "## Tracing the execution path"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to jot down what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "1. To start the debugging session, simply `Run` \\\u003e `Debug Main`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "1. Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "1. The Debugger tool window should show up and look something like this:\u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "1. Use the `Show execution point` feature to jump to the line of code that we stopped at:\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. We are interested in the `logic.execute(commandText)` portion of that line so let’s `Step in` into that method call:\u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    ![StepInto](../images/tracing/StepInto.png)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "1. We end up in `LogicManager#execute()`. Let’s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "   **LogicManager\\#execute().**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(String commandText)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "           throws CommandException, ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        //Logging, safe to ignore"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        //Parse user input from String to a Command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Executes the Command and stores the result"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            // since it\u0027s being stored here."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` the logging code since it is of no interest to us now. ![StepOver](../images/tracing/StepOver.png)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    **`AddressBookParser\\#parseCommand()`**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "   public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "       final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "       final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Variables](../images/tracing/Variables.png)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into the `switch`, we obviously stop at **`AddressBookParser\\#parseCommand()`.**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them\\!"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the `Variable` tool window.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "   ![EditCommand](../images/tracing/EditCommand.png)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far matches with the diagram?\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "1. Now let’s see what happens when we call `command#execute()`\\!"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "   **`EditCommand\\#execute()`:**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "       Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "       Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "       if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "           throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "       }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "       model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "1. As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    `JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "1. Again, it appears that the heavy lifting is delegated. Let’s take a look at `JsonSerializableAddressBook`\u0027s constructor."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    **`JsonSerializableAddressBook\\#JsonSerializableAddressBook()`:**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "   public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "       persons.addAll("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "           source.getPersonList()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                 .stream()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                 .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                 .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    **`ResultDisplay\\#setFeedbackToUser()`**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "1. Finally, we step through until we reach the end of"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "the result being displayed to the user. From this tutorial, you learned"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "more about the inner workings of AddressBook and how the various"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "components mesh together to form one cohesive product."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "execution path tracing. In some cases, you can do further tracing for"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "the given commands to find exactly what happens."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    instead? What exceptions do you think will be thrown(if any), where"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    will the exceptions be thrown and where will they be handled?"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  `edit 1`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "2.  What components will you have to modify to perform the following"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    enhancements to the application?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  Make command words case-insensitive"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  Add a new command"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  Add a new field to `Person`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  Add a new entity to the address book"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 1,
      "foongsq": 1,
      "-": 248
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/AppParameters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.FlashNotes;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.ReadOnlyFlashNotes;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.storage.FlashNotesStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.storage.JsonFlashNotesStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing FlashNotes ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        FlashNotesStorage flashNotesStorage \u003d new JsonFlashNotesStorage(userPrefs.getFlashNotesFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        storage \u003d new StorageManager(flashNotesStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s flashnotes book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * The data from the sample flashnotes book will be used instead if {@code storage}\u0027s flashnotes book is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * or an empty flashnotes book will be used instead if errors occur when reading {@code storage}\u0027s flashnotes book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Optional\u003cReadOnlyFlashNotes\u003e flashNotesOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        ReadOnlyFlashNotes initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            flashNotesOptional \u003d storage.readFlashNotes();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            if (!flashNotesOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample FlashNotes\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            initialData \u003d flashNotesOptional.orElseGet(SampleDataUtil::getSampleFlashNotes);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty FlashNotes\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            initialData \u003d new FlashNotes();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty FlashNotes\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            initialData \u003d new FlashNotes();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty FlashNotes\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        logger.info(\"Starting FlashNotes \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping FlashNotes ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            logger.info(\"Saving User Pref...\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            logger.info(\"Saving FlashNotes data...\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            storage.saveFlashNotes(model.getFlashNotes(), model.getUniqueDeckList());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            logger.severe(\"Failed to save preferences or data to file \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ FlashNotes Exited ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 5,
      "chuyouchia": 43,
      "-": 139
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/commons/core/Config.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the default height, width and position."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the specified height, width and position."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 1,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private static final String LOG_FILE \u003d \"flashnotes.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 2,
      "-": 110
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static final String MESSAGE_UNAVAILABLE_IN_REVIEW_MODE \u003d \"This command is not available in review mode. \""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            + \"Please exit the review mode by typing \u0027endReview\u0027 and try again.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static final String MESSAGE_ALREADY_IN_REVIEW_MODE \u003d \"You are already in review mode.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public static final String MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX \u003d \"The flashcard index provided is invalid\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_IN_HOME \u003d \"Cannot call command in home screen.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static final String MESSAGE_INVALID_DECK_DISPLAYED_INDEX \u003d \"The deck index provided is invalid.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_IN_CARD \u003d \"Cannot call command in card screen.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public static final String MESSAGE_FLASHCARDS_LISTED_OVERVIEW \u003d \"Inside Deck. %1$d flashcard(s) listed!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public static final String MESSAGE_DECK_OVERVIEW \u003d \"Back Home.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    // Messages for invalid commands used in home screen"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public static final String INVALID_ADDCARD_COMMAND_IN_HOME_MESSAGE \u003d \"You cannot add a flashcard in the home\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            + \" screen. Enter a deck by using the command `enterDeck DECKNAME` first.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public static final String INVALID_EDITCARD_COMMAND_IN_HOME_MESSAGE \u003d \"You cannot edit a flashcard in the home\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            + \" screen. Enter a deck by using the command `enterDeck DECKNAME` first.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public static final String INVALID_DELETECARD_COMMAND_IN_HOME_MESSAGE \u003d \"You cannot delete a flashcard in the\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            + \" home screen. Enter a deck by using the command `enterDeck DECKNAME` first.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public static final String INVALID_FIND_COMMAND_IN_HOME_MESSAGE \u003d \"You cannot find a flashcard in the\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            + \" home screen. Enter a deck by using the command `enterDeck DECKNAME` first.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public static final String INVALID_REVIEW_COMMAND_IN_HOME_MESSAGE \u003d \"You cannot review a deck in the\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            + \" home screen. Enter a deck by using the command `enterDeck DECKNAME` first.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public static final String INVALID_CORRECT_COMMAND_IN_HOME_MESSAGE \u003d \"You cannot mark a flashcard as correct \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            + \"in the home screen. Enter a deck by using the command `enterDeck DECKNAME` first and then enter \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            + \"the review mode with the command `review`.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public static final String INVALID_FLIP_COMMAND_IN_HOME_MESSAGE \u003d \"You cannot flip a flashcard \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            + \"in the home screen. Enter a deck by using the command `enterDeck DECKNAME` first and then enter \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            + \"the review mode with the command `review`.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public static final String INVALID_HOME_COMMAND_IN_HOME_MESSAGE \u003d \"You are already in the home screen.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public static final String INVALID_WRONG_COMMAND_IN_HOME_MESSAGE \u003d \"You cannot mark a flashcard as wrong \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            + \"in the home screen. Enter a deck by using the command `enterDeck n/DECKNAME` first and then enter \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            + \"the review mode with the command `review`.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public static final String INVALID_ENDREVIEW_COMMAND_IN_HOME_MESSAGE \u003d \"You cannot end a review \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            + \"in the home screen. Enter a deck by using the command `enterDeck DECKNAME` first and then enter \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            + \"the review mode with the command `review`.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public static final String INVALID_LIST_COMMAND_IN_HOME_MESSAGE \u003d \"You cannot list cards in home screen. \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            + \"You try the listAll command instead.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    // Messages for invalid commands used in review mode"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public static final String INVALID_ADDCARD_COMMAND_IN_REVIEW_MESSAGE \u003d \"You cannot add a flashcard in the\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            + \" review screen. Exit review mode by using the command `endReview` first.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public static final String INVALID_EDITCARD_COMMAND_IN_REVIEW_MESSAGE \u003d \"You cannot edit a flashcard in the\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            + \" review screen. Exit review mode by using the command `endReview` first.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public static final String INVALID_DELETECARD_COMMAND_IN_REVIEW_MESSAGE \u003d \"You cannot delete a flashcard in the\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            + \" review screen. Exit review mode by using the command `endReview` first.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public static final String INVALID_CLEAR_COMMAND_IN_REVIEW_MESSAGE \u003d \"You cannot clear flashcards in the\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            + \" review screen. Exit review mode by using the command `endReview` first.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public static final String INVALID_FIND_COMMAND_IN_REVIEW_MESSAGE \u003d \"You cannot find flashcards in the\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            + \" review screen. Exit review mode by using the command `endReview` first.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public static final String INVALID_SETREVIEWLIMIT_COMMAND_IN_REVIEW_MESSAGE \u003d \"You cannot set review limit in the\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            + \" review screen. Exit review mode by using the command `endReview` first.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public static final String INVALID_ENTERDECK_COMMAND_IN_REVIEW_MESSAGE \u003d \"You cannot enter a deck in the\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            + \" review screen. Exit review mode by using the command `endReview` first.\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public static final String INVALID_LISTALL_COMMAND_IN_REVIEW_MESSAGE \u003d \"You cannot list all flashcards in the\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            + \" review screen. Exit review mode by using the command `endReview` first.\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public static final String INVALID_ADDDECK_COMMAND_IN_REVIEW_MESSAGE \u003d \"You cannot add a deck in the\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            + \" review screen. Exit review mode by using the command `endReview` first.\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public static final String INVALID_EXIT_COMMAND_IN_REVIEW_MESSAGE \u003d \"You cannot exit review mode with this\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            + \" command. Exit review mode by using the command `endReview` first.\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public static final String INVALID_DELETEDECK_COMMAND_IN_REVIEW_MESSAGE \u003d \"You cannot delete a deck in the\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            + \" review screen. Exit review mode by using the command `endReview` first.\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public static final String INVALID_CHECKREVIEWLIMIT_COMMAND_IN_REVIEW_MESSAGE \u003d \"You cannot check review \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            + \"limit in the review screen. Exit review mode by using the command `endReview` first.\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public static final String INVALID_EDITDECKNAME_COMMAND_IN_REVIEW_MESSAGE \u003d \"You cannot edit deck name in \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            + \"the review screen. Exit review mode by using the command `endReview` first.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public static final String INVALID_HOME_COMMAND_IN_REVIEW_MESSAGE \u003d \"You cannot enter home command in \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            + \"the review screen. Exit review mode by using the command `endReview` first.\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public static final String INVALID_LIST_COMMAND_IN_REVIEW_MESSAGE \u003d \"You cannot list flashcards in the\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            + \" review screen. Exit review mode by using the command `endReview` first.\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    // Messages for invalid commands used in deck screen"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public static final String INVALID_ADDDECK_COMMAND_IN_DECK_MESSAGE \u003d \"You cannot add a deck in the\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            + \" deck screen. Exit deck mode by using the command `home` first.\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public static final String INVALID_CLEAR_COMMAND_IN_DECK_MESSAGE \u003d \"You cannot clear decks in the\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            + \" deck screen. Exit deck mode by using the command `home` first.\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public static final String INVALID_CORRECT_COMMAND_IN_DECK_MESSAGE \u003d \"You cannot mark a flashcard as correct \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            + \"in the deck screen. Enter the review mode with the command `review`.\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public static final String INVALID_DELETEDECK_COMMAND_IN_DECK_MESSAGE \u003d \"You cannot delete a deck in the\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            + \" deck screen. Exit deck mode by using the command `home` first.\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public static final String INVALID_ENTERDECK_COMMAND_IN_DECK_MESSAGE \u003d \"You are already in the\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            + \" deck screen. If you want to view another deck, exit deck mode by using the command `home` first.\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public static final String INVALID_FLIP_COMMAND_IN_DECK_MESSAGE \u003d \"You cannot flip a flashcard \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            + \"in the deck screen. Enter the review mode with the command `review`.\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public static final String INVALID_LISTALL_COMMAND_IN_DECK_MESSAGE \u003d \"You cannot list all in the\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            + \" deck screen. Use the `list` command or exit deck mode by using the command `home` first.\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public static final String INVALID_ENDREVIEW_COMMAND_IN_DECK_MESSAGE \u003d \"You cannot end a review \""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            + \"in the deck screen. Enter the review mode with the command `review`.\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public static final String INVALID_WRONG_COMMAND_IN_DECK_MESSAGE \u003d \"You cannot mark a flashcard as wrong \""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            + \"in the deck screen. Enter the review mode with the command `review`.\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public static final String INVALID_EDITDECKNAME_COMMAND_IN_DECK_MESSAGE \u003d \"You cannot edit deck name in the deck\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            + \" mode. Exit deck mode by using the command `home` first.\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    // Other messages"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public static final String MESSAGE_EXTENDED_COMMAND_ERROR \u003d \"This command contains more arguments than necessary. \""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            + \"\\nPlease try the command again without any arguments: %1$s\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static final String MESSAGE_INVALID_LIMIT \u003d \"Review card limit must be an integer greater than 0 and smaller\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            + \" than 2147483648.\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static final String MESSAGE_NO_CARDS_TO_REVIEW \u003d \"Cannot review an empty deck! Add cards using \""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            + \"\u0027addCard q/QUESTION a/ANSWER\u0027 first.\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 4,
      "pengxiangg": 7,
      "chuyouchia": 3,
      "foongsq": 8,
      "-": 11,
      "Sruthisarav": 76
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Version} with the given version details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 1,
      "-": 115
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/commons/exceptions/DataConversionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/commons/exceptions/IllegalValueException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/commons/util/AppUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets an {@code Image} from the specified path."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 2,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/commons/util/CollectionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/commons/util/ConfigUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word     cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        String[] wordsInPreppedSentenceNoPunctuation \u003d preppedSentence.split(\"[\\\\p{Punct}\\\\s]+\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase) || Arrays.stream(wordsInPreppedSentenceNoPunctuation)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        //return preppedSentence.toLowerCase().contains(preppedWord.toLowerCase());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pengxiangg": 5,
      "chuyouchia": 2,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.ReadOnlyFlashNotes;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.deck.Deck;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Returns the FlashNotes."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @see seedu.flashnotes.model.Model#getFlashNotes()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    ReadOnlyFlashNotes getFlashNotes();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of flashcards */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    ObservableList\u003cFlashcard\u003e getFilteredFlashcardList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of decks */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    ObservableList\u003cDeck\u003e getFilteredCardDeckList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * Returns an unmodifiable view of the flashcards to review."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    ObservableList\u003cFlashcard\u003e getFlashcardsToReview();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "     * Returns the modified list of flashcards to be reviewed"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    ObservableList\u003cFlashcard\u003e getModifiedFlashcardsToReview();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    /** Reset flashcard being reviewed back to false */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public void resetFlipOfFlashcardBeingReviewed();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Returns the user prefs\u0027 flashnotes file path."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    Path getFlashNotesFilePath();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * Returns the user prefs\u0027 review card limit."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    long getReviewCardLimit();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * Set the user prefs\u0027 review card limit."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    void setReviewCardLimit(long reviewCardLimit);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Update the user\u0027s review score for deck used in review."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @param reviewScore Integer value of user\u0027s review session score."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    void updateDeckPerformanceScore(Double reviewScore);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Turn off review mode."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    void setIsReviewModeFalse();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 13,
      "chuyouchia": 17,
      "foongsq": 15,
      "-": 36,
      "Sruthisarav": 8
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import seedu.flashnotes.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import seedu.flashnotes.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.logic.parser.FlashNotesParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.ReadOnlyFlashNotes;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.deck.Deck;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.storage.Storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private final FlashNotesParser flashNotesParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        flashNotesParser \u003d new FlashNotesParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        boolean isReviewMode \u003d model.getIsReviewMode();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        boolean isInDeck \u003d model.getIsInDeck();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        String deckName \u003d model.getCurrentDeckName();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        if (deckName \u003d\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            deckName \u003d Model.getDefaultDeckName();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        Command command \u003d flashNotesParser.parseCommand(commandText, isReviewMode, isInDeck, deckName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            storage.saveFlashNotes(model.getFlashNotes(), model.getUniqueDeckList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public ReadOnlyFlashNotes getFlashNotes() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return model.getFlashNotes();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public ObservableList\u003cFlashcard\u003e getFilteredFlashcardList() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return model.getFilteredFlashcardList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public ObservableList\u003cFlashcard\u003e getFlashcardsToReview() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return model.getFlashcardsToReview();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public ObservableList\u003cFlashcard\u003e getModifiedFlashcardsToReview() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        return model.getModifiedFlashcardsToReview();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public void resetFlipOfFlashcardBeingReviewed() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        model.resetFlipOfFlashcardBeingReviewed();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public ObservableList\u003cDeck\u003e getFilteredCardDeckList() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return model.getFilteredDeckList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    };"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    // User preferences methods"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public Path getFlashNotesFilePath() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return model.getFlashNotesFilePath();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public long getReviewCardLimit() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return model.getReviewCardLimit();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void setReviewCardLimit(long reviewCardLimit) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        model.setReviewCardLimit(reviewCardLimit);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Update the user\u0027s review score for deck used in review."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @param reviewScore Integer value of user\u0027s review session score."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void updateDeckPerformanceScore(Double reviewScore) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        if (!model.getCurrentDeckName().equals(Model.getReservedDeckName())) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            model.updateDeckPerformanceScore(reviewScore, model.getCurrentDeckName());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Turn off review mode."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void setIsReviewModeFalse() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        model.setIsReviewModeFalse();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 20,
      "pengxiangg": 7,
      "chuyouchia": 21,
      "foongsq": 20,
      "-": 59,
      "Sruthisarav": 12
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/logic/commands/AddCardCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.model.deck.Deck;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " * Adds a flashcard to the flashnotes."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "public class AddCardCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addCard\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a flashcard to the flashnotes. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            + PREFIX_QUESTION + \"QUESTION \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            + PREFIX_ANSWER + \"ANSWER \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            + PREFIX_QUESTION + \"Why is the sky blue? \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            + PREFIX_ANSWER + \"Because it\u0027s a reflection of the sea\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New flashcard added: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FLASHCARD \u003d \"This flashcard already exists in the flashnotes\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private final Flashcard toAdd;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private String additionalMessage \u003d \"\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Flashcard}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public AddCardCommand(Flashcard flashcard) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        requireNonNull(flashcard);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        toAdd \u003d flashcard;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        if (model.hasFlashcard(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_FLASHCARD);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        Tag tag \u003d toAdd.getTag();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        if (!model.hasDeck(new Deck(tag.tagName))) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            model.addDeck(new Deck(tag.tagName));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        model.addFlashcard(toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd) + additionalMessage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Adds an additional message behind the feedback for Command Result."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param additionalMessage given by the caller."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void setAdditionalMessage(String additionalMessage) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        requireNonNull(additionalMessage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        this.additionalMessage \u003d additionalMessage;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "                || (other instanceof AddCardCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCardCommand) other).toAdd));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 8,
      "pengxiangg": 8,
      "chuyouchia": 21,
      "foongsq": 2,
      "-": 28,
      "Sruthisarav": 7
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/logic/commands/AddDeckCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.logic.parser.CliSyntax.PREFIX_DECK_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.deck.Deck;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " * Adds a deck to the flashnotes."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class AddDeckCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addDeck\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a Deck to flashnotes. \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            + PREFIX_DECK_NAME + \"NAME \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            + PREFIX_DECK_NAME + \"CNM1046 \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New Deck added: %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_DECK \u003d \"This deck already exists in the FlashNotes.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private final Deck toAdd;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Creates an AddDeckCommand to add the specified {@code Deck}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public AddDeckCommand(Deck cardDeck) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        requireNonNull(cardDeck);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        toAdd \u003d cardDeck;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        if (model.hasDeck(toAdd)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_DECK);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        model.addDeck(toAdd);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd.getDeckName()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                || (other instanceof AddDeckCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddDeckCommand) other).toAdd));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pengxiangg": 2,
      "chuyouchia": 48,
      "foongsq": 1
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/logic/commands/CheckReviewLimitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": "package seedu.flashnotes.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import seedu.flashnotes.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": " * Checks user preferences for maximum number of cards that can be reviewed per session."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foongsq"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foongsq"
        },
        "content": "public class CheckReviewLimitCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"checkReviewLimit\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Review card limit is %d!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static final String MESSAGE_SUCCESS_NO_LIMIT \u003d \"There is no review limit. \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            + \"You can review all the flashcards in your deck.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * Constructor to check review card limit"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public CheckReviewLimitCommand() { }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        long reviewLimit \u003d model.getReviewCardLimit();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        if (reviewLimit \u003d\u003d Integer.MAX_VALUE) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS_NO_LIMIT));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, reviewLimit));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                || (other instanceof SetReviewLimitCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foongsq"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "foongsq": 42
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.FlashNotes;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " * Clears the flashnotes."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Flash Notes has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        model.setFlashNotes(new FlashNotes());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 6,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /** Start the review session **/"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private final boolean startReview;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    /** Determines whether a card has been flipped **/"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    private final boolean isFlipped;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    /** Go to the next card in the review mode **/"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    private final int isNext;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, boolean startReview,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "                         boolean isFlipped, int isNext) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.startReview \u003d startReview;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        this.isFlipped \u003d isFlipped;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        this.isNext \u003d isNext;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        this(feedbackToUser, false, false, false, false, 0);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public boolean isStartReview() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return startReview;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public boolean isFlipped() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        return isFlipped;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public int isNext() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        return isNext;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public boolean isHome() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return feedbackToUser.startsWith(\"Back Home.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public boolean isDeck() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return feedbackToUser.startsWith(\"Inside Deck.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return this.feedbackToUser;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                \u0026\u0026 startReview \u003d\u003d otherCommandResult.startReview"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                \u0026\u0026 isFlipped \u003d\u003d otherCommandResult.isFlipped"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                \u0026\u0026 isNext \u003d\u003d otherCommandResult.isNext;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 9,
      "foongsq": 17,
      "-": 67,
      "Sruthisarav": 19
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/logic/commands/CorrectCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "package seedu.flashnotes.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import seedu.flashnotes.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": " * Marks the flashcard being reviewed as correct."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "public class CorrectCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"c\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static final String MESSAGE_CORRECT_ACKNOWLEDGEMENT \u003d \"Marked Flashcard as correct.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static final String MESSAGE_CORRECT_ERROR \u003d \"Please flip the card to check your answer before marking\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            + \" it as correct or wrong. \\nEnter `f` to flip.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        if (model.getIsFlashcardFlipped()) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            model.updateFlashcardBeingReviewed(2);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            return new CommandResult(MESSAGE_CORRECT_ERROR, false, false,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "                    true, false, 0);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        return new CommandResult(MESSAGE_CORRECT_ACKNOWLEDGEMENT, false, false,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "                true, false, 2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foongsq": 3,
      "Sruthisarav": 24
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/logic/commands/DeleteCardCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " * Deletes a flashcard identified using it\u0027s displayed index from the flashnotes."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "public class DeleteCardCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteCard\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            + \": Deletes the flashcard identified by the index number used in the displayed flashcard list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public static final String MESSAGE_DELETE_FLASHCARD_SUCCESS \u003d \"Deleted Flashcard: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public DeleteCardCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        List\u003cFlashcard\u003e lastShownList \u003d model.getFilteredFlashcardList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        Flashcard flashcardToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        model.deleteFlashcard(flashcardToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_FLASHCARD_SUCCESS, flashcardToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "                || (other instanceof DeleteCardCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCardCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 7,
      "chuyouchia": 7,
      "-": 34,
      "Sruthisarav": 5
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/logic/commands/DeleteDeckCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "package seedu.flashnotes.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.model.deck.Deck;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": " * Deletes a deck and all its corresponding cards from FlashNotes."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "public class DeleteDeckCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteDeck\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes a Deck from flashnotes. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            + \"INDEX\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            + \"1 \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public static final String MESSAGE_DELETE_DECK_SUCCESS \u003d \"Deleted deck: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(DeleteDeckCommand.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "     * Creates a delete deck command that deletes the specified deck and all cards in the deck."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public DeleteDeckCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        List\u003cDeck\u003e lastShownList \u003d model.getFilteredDeckList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        logger.info(\"List of size \" + lastShownList.size() + \" retrieved\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DECK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        Deck deckToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assert deckToDelete !\u003d null : \"Deck should exist\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        model.deleteDeck(deckToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_DECK_SUCCESS, deckToDelete.getDeckName()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                || (other instanceof DeleteDeckCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteDeckCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pengxiangg": 68
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/logic/commands/EditCardCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.model.Model.PREDICATE_SHOW_ALL_FLASHCARDS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.model.deck.Deck;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.Answer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.Question;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.model.tag.TagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " * Edits the details of an existing flashcard in the flashnotes."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "public class EditCardCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editCard\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the flashcard identified \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            + \"by the index number used in the displayed flashcard list. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            + \"[\" + PREFIX_QUESTION + \"QUESTION] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            + \"[\" + PREFIX_ANSWER + \"ANSWER] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            + PREFIX_ANSWER + \"91234567 \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public static final String MESSAGE_EDIT_FLASHCARD_SUCCESS \u003d \"Edited Flashcard: %1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FLASHCARD \u003d \"This flashcard already exists in the flashnotes.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private final EditFlashcardDescriptor editFlashcardDescriptor;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @param index of the flashcard in the filtered flashcard list to edit"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @param editFlashcardDescriptor details to edit the flashcard with"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public EditCardCommand(Index index, EditFlashcardDescriptor editFlashcardDescriptor) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        requireNonNull(editFlashcardDescriptor);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        this.editFlashcardDescriptor \u003d new EditFlashcardDescriptor(editFlashcardDescriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        List\u003cFlashcard\u003e lastShownList \u003d model.getFilteredFlashcardList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        Flashcard flashcardToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        String currentDeckName \u003d model.getCurrentDeckName();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        boolean isInList \u003d false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        if (currentDeckName.equals(Model.getReservedDeckName())) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            currentDeckName \u003d Model.getDefaultDeckName();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            isInList \u003d true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        Flashcard editedFlashcard \u003d createEditedFlashcard(flashcardToEdit, editFlashcardDescriptor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        if (!flashcardToEdit.isSameFlashcard(editedFlashcard) \u0026\u0026 model.hasFlashcard(editedFlashcard)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_FLASHCARD);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        model.setFlashcard(flashcardToEdit, editedFlashcard);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        String editedDeckName \u003d editedFlashcard.getTag().tagName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        if (!model.hasDeck(new Deck(editedDeckName))) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            model.addDeck(new Deck(editedDeckName));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        if (isInList) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            model.updateFilteredFlashcardList(PREDICATE_SHOW_ALL_FLASHCARDS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            model.updateFilteredFlashcardList(new TagContainsKeywordsPredicate(currentDeckName));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_FLASHCARD_SUCCESS, editedFlashcard));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Creates and returns a {@code Flashcard} with the details of {@code flashcardToEdit}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * edited with {@code editFlashcardDescriptor}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private static Flashcard createEditedFlashcard(Flashcard flashcardToEdit,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                                                   EditFlashcardDescriptor editFlashcardDescriptor) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assert flashcardToEdit !\u003d null;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        Question updatedQuestion \u003d editFlashcardDescriptor.getQuestion().orElse(flashcardToEdit.getQuestion());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        Answer updatedAnswer \u003d editFlashcardDescriptor.getAnswer().orElse(flashcardToEdit.getAnswer());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        Tag updatedTag \u003d editFlashcardDescriptor.getTag().orElse(flashcardToEdit.getTag());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        return new Flashcard(updatedQuestion, updatedAnswer, updatedTag);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        if (!(other instanceof EditCardCommand)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        EditCardCommand e \u003d (EditCardCommand) other;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                \u0026\u0026 editFlashcardDescriptor.equals(e.editFlashcardDescriptor);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Stores the details to edit the flashcard with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * corresponding field value of the flashcard."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public static class EditFlashcardDescriptor {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        private Question question;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        private Answer answer;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        private Tag tag;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        public EditFlashcardDescriptor() {}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        public EditFlashcardDescriptor(EditFlashcardDescriptor toCopy) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            setQuestion(toCopy.question);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            setAnswer(toCopy.answer);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            setTag(toCopy.tag);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            return CollectionUtil.isAnyNonNull(question, answer, tag);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        public void setQuestion(Question question) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            this.question \u003d question;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        public Optional\u003cQuestion\u003e getQuestion() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            return Optional.ofNullable(question);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        public void setAnswer(Answer answer) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            this.answer \u003d answer;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        public Optional\u003cAnswer\u003e getAnswer() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            return Optional.ofNullable(answer);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public void setTag(Tag tag) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            this.tag \u003d tag;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public Optional\u003cTag\u003e getTag() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            return Optional.ofNullable(tag);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            if (!(other instanceof EditFlashcardDescriptor)) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            EditFlashcardDescriptor e \u003d (EditFlashcardDescriptor) other;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            return getQuestion().equals(e.getQuestion())"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "                    \u0026\u0026 getAnswer().equals(e.getAnswer())"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                    \u0026\u0026 getTag().equals(e.getTag());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 31,
      "pengxiangg": 31,
      "chuyouchia": 15,
      "foongsq": 8,
      "-": 98,
      "Sruthisarav": 19
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/logic/commands/EditDeckNameCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "package seedu.flashnotes.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.logic.parser.CliSyntax.PREFIX_NEW_DECK_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.model.deck.Deck;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.model.flashcard.Answer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.model.flashcard.Question;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.model.tag.TagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": " * Edits the deck name and tags of corresponding cards."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "public class EditDeckNameCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editDeckName\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the deck name and \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            + \"the tag of all corresponding cards to the specified keyword\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            + \"INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            + PREFIX_NEW_DECK_NAME + \"NEW DECK NAME \\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            + PREFIX_NEW_DECK_NAME + \"History \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Deck edited successfully: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_DECK \u003d \"The deck name that you are trying to use already exists. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            + \"Please enter a new deck name.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(EditDeckNameCommand.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    private final Deck newDeck;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "     * @param index of deck to be edited."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "     * @param newDeck details of new deck."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public EditDeckNameCommand(Index index, Deck newDeck) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        requireNonNull(newDeck);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        this.newDeck \u003d newDeck;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        List\u003cDeck\u003e lastShownList \u003d model.getFilteredDeckList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DECK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        if (model.hasDeck(newDeck)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_DECK);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        // Transfer Results Statistics from old deck to new deck"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        Deck deckToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        String resultStatistics \u003d deckToEdit.getResultStatistics();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        newDeck.setResultStatistics(resultStatistics);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        model.setDeck(deckToEdit, newDeck);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        logger.info(\"Old Deck: \" + deckToEdit.getDeckName() + \" with stats: \" + deckToEdit.getResultStatistics()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                + \". New Deck: \" + newDeck.getDeckName() + \" with stats: \" + newDeck.getResultStatistics());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        changeTagOfCards(deckToEdit.getDeckName(), newDeck.getDeckName(), model);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        model.updateFilteredDeckList(Model.PREDICATE_SHOW_ALL_DECKS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, newDeck.getDeckName()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "     * Updates the tags of the cards with the new deck name"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    private void changeTagOfCards(String deckName, String newDeckName, Model model) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        model.updateFilteredFlashcardList(new TagContainsKeywordsPredicate(deckName));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        List\u003cFlashcard\u003e cardsWithTag \u003d model.getFilteredFlashcardList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        if (cardsWithTag.size() \u003e 0) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            while (cardsWithTag.size() !\u003d 0) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                Flashcard flashcardToEdit \u003d cardsWithTag.get(0);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                Flashcard editedFlashcard \u003d createEditedTagFlashcard(flashcardToEdit, new Tag(newDeckName));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                model.setFlashcard(flashcardToEdit, editedFlashcard);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    private Flashcard createEditedTagFlashcard(Flashcard flashcardToEdit, Tag editedTag) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assert flashcardToEdit !\u003d null;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        Question question \u003d flashcardToEdit.getQuestion();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        Answer answer \u003d flashcardToEdit.getAnswer();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        return new Flashcard(question, answer, editedTag);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                \u0026\u0026 index.equals(((EditDeckNameCommand) other).index))"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                \u0026\u0026 newDeck.equals(((EditDeckNameCommand) other).newDeck); // state check"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pengxiangg": 117,
      "foongsq": 2
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/logic/commands/EndReviewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rachel170"
        },
        "content": "package seedu.flashnotes.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import seedu.flashnotes.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rachel170"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rachel170"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rachel170"
        },
        "content": "public class EndReviewCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"endReview\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Review Session as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // Turn review mode off in model"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        model.setIsReviewModeFalse();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false, false, 0);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rachel170"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 20,
      "foongsq": 1
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/logic/commands/EnterDeckCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "package seedu.flashnotes.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.model.deck.Deck;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.model.tag.TagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": " * Finds and lists all flashcards in flashnotes which has tags matching any of the argument keywords."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " * Tags of the flashcards correspond to the decks that they are in with a 1-1 relationship."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": " * Keyword matching is case sensitive."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "public class EnterDeckCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"enterDeck\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            + \": Lists the flashcards that belong to specified deck\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            + \"Parameters: KEYWORD\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" Singapore\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public static final String MESSAGE_DECK_NOT_FOUND \u003d \"Deck does not exist in flashnotes\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    private final TagContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "     * Creates a command that shows all cards inside the deck created by the keyword of the predicate"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public EnterDeckCommand(TagContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        if (!model.hasDeck(new Deck(predicate.getKeyword()))) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new CommandException(MESSAGE_DECK_NOT_FOUND);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        model.updateFilteredFlashcardList(predicate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        model.setIsInDeckTrue();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        model.setCurrentDeckName(predicate.getKeyword());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                String.format(Messages.MESSAGE_FLASHCARDS_LISTED_OVERVIEW, model.getFilteredFlashcardList().size()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                || (other instanceof EnterDeckCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                \u0026\u0026 predicate.equals(((EnterDeckCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pengxiangg": 59,
      "chuyouchia": 1
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Flash Notes as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false, false, 0);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 3,
      "-": 15,
      "Sruthisarav": 1
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.QuestionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.model.tag.TagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " * Finds and lists all flashcards in flashnotes which has question matching any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all flashcards which has questions contain any \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            + \"of the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" where\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"%1$d flashcard(s) found\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private final QuestionContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public FindCommand(QuestionContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        String currentDeckName \u003d model.getCurrentDeckName();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        if (currentDeckName.equals(ListAllCommand.DECK_NAME)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            model.updateFilteredFlashcardList(predicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            model.updateFilteredFlashcardList(predicate.and(new TagContainsKeywordsPredicate(currentDeckName)));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                String.format(MESSAGE_SUCCESS, model.getFilteredFlashcardList().size()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 3,
      "pengxiangg": 10,
      "chuyouchia": 4,
      "foongsq": 2,
      "-": 30,
      "Sruthisarav": 1
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/logic/commands/FlipCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "package seedu.flashnotes.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import seedu.flashnotes.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": " * Flips the card in review mode"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "public class FlipCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"f\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static final String MESSAGE_FLIP_ACKNOWLEDGEMENT \u003d \"Flashcard is flipped!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        model.carryOutFlipCommand();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        return new CommandResult(MESSAGE_FLIP_ACKNOWLEDGEMENT, false, false, true, true, 0);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foongsq": 1,
      "Sruthisarav": 17
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, false, false, 0);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 2,
      "-": 18,
      "Sruthisarav": 1
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/logic/commands/HomeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.core.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " * Returns FlashNotes from card mode back into the main mode."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class HomeCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"home\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            + \": Lists the decks that are available in flashnotes\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        model.updateFilteredDeckList(Model.PREDICATE_SHOW_ALL_DECKS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        model.setIsInDeckFalse();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return new CommandResult(Messages.MESSAGE_DECK_OVERVIEW);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return other \u003d\u003d this || (other instanceof HomeCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pengxiangg": 1,
      "chuyouchia": 28
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/logic/commands/ListAllCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.model.Model.PREDICATE_SHOW_ALL_FLASHCARDS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " * Lists all flashcards in the flashnotes to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "public class ListAllCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listAll\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d Messages.MESSAGE_FLASHCARDS_LISTED_OVERVIEW"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            + \" \" + \"Listed all flashcards\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public static final String DECK_NAME \u003d Model.getReservedDeckName();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        model.updateFilteredFlashcardList(PREDICATE_SHOW_ALL_FLASHCARDS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        model.setIsInDeckTrue();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        model.setCurrentDeckName(DECK_NAME);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                String.format(MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                        model.getFilteredFlashcardList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 1,
      "pengxiangg": 15,
      "chuyouchia": 4,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "package seedu.flashnotes.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.model.Model.PREDICATE_SHOW_ALL_FLASHCARDS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.model.tag.TagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": " * Lists all the cards in a deck to the user. Only works when the user is already in the deck."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Showing flashcards in deck. %1$d flashcard(s) listed.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        String currentDeckName \u003d model.getCurrentDeckName();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        if (currentDeckName.equals(Model.getReservedDeckName())) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            model.updateFilteredFlashcardList(PREDICATE_SHOW_ALL_FLASHCARDS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            TagContainsKeywordsPredicate predicate \u003d new TagContainsKeywordsPredicate(currentDeckName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            model.updateFilteredFlashcardList(predicate);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                String.format(MESSAGE_SUCCESS, model.getFilteredFlashcardList().size()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pengxiangg": 33,
      "Sruthisarav": 1
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/logic/commands/ReviewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": "package seedu.flashnotes.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import seedu.flashnotes.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import seedu.flashnotes.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": " * Starts a review session."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": "public class ReviewCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"review\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Starts a flashcard review session.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static final String SHOWING_REVIEW_MESSAGE \u003d \"Opened review window.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        boolean isReviewListEmpty \u003d model.getFilteredFlashcardList().size() \u003d\u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        if (isReviewListEmpty) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_CARDS_TO_REVIEW);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        model.setUpReviewList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        model.setIsReviewModeTrue();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        return new CommandResult(SHOWING_REVIEW_MESSAGE, false, false, true, false, 0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foongsq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 3,
      "foongsq": 26,
      "Sruthisarav": 1
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/logic/commands/SetReviewLimitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": "package seedu.flashnotes.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.MESSAGE_INVALID_LIMIT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import seedu.flashnotes.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import seedu.flashnotes.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foongsq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foongsq"
        },
        "content": " * Sets user preferences for maximum number of cards that can be reviewed per session."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foongsq"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": "public class SetReviewLimitCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"setReviewLimit\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            + \": Sets user preferences for maximum number of cards that can \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            + \"be reviewed per session.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            + \"Parameters: NUMBER or STRING\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 20\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            + \" or \" + COMMAND_WORD + \" all\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Review card limit successfully updated! \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            + \"Review limit is now %d.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static final String MESSAGE_SUCCESS_NO_LIMIT \u003d \"Review card limit successfully updated! \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            + \"There is now no review limit.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static final String MESSAGE_INVALID_LIMIT \u003d \"Review card limit must be an integer greater \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            + \"than 0 and smaller than 2147483648.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private final long reviewCardLimit;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * Constructor to set review card limit"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param reviewCardLimit"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public SetReviewLimitCommand(long reviewCardLimit) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        requireNonNull(reviewCardLimit);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.reviewCardLimit \u003d reviewCardLimit;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        boolean isReviewLimitInvalid \u003d reviewCardLimit \u003c 1 || reviewCardLimit \u003e Integer.MAX_VALUE;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        if (isReviewLimitInvalid) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_LIMIT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        model.setReviewCardLimit(reviewCardLimit);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        long newReviewLimit \u003d model.getReviewCardLimit();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        if (newReviewLimit \u003d\u003d Integer.MAX_VALUE) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS_NO_LIMIT));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, newReviewLimit));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                || (other instanceof SetReviewLimitCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                \u0026\u0026 reviewCardLimit \u003d\u003d (((SetReviewLimitCommand) other).reviewCardLimit));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foongsq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foongsq": 64,
      "Sruthisarav": 1
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/logic/commands/WrongCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "package seedu.flashnotes.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import seedu.flashnotes.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": " * Marks the flashcard being reviewed as wrong."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "public class WrongCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"w\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static final String MESSAGE_WRONG_ACKNOWLEDGEMENT \u003d \"Marked Flashcard as wrong.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static final String MESSAGE_WRONG_ERROR \u003d \"Please flip the card to check your answer before marking\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            + \" it as correct or wrong. \\nEnter `f` to flip.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        if (model.getIsFlashcardFlipped()) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            model.updateFlashcardBeingReviewed(1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            model.addFlashcardToReview();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            return new CommandResult(MESSAGE_WRONG_ERROR, false, false,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "                    true, false, 0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        return new CommandResult(MESSAGE_WRONG_ACKNOWLEDGEMENT, false, false, true, false, 1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foongsq": 3,
      "Sruthisarav": 23
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/logic/parser/AddCardCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import seedu.flashnotes.logic.commands.AddCardCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.Answer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.Question;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "public class AddCardCommandParser implements Parser\u003cAddCardCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public AddCardCommand parse(String args, String deckName) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_QUESTION, PREFIX_ANSWER);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String additionalMessage \u003d \"\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assert deckName !\u003d null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        if (deckName.equals(Model.getReservedDeckName())) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            deckName \u003d Model.getDefaultDeckName();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_QUESTION, PREFIX_ANSWER)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCardCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        if (argMultimap.getCountValue(PREFIX_QUESTION).get() \u003e 1) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            additionalMessage +\u003d \"\\nThere are more than 1 occurrences of q/ prefix. Only the last one is taken.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        if (argMultimap.getCountValue(PREFIX_ANSWER).get() \u003e 1) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            additionalMessage +\u003d \"\\nThere are more than 1 occurrences of a/ prefix. Only the last one is taken.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        Question question \u003d ParserUtil.parseQuestion(argMultimap.getValue(PREFIX_QUESTION).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        Answer answer \u003d ParserUtil.parseAnswer(argMultimap.getValue(PREFIX_ANSWER).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        Tag tag \u003d new Tag(deckName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        Flashcard flashcard \u003d new Flashcard(question, answer, tag);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        AddCardCommand addCardCommand \u003d new AddCardCommand(flashcard);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        addCardCommand.setAdditionalMessage(additionalMessage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        return addCardCommand;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public AddCardCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        return parse(userInput, \"Default\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pengxiangg": 15,
      "chuyouchia": 19,
      "foongsq": 1,
      "-": 29,
      "Sruthisarav": 12
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/logic/parser/AddDeckCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.logic.parser.CliSyntax.PREFIX_DECK_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.logic.commands.AddDeckCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.deck.Deck;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " * Parses input arguments and creates a new AddDeckCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class AddDeckCommandParser implements Parser\u003cAddDeckCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddDeckCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * and returns an AddDeckCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public AddDeckCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DECK_NAME);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DECK_NAME)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddDeckCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Deck theDeck \u003d ParserUtil.parseDeckName(argMultimap.getValue(PREFIX_DECK_NAME).get());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return new AddDeckCommand(theDeck);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 42
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/logic/parser/ArgumentMultimap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /** Keeps Track of number of Times the argument is added. **/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private final Map\u003cPrefix, Integer\u003e argMultimapCounter \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * The relevant count of occurrences are updated in the argMultimapCounter accordingly if there are repeats."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        if (argMultimapCounter.get(prefix) \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            argMultimapCounter.put(prefix, 1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            int count \u003d argMultimapCounter.get(prefix) + 1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            argMultimapCounter.put(prefix, count);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Returns the occurrences of {@code prefix}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public Optional\u003cInteger\u003e getCountValue(Prefix prefix) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Integer value \u003d argMultimapCounter.get(prefix);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return value \u003d\u003d null ? Optional.empty() : Optional.of(value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 20,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static final Prefix PREFIX_QUESTION \u003d new Prefix(\"q/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public static final Prefix PREFIX_ANSWER \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public static final Prefix PREFIX_DECK_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public static final Prefix PREFIX_NEW_DECK_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pengxiangg": 1,
      "chuyouchia": 2,
      "foongsq": 1,
      "-": 10,
      "Sruthisarav": 1
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/logic/parser/DeleteCardCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import seedu.flashnotes.logic.commands.DeleteCardCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "public class DeleteCardCommandParser implements Parser\u003cDeleteCardCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public DeleteCardCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assert args !\u003d null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            return new DeleteCardCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT + \"\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                            + pe.getMessage(), DeleteCardCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pengxiangg": 2,
      "chuyouchia": 5,
      "-": 20,
      "Sruthisarav": 4
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/logic/parser/DeleteDeckCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "package seedu.flashnotes.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.logic.commands.DeleteDeckCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "public class DeleteDeckCommandParser implements Parser\u003cDeleteDeckCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public DeleteDeckCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            return new DeleteDeckCommand(index);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                            + \"\\n\" + pe.getMessage(), DeleteDeckCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pengxiangg": 24
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/logic/parser/EditCardCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import seedu.flashnotes.logic.commands.EditCardCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "public class EditCardCommandParser implements Parser\u003cEditCardCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public EditCardCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_QUESTION, PREFIX_ANSWER, PREFIX_TAG);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                    + \"\\n\" + pe.getMessage(), EditCardCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        EditCardCommand.EditFlashcardDescriptor editFlashcardDescriptor \u003d new EditCardCommand.EditFlashcardDescriptor();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        if (argMultimap.getValue(PREFIX_QUESTION).isPresent()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            editFlashcardDescriptor.setQuestion(ParserUtil.parseQuestion(argMultimap.getValue(PREFIX_QUESTION).get()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ANSWER).isPresent()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            editFlashcardDescriptor.setAnswer(ParserUtil.parseAnswer(argMultimap.getValue(PREFIX_ANSWER).get()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TAG).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            editFlashcardDescriptor.setTag(ParserUtil.parseTag(argMultimap.getValue(PREFIX_TAG).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        if (!editFlashcardDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new ParseException(EditCardCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        ParserUtil.parseDeckName(editFlashcardDescriptor.getTag().toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        return new EditCardCommand(index, editFlashcardDescriptor);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 3,
      "pengxiangg": 6,
      "chuyouchia": 9,
      "foongsq": 1,
      "-": 30,
      "Sruthisarav": 9
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/logic/parser/EditDeckNameCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "package seedu.flashnotes.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.logic.parser.CliSyntax.PREFIX_NEW_DECK_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.logic.commands.EditDeckNameCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.model.deck.Deck;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "public class EditDeckNameCommandParser implements Parser\u003cEditDeckNameCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public EditDeckNameCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        ArgumentMultimap argMultiMap \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NEW_DECK_NAME);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        if (!argMultiMap.getValue(PREFIX_NEW_DECK_NAME).isPresent()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                    EditDeckNameCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultiMap.getPreamble());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT + \"\\n\" + pe.getMessage(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                    EditDeckNameCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        Deck newDeck \u003d ParserUtil.parseDeckName(argMultiMap.getValue(PREFIX_NEW_DECK_NAME).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        return new EditDeckNameCommand(index, newDeck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pengxiangg": 41
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/logic/parser/EnterDeckCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "package seedu.flashnotes.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.logic.commands.EnterDeckCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.model.tag.TagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": " * Parses input arguments and creates a new ListTagsCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "public class EnterDeckCommandParser implements Parser\u003cEnterDeckCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListTagsCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "     * and returns a ListTagsCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public EnterDeckCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EnterDeckCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        return new EnterDeckCommand(new TagContainsKeywordsPredicate(trimmedArgs));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pengxiangg": 30
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.QuestionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return new FindCommand(new QuestionContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 5,
      "foongsq": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/logic/parser/FlashNotesParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_ADDCARD_COMMAND_IN_HOME_MESSAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_ADDCARD_COMMAND_IN_REVIEW_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_ADDDECK_COMMAND_IN_DECK_MESSAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_ADDDECK_COMMAND_IN_REVIEW_MESSAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_CHECKREVIEWLIMIT_COMMAND_IN_REVIEW_MESSAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_CLEAR_COMMAND_IN_DECK_MESSAGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_CLEAR_COMMAND_IN_REVIEW_MESSAGE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_CORRECT_COMMAND_IN_DECK_MESSAGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_CORRECT_COMMAND_IN_HOME_MESSAGE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_DELETECARD_COMMAND_IN_HOME_MESSAGE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_DELETECARD_COMMAND_IN_REVIEW_MESSAGE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_DELETEDECK_COMMAND_IN_DECK_MESSAGE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_DELETEDECK_COMMAND_IN_REVIEW_MESSAGE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_EDITCARD_COMMAND_IN_HOME_MESSAGE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_EDITCARD_COMMAND_IN_REVIEW_MESSAGE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_EDITDECKNAME_COMMAND_IN_DECK_MESSAGE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_EDITDECKNAME_COMMAND_IN_REVIEW_MESSAGE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_ENDREVIEW_COMMAND_IN_DECK_MESSAGE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_ENDREVIEW_COMMAND_IN_HOME_MESSAGE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_ENTERDECK_COMMAND_IN_DECK_MESSAGE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_ENTERDECK_COMMAND_IN_REVIEW_MESSAGE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_EXIT_COMMAND_IN_REVIEW_MESSAGE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_FIND_COMMAND_IN_HOME_MESSAGE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_FIND_COMMAND_IN_REVIEW_MESSAGE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_FLIP_COMMAND_IN_DECK_MESSAGE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_FLIP_COMMAND_IN_HOME_MESSAGE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_HOME_COMMAND_IN_HOME_MESSAGE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_HOME_COMMAND_IN_REVIEW_MESSAGE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_LISTALL_COMMAND_IN_DECK_MESSAGE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_LISTALL_COMMAND_IN_REVIEW_MESSAGE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_LIST_COMMAND_IN_HOME_MESSAGE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_LIST_COMMAND_IN_REVIEW_MESSAGE;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_REVIEW_COMMAND_IN_HOME_MESSAGE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_SETREVIEWLIMIT_COMMAND_IN_REVIEW_MESSAGE;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_WRONG_COMMAND_IN_DECK_MESSAGE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_WRONG_COMMAND_IN_HOME_MESSAGE;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.MESSAGE_ALREADY_IN_REVIEW_MODE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.MESSAGE_EXTENDED_COMMAND_ERROR;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.MESSAGE_UNAVAILABLE_IN_REVIEW_MODE;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.logic.commands.AddCardCommand;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.logic.commands.AddDeckCommand;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.logic.commands.CheckReviewLimitCommand;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.logic.commands.Command;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.logic.commands.CorrectCommand;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.logic.commands.DeleteCardCommand;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.logic.commands.DeleteDeckCommand;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.logic.commands.EditCardCommand;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.logic.commands.EditDeckNameCommand;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.logic.commands.EndReviewCommand;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.logic.commands.EnterDeckCommand;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.logic.commands.FlipCommand;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.logic.commands.HomeCommand;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.logic.commands.ListAllCommand;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.logic.commands.ReviewCommand;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.logic.commands.SetReviewLimitCommand;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.logic.commands.WrongCommand;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class FlashNotesParser {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public Command parseCommand(String userInput, boolean isReviewMode, boolean isInDeck, String deckName)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        if (isReviewMode) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            assert isInDeck : \"Program should be in card mode before entering review mode\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            return parseCommandInReviewMode(commandWord, arguments);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        if (!isInDeck) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            assert !isReviewMode : \"Program should not be in review mode\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            return parseCommandInMainMode(commandWord, arguments);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            assert !isReviewMode : \"Program should not be in review mode\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            return parseCommandInCardMode(commandWord, arguments, deckName);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private Command parseCommandInReviewMode(String commandWord, String arguments) throws ParseException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        case AddCardCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        case EditCardCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        case DeleteCardCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        case AddDeckCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        case EnterDeckCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        case ListAllCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        case SetReviewLimitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        case CheckReviewLimitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        case DeleteDeckCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        case EditDeckNameCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        case HomeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        case ReviewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            return parseInvalidCommandInReviewMode(commandWord);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        case FlipCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // There should be no arguments for flip command"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            if (hasArguments(arguments)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                // If arguments exist, throw ParseException"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_EXTENDED_COMMAND_ERROR, FlipCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            return new FlipCommand();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        case CorrectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // There should be no arguments for correct command"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            if (hasArguments(arguments)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                // If arguments exist, throw ParseException"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_EXTENDED_COMMAND_ERROR, CorrectCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            return new CorrectCommand();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        case WrongCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // There should be no arguments for wrong command"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            if (hasArguments(arguments)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                // If arguments exist, throw ParseException"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_EXTENDED_COMMAND_ERROR, WrongCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            return new WrongCommand();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        case EndReviewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // There should be no arguments for endReview command"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            if (hasArguments(arguments)) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                // If arguments exist, throw ParseException"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_EXTENDED_COMMAND_ERROR, EndReviewCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            return new EndReviewCommand();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // There should be no arguments for help command"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            if (hasArguments(arguments)) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                // If arguments exist, throw ParseException"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_EXTENDED_COMMAND_ERROR, HelpCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    private Command parseInvalidCommandInReviewMode("
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            String commandWord) throws ParseException {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        case AddCardCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new ParseException(INVALID_ADDCARD_COMMAND_IN_REVIEW_MESSAGE);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        case EditCardCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new ParseException(INVALID_EDITCARD_COMMAND_IN_REVIEW_MESSAGE);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        case DeleteCardCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new ParseException(INVALID_DELETECARD_COMMAND_IN_REVIEW_MESSAGE);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new ParseException(INVALID_CLEAR_COMMAND_IN_REVIEW_MESSAGE);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new ParseException(INVALID_FIND_COMMAND_IN_REVIEW_MESSAGE);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        case CheckReviewLimitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            throw new ParseException(INVALID_CHECKREVIEWLIMIT_COMMAND_IN_REVIEW_MESSAGE);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        case SetReviewLimitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new ParseException(INVALID_SETREVIEWLIMIT_COMMAND_IN_REVIEW_MESSAGE);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        case EnterDeckCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new ParseException(INVALID_ENTERDECK_COMMAND_IN_REVIEW_MESSAGE);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        case ListAllCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new ParseException(INVALID_LISTALL_COMMAND_IN_REVIEW_MESSAGE);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        case AddDeckCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new ParseException(INVALID_ADDDECK_COMMAND_IN_REVIEW_MESSAGE);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new ParseException(INVALID_EXIT_COMMAND_IN_REVIEW_MESSAGE);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        case DeleteDeckCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new ParseException(INVALID_DELETEDECK_COMMAND_IN_REVIEW_MESSAGE);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        case EditDeckNameCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new ParseException(INVALID_EDITDECKNAME_COMMAND_IN_REVIEW_MESSAGE);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        case HomeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new ParseException(INVALID_HOME_COMMAND_IN_REVIEW_MESSAGE);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        case ReviewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new ParseException(MESSAGE_ALREADY_IN_REVIEW_MODE);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new ParseException(INVALID_LIST_COMMAND_IN_REVIEW_MESSAGE);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new ParseException(MESSAGE_UNAVAILABLE_IN_REVIEW_MODE);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private Command parseCommandInMainMode("
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            String commandWord, String arguments) throws ParseException {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        case AddCardCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        case EditCardCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        case DeleteCardCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        case ReviewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        case FlipCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        case CorrectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        case WrongCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        case EndReviewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        case HomeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            return parseInvalidCommandInMainMode(commandWord);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        case AddDeckCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            return new AddDeckCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        case DeleteDeckCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            return new DeleteDeckCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        case EnterDeckCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            return new EnterDeckCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // There should be no arguments for exit command"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            if (hasArguments(arguments)) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                // If arguments exist, throw ParseException"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_EXTENDED_COMMAND_ERROR, ExitCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // There should be no arguments for help command"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            if (hasArguments(arguments)) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                // If arguments exist, throw ParseException"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_EXTENDED_COMMAND_ERROR, HelpCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        case ListAllCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            // There should be no arguments for listAll command"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            if (hasArguments(arguments)) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                // If arguments exist, throw ParseException"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_EXTENDED_COMMAND_ERROR, ListAllCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            return new ListAllCommand();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // There should be no arguments for clear command"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            if (hasArguments(arguments)) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                // If arguments exist, throw ParseException"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_EXTENDED_COMMAND_ERROR, ClearCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        case EditDeckNameCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            return new EditDeckNameCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        case SetReviewLimitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            return new SetReviewLimitCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        case CheckReviewLimitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            // There should be no arguments for clear command"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            if (hasArguments(arguments)) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                // If arguments exist, throw ParseException"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_EXTENDED_COMMAND_ERROR,"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        CheckReviewLimitCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            return new CheckReviewLimitCommand();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private Command parseInvalidCommandInMainMode("
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            String commandWord) throws ParseException {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        case AddCardCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new ParseException(INVALID_ADDCARD_COMMAND_IN_HOME_MESSAGE);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        case EditCardCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new ParseException(INVALID_EDITCARD_COMMAND_IN_HOME_MESSAGE);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        case DeleteCardCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new ParseException(INVALID_DELETECARD_COMMAND_IN_HOME_MESSAGE);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new ParseException(INVALID_FIND_COMMAND_IN_HOME_MESSAGE);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        case ReviewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new ParseException(INVALID_REVIEW_COMMAND_IN_HOME_MESSAGE);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        case CorrectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new ParseException(INVALID_CORRECT_COMMAND_IN_HOME_MESSAGE);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        case FlipCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new ParseException(INVALID_FLIP_COMMAND_IN_HOME_MESSAGE);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        case HomeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new ParseException(INVALID_HOME_COMMAND_IN_HOME_MESSAGE);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        case WrongCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new ParseException(INVALID_WRONG_COMMAND_IN_HOME_MESSAGE);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        case EndReviewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new ParseException(INVALID_ENDREVIEW_COMMAND_IN_HOME_MESSAGE);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new ParseException(INVALID_LIST_COMMAND_IN_HOME_MESSAGE);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    private Command parseCommandInCardMode("
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            String commandWord, String arguments, String deckName) throws ParseException {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        case AddDeckCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        case CorrectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        case DeleteDeckCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        case EnterDeckCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        case FlipCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        case ListAllCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        case EndReviewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        case WrongCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        case EditDeckNameCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            return parseInvalidCommandInDeckMode(commandWord);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        case AddCardCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            return new AddCardCommandParser().parse(arguments, deckName);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        case DeleteCardCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            return new DeleteCardCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        case EditCardCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            return new EditCardCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // There should be no arguments for exit command"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            if (hasArguments(arguments)) {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                // If arguments exist, throw ParseException"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_EXTENDED_COMMAND_ERROR, ExitCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // There should be no arguments for help command"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            if (hasArguments(arguments)) {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                // If arguments exist, throw ParseException"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_EXTENDED_COMMAND_ERROR, HelpCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        case HomeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            // There should be no arguments for clear command"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            if (hasArguments(arguments)) {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                // If arguments exist, throw ParseException"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_EXTENDED_COMMAND_ERROR, HomeCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            return new HomeCommand();"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        case ReviewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // There should be no arguments for review command"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            if (hasArguments(arguments)) {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                // If arguments exist, throw ParseException"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_EXTENDED_COMMAND_ERROR, ReviewCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            return new ReviewCommand();"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        case SetReviewLimitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            return new SetReviewLimitCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        case CheckReviewLimitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            // There should be no arguments for clear command"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            if (hasArguments(arguments)) {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                // If arguments exist, throw ParseException"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_EXTENDED_COMMAND_ERROR,"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        CheckReviewLimitCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            return new CheckReviewLimitCommand();"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            // There should be no arguments for list command"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            if (hasArguments(arguments)) {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                // If arguments exist, throw ParseException"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_EXTENDED_COMMAND_ERROR, ListCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    private Command parseInvalidCommandInDeckMode("
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            String commandWord) throws ParseException {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        case AddDeckCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new ParseException(INVALID_ADDDECK_COMMAND_IN_DECK_MESSAGE);"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new ParseException(INVALID_CLEAR_COMMAND_IN_DECK_MESSAGE);"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        case CorrectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new ParseException(INVALID_CORRECT_COMMAND_IN_DECK_MESSAGE);"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        case DeleteDeckCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new ParseException(INVALID_DELETEDECK_COMMAND_IN_DECK_MESSAGE);"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        case EnterDeckCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new ParseException(INVALID_ENTERDECK_COMMAND_IN_DECK_MESSAGE);"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        case FlipCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new ParseException(INVALID_FLIP_COMMAND_IN_DECK_MESSAGE);"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        case ListAllCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new ParseException(INVALID_LISTALL_COMMAND_IN_DECK_MESSAGE);"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        case EndReviewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new ParseException(INVALID_ENDREVIEW_COMMAND_IN_DECK_MESSAGE);"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        case WrongCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new ParseException(INVALID_WRONG_COMMAND_IN_DECK_MESSAGE);"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        case EditDeckNameCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new ParseException(INVALID_EDITDECKNAME_COMMAND_IN_DECK_MESSAGE);"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * Checks argument String for values."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param arguments arguments string from user input"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @return true if string is contains anything beside whitespace, false otherwise"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private boolean hasArguments(String arguments) {"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        if (!arguments.isBlank()) {"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 72,
      "pengxiangg": 157,
      "chuyouchia": 9,
      "foongsq": 79,
      "-": 28,
      "Sruthisarav": 150
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.deck.Deck;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.Answer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.Question;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Current index is not a non-zero unsigned integer \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            + \"(less than 2147483648).\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static final String MESSAGE_INVALID_LIMIT_LARGE \u003d \"Current review limit is not a non-zero unsigned integer \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            + \"(less than 2147483648).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static final String MESSAGE_INVALID_LIMIT \u003d \"Review card limit must be an integer greater than 0.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * Parses a {@code String question} into a {@code Question}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @throws ParseException if the given {@code question} is invalid."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static Question parseQuestion(String question) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        requireNonNull(question);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        String trimmedQuestion \u003d question.trim();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        if (!Question.isValidQuestion(trimmedQuestion)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            throw new ParseException(String.format(Question.MESSAGE_CONSTRAINTS, question.length()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return new Question(trimmedQuestion);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "     * Parses a {@code String answer} into a {@code Answer}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "     * @throws ParseException if the given {@code answer} is invalid."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public static Answer parseAnswer(String answer) throws ParseException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        requireNonNull(answer);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        String trimmedAnswer \u003d answer.trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        if (!Answer.isValidAnswer(trimmedAnswer)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            throw new ParseException(String.format(Answer.MESSAGE_CONSTRAINTS, answer.length()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        return new Answer(trimmedAnswer);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * Parses a review limit input and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @throws ParseException if the specified integer is invalid (not greater than 0)."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static long parseReviewLimit(String reviewLimitString) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        String trimmedReviewLimit \u003d reviewLimitString.trim().toLowerCase();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        if (trimmedReviewLimit.equals(\"all\")) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            return Integer.MAX_VALUE;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                if (!StringUtil.isNonZeroUnsignedInteger(trimmedReviewLimit)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    throw new ParseException(MESSAGE_INVALID_LIMIT_LARGE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                return (long) Long.parseLong(trimmedReviewLimit);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_LIMIT);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Parses a {@code String deckName} into a {@code Deck}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @throws ParseException if the given {@code deckName} is invalid."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public static Deck parseDeckName(String deckName) throws ParseException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        requireNonNull(deckName);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String tagDeckRelationNote \u003d \"\\nNote that the cards\u0027 tag correspond to the deck they belong to.\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String trimmedDeckName \u003d deckName.trim();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        if (!Deck.isValidDeckLength(trimmedDeckName)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new ParseException(String.format(Deck.MESSAGE_CONSTRAINTS_LENGTH"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                    + tagDeckRelationNote, deckName.length()));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        } else if (!Deck.isValidDeckReservedName(trimmedDeckName)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new ParseException(Deck.MESSAGE_CONSTRAINTS_RESERVED + tagDeckRelationNote);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return new Deck(trimmedDeckName);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pengxiangg": 4,
      "chuyouchia": 25,
      "foongsq": 35,
      "-": 51,
      "Sruthisarav": 9
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/logic/parser/Prefix.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/logic/parser/SetReviewLimitCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": "package seedu.flashnotes.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import seedu.flashnotes.logic.commands.SetReviewLimitCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import seedu.flashnotes.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": " * Parses input arguments and creates a new SetReviewLimitCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foongsq"
        },
        "content": "public class SetReviewLimitCommandParser implements Parser\u003cSetReviewLimitCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SetReviewLimitCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * and returns a SetReviewLimitCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public SetReviewLimitCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            long reviewCardLimit \u003d ParserUtil.parseReviewLimit(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            return new SetReviewLimitCommand(reviewCardLimit);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetReviewLimitCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                            + \"\\n\" + pe.getMessage()), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foongsq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foongsq": 29
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/logic/parser/exceptions/ParseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/model/FlashNotes.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.deck.Deck;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.deck.UniqueDeckList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.UniqueFlashcardList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " * Wraps all data at the flashnotes level"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * Duplicates are not allowed (by .isSameFlashcard comparison)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class FlashNotes implements ReadOnlyFlashNotes {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private final UniqueFlashcardList flashcards;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private final UniqueDeckList decks;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private boolean isReviewMode;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    private boolean isInDeck;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    private String currentDeckName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        flashcards \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        decks \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        isReviewMode \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        isInDeck \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        currentDeckName \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public FlashNotes() {}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Creates an FlashNotes using the Flashcards in the {@code toBeCopied}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public FlashNotes(ReadOnlyFlashNotes toBeCopied) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Replaces the contents of the flashcard list with {@code flashcards}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * {@code flashcards} must not contain duplicate flashcards."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void setFlashcards(List\u003cFlashcard\u003e flashcards) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        this.flashcards.setFlashcards(flashcards);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Replaces the contents of the deck list with {@code decks}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * {@code decks} must not contain duplicate decks."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void setDecks(List\u003cDeck\u003e decks) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        this.decks.setDecks(decks);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Resets the existing data of this {@code FlashNotes} with {@code newData}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void resetData(ReadOnlyFlashNotes newData) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        setFlashcards(newData.getFlashcardList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        setDecks(newData.getDeckList());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    //// flashcard-level operations"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Returns true if a flashcard with the same identity as {@code flashcard} exists in the flashnotes."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public boolean hasFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        requireNonNull(flashcard);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return flashcards.contains(flashcard);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Adds a flashcard to the flashnotes."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * The flashcard must not already exist in the flashnotes."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void addFlashcard(Flashcard card) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        flashcards.add(card);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Replaces the given flashcard {@code target} in the list with {@code editedFlashcard}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * {@code target} must exist in the flashnotes."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * The flashcard identity of {@code editedFlashcard} must not be the same"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * as another existing flashcard in the flashnotes."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void setFlashcard(Flashcard target, Flashcard editedFlashcard) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        requireNonNull(editedFlashcard);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        flashcards.setFlashcard(target, editedFlashcard);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Removes {@code key} from this {@code FlashNotes}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * {@code key} must exist in the flashnotes."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void removeFlashcard(Flashcard key) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        flashcards.remove(key);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "     * Removes all flashcards with the specified tag."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "     * @param tag"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public void removeFlashcardByTag(Tag tag) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        ArrayList\u003cFlashcard\u003e toBeRemoved \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        for (Flashcard flashcard : flashcards) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            if (flashcard.getTag().equals(tag)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                toBeRemoved.add(flashcard);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        for (int i \u003d 0; i \u003c toBeRemoved.size(); i++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            removeFlashcard(toBeRemoved.get(i));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    //// Deck-level operations"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Returns true if a deck with the same identity as {@code deck} exists in the flashnotes."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public boolean hasDeck(Deck deck) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        requireNonNull(deck);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return decks.contains(deck);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Adds a deck to the flashnotes."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * The deck must not already exist in the flashnotes."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public void addDeck(Deck deck) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        decks.add(deck);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Replaces the given deck {@code target} in the list with {@code editedDeck}."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * {@code target} must exist in the flashnotes."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * The deck identity of {@code editedDeck} must not be the same"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * as another existing deck in the flashnotes."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void setDeck(Deck target, Deck editedDeck) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        requireNonNull(editedDeck);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        decks.setDeck(target, editedDeck);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Removes {@code keyDeck} from this {@code FlashNotes}."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * {@code keyDeck} must exist in the flashnotes."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void removeDeck(Deck keyDeck) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        removeFlashcardByTag(new Tag(keyDeck.getDeckName()));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        decks.remove(keyDeck);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public boolean getIsInDeck() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        return isInDeck;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public void setIsInDeckTrue() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        isInDeck \u003d true;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public void setIsInDeckFalse() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        isInDeck \u003d false;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public void setCurrentDeckName(String deckName) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        this.currentDeckName \u003d deckName;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public String getCurrentDeckName() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        if (!isInDeck) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        return currentDeckName;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public static String getDefaultDeckName() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        return Deck.getDefaultDeckName();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public static String getReservedDeckName() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        return Deck.getReservedDeckName();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Update the user\u0027s review score for deck used in review."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @param reviewScore Integer value of user\u0027s review session score."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @param deckName String value of deck to update"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void updateDeckPerformanceScore(Double reviewScore, String deckName) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        requireNonNull(reviewScore);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // Fetch the right deck to update"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        Deck currentDeck \u003d decks.findDeck(deckName);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // Make sure it is an existing deck"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        if (currentDeck !\u003d null) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // Update the deck\u0027s statistics"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            currentDeck.setResultStatistics(String.format(\"%.1f\", reviewScore));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /** Returns the unique deck list */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public UniqueDeckList getUniqueDeckList() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return decks;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    //// Review methods"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public boolean getIsReviewMode() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return isReviewMode;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void setIsReviewModeTrue() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        isReviewMode \u003d true;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void setIsReviewModeFalse() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        isReviewMode \u003d false;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return flashcards.asUnmodifiableObservableList().toString() + decks.asUnmodifiableObservableList().toString();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public ObservableList\u003cFlashcard\u003e getFlashcardList() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return flashcards.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public ObservableList\u003cDeck\u003e getDeckList() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return decks.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                || (other instanceof FlashNotes // instanceof handles nulls"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                \u0026\u0026 flashcards.equals(((FlashNotes) other).flashcards))"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                \u0026\u0026 decks.equals(((FlashNotes) other).decks);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return flashcards.hashCode();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 44,
      "pengxiangg": 57,
      "chuyouchia": 77,
      "foongsq": 16,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.deck.Deck;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import seedu.flashnotes.model.deck.UniqueDeckList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    Predicate\u003cFlashcard\u003e PREDICATE_SHOW_ALL_FLASHCARDS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    Predicate\u003cDeck\u003e PREDICATE_SHOW_ALL_DECKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Returns the user prefs\u0027 flashnotes file path."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    Path getFlashNotesFilePath();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Sets the user prefs\u0027 flashnotes file path."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    void setFlashNotesFilePath(Path flashNotesFilePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * Returns the user prefs\u0027 review card limit."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    long getReviewCardLimit();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * Sets the user prefs\u0027 review card limit."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    void setReviewCardLimit(long reviewCardLimit);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Replaces flashnotes data with the data in {@code flashNotes}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    void setFlashNotes(ReadOnlyFlashNotes flashNotes);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /** Returns the FlashNotes */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    ReadOnlyFlashNotes getFlashNotes();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Returns true if a deck with the same identity as {@code deck} exists in the flashnotes."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    boolean hasDeck(Deck deck);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Deletes the given Deck."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * The Deck must exist in the flashnotes."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    void deleteDeck(Deck target);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Adds the given deck."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * {@code deck} must not already exist in the flashnotes."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    void addDeck(Deck deck);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Replaces the given deck {@code target} with {@code editedDeck}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * {@code target} must exist in the flashnotes."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * The flashcard identity of {@code editedDeck} must not be the same"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * as another existing deck in the flashnotes."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    void setDeck(Deck target, Deck editedDeck);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    boolean getIsInDeck();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    void setIsInDeckTrue();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    void setIsInDeckFalse();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    void setCurrentDeckName(String deckName);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    String getCurrentDeckName();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /** Returns an unmodifiable view of the filtered deck list */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    ObservableList\u003cDeck\u003e getFilteredDeckList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Updates the filter of the filtered deck list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    void updateFilteredDeckList(Predicate\u003cDeck\u003e predicate);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    static String getDefaultDeckName() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        return FlashNotes.getDefaultDeckName();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    static String getReservedDeckName() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        return FlashNotes.getReservedDeckName();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Returns true if a flashcard with the same identity as {@code flashcard} exists in the flashnotes."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    boolean hasFlashcard(Flashcard flashcard);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Deletes the given flashcard."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * The flashcard must exist in the flashnotes."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    void deleteFlashcard(Flashcard target);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Adds the given flashcard."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * {@code flashcard} must not already exist in the flashnotes."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    void addFlashcard(Flashcard flashcard);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Replaces the given flashcard {@code target} with {@code editedFlashcard}."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * {@code target} must exist in the flashnotes."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * The flashcard identity of {@code editedFlashcard} must not be the same"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * as another existing flashcard in the flashnotes."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    void setFlashcard(Flashcard target, Flashcard editedFlashcard);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /** Returns an unmodifiable view of the filtered flashcard list */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    ObservableList\u003cFlashcard\u003e getFilteredFlashcardList();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /** Returns an unmodifiable view of the filtered flashcard list */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    ObservableList\u003cFlashcard\u003e getFlashcardsToReview();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    /** Adds flashcard to list of flashcards to be reviewed */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public void addFlashcardToReview();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    /** Returns the modified list of flashcards to be reviewed */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    ObservableList\u003cFlashcard\u003e getModifiedFlashcardsToReview();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    /** Updates the flashcard being reviewed in the review mode */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public void updateFlashcardBeingReviewed(int result);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    /** Reset flashcard being reviewed back to false */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public void resetFlipOfFlashcardBeingReviewed();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    /** Checks whether the flashcard being reviewed is flipped */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public boolean getIsFlashcardFlipped();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    /** Gets the flashcard being reviewed in the review mode and returns it. */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public Flashcard getFlashcardBeingReviewed();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    /** Flip the flashcard currently being reviewed */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public void carryOutFlipCommand();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    /** Marks flashcard being reviewed as correct or wrong */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public void markFlashcardBeingReviewed(Flashcard flashcard, int result);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Updates the filter of the filtered flashcard list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    void updateFilteredFlashcardList(Predicate\u003cFlashcard\u003e predicate);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    boolean getIsReviewMode();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    void setIsReviewModeTrue();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    void setIsReviewModeFalse();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * Sets up the flashcards for the review session."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    void setUpReviewList();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Update the user\u0027s review score for deck used in review."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    void updateDeckPerformanceScore(Double reviewScore, String deckName);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /** Returns an unmodifiable view of the unique deck list */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    UniqueDeckList getUniqueDeckList();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 22,
      "pengxiangg": 19,
      "chuyouchia": 53,
      "foongsq": 24,
      "-": 59,
      "Sruthisarav": 24
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.deck.Deck;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import seedu.flashnotes.model.deck.UniqueDeckList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " * Represents the in-memory model of the flashnotes data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private final FlashNotes flashNotes;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private final FilteredList\u003cFlashcard\u003e filteredFlashcards;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private FilteredList\u003cFlashcard\u003e flashcardsToReview;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private final FilteredList\u003cDeck\u003e filteredDecks;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    private int flashcardBeingReviewed \u003d 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Initializes a ModelManager with the given flashNotes and userPrefs."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public ModelManager(ReadOnlyFlashNotes flashNotes, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        requireAllNonNull(flashNotes, userPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        logger.fine(\"Initializing with flashnotes: \" + flashNotes + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        this.flashNotes \u003d new FlashNotes(flashNotes);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        filteredFlashcards \u003d new FilteredList\u003c\u003e(this.flashNotes.getFlashcardList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        flashcardsToReview \u003d new FilteredList\u003c\u003e(this.flashNotes.getFlashcardList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        filteredDecks \u003d new FilteredList\u003c\u003e(this.flashNotes.getDeckList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        this(new FlashNotes(), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public Path getFlashNotesFilePath() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return userPrefs.getFlashNotesFilePath();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void setFlashNotesFilePath(Path flashNotesFilePath) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        requireNonNull(flashNotesFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        userPrefs.setFlashNotesFilePath(flashNotesFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public long getReviewCardLimit() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return userPrefs.getReviewCardLimit();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void setReviewCardLimit(long reviewCardLimit) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        requireNonNull(reviewCardLimit);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        userPrefs.setReviewCardLimit(reviewCardLimit);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FlashNotes \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void setFlashNotes(ReadOnlyFlashNotes flashNotes) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        this.flashNotes.resetData(flashNotes);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public ReadOnlyFlashNotes getFlashNotes() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return flashNotes;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Decks \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public boolean hasDeck(Deck deck) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return flashNotes.hasDeck(deck);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void deleteDeck(Deck target) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        flashNotes.removeDeck(target);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        updateFilteredDeckList(PREDICATE_SHOW_ALL_DECKS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void addDeck(Deck deck) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        flashNotes.addDeck(deck);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        updateFilteredDeckList(PREDICATE_SHOW_ALL_DECKS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void setDeck(Deck target, Deck editedDeck) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        flashNotes.setDeck(target, editedDeck);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public boolean getIsInDeck() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        return flashNotes.getIsInDeck();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public void setIsInDeckTrue() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        flashNotes.setIsInDeckTrue();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public void setIsInDeckFalse() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        flashNotes.setIsInDeckFalse();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public void setCurrentDeckName(String deckName) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        flashNotes.setCurrentDeckName(deckName);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public String getCurrentDeckName() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        return flashNotes.getCurrentDeckName();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public ObservableList\u003cDeck\u003e getFilteredDeckList() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return flashNotes.getDeckList();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void updateFilteredDeckList(Predicate\u003cDeck\u003e predicate) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        filteredDecks.setPredicate(predicate);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /** Returns the unique deck list */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public UniqueDeckList getUniqueDeckList() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return flashNotes.getUniqueDeckList();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Update the user\u0027s review score for deck used in review."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @param reviewScore Integer value of user\u0027s review session score."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void updateDeckPerformanceScore(Double reviewScore, String deckName) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        requireNonNull(reviewScore);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        requireNonNull(deckName);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        flashNotes.updateDeckPerformanceScore(reviewScore, deckName);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FlashCards \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public boolean hasFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        requireNonNull(flashcard);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return flashNotes.hasFlashcard(flashcard);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void deleteFlashcard(Flashcard target) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        flashNotes.removeFlashcard(target);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void addFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        flashNotes.addFlashcard(flashcard);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void setFlashcard(Flashcard target, Flashcard editedFlashcard) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        requireAllNonNull(target, editedFlashcard);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        flashNotes.setFlashcard(target, editedFlashcard);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Flashcard List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Flashcard} backed by the internal list of"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * {@code versionedFlashNotes}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public ObservableList\u003cFlashcard\u003e getFilteredFlashcardList() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return filteredFlashcards;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void updateFilteredFlashcardList(Predicate\u003cFlashcard\u003e predicate) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        filteredFlashcards.setPredicate(predicate);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Review Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public boolean getIsReviewMode() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return flashNotes.getIsReviewMode();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void setIsReviewModeTrue() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        flashNotes.setIsReviewModeTrue();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void setIsReviewModeFalse() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        flashNotes.setIsReviewModeFalse();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * Shuffles list of flashcards to review"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private ObservableList\u003cFlashcard\u003e shuffleReviewFlashcards() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        ObservableList\u003cFlashcard\u003e flashcardsToReviewList \u003d FXCollections.observableArrayList("
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                getFilteredFlashcardList());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        FXCollections.shuffle(flashcardsToReviewList);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return flashcardsToReviewList;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * Trim list of flashcards to review"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param flashcardsToReviewList Shuffled list of flashcards to review"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @return Trimmed list of flashcards to review"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private ObservableList\u003cFlashcard\u003e trimReviewFlashcards(ObservableList\u003cFlashcard\u003e flashcardsToReviewList) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        long reviewCardLimit \u003d userPrefs.getReviewCardLimit();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        boolean isReviewLimitValid \u003d reviewCardLimit \u003e\u003d 1;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        boolean isReviewLimitUsed \u003d reviewCardLimit \u003c flashcardsToReviewList.size();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        if (isReviewLimitUsed \u0026\u0026 isReviewLimitValid) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            flashcardsToReviewList \u003d FXCollections.observableArrayList("
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    flashcardsToReviewList.subList(0, (int) reviewCardLimit));"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return flashcardsToReviewList;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * Shuffles and trims the list of flashcards to review."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void setUpReviewList() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        // Apply shuffling algorithm"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        ObservableList\u003cFlashcard\u003e flashcardsToReviewList \u003d shuffleReviewFlashcards();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        // Trim review list using card limit from user prefs"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        flashcardsToReviewList \u003d trimReviewFlashcards(flashcardsToReviewList);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        // Store shuffled and trimmed list into flashcardsToReview list"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.flashcardsToReview \u003d new FilteredList\u003c\u003e(flashcardsToReviewList);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        // Initialize first flashcard to be reviewed"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        setUpFlashcardToReview();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "     * Set up the first flashcard to be reviewed in the review mode and reset it\u0027s flip to false"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    private void setUpFlashcardToReview() {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        // Set index of flashcard being reviewed in review mode to 0"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        this.flashcardBeingReviewed \u003d 0;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        resetFlipOfFlashcardBeingReviewed();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Flashcard} to review."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public ObservableList\u003cFlashcard\u003e getFlashcardsToReview() {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return flashcardsToReview;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "     * Adds flashcard to list of flashcards being reviewed."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public void addFlashcardToReview() {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        Flashcard flashcard \u003d this.flashcardsToReview.get(flashcardBeingReviewed);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        ObservableList\u003cFlashcard\u003e flashcardsToReviewList \u003d FXCollections.observableArrayList("
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "                this.flashcardsToReview);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        flashcardsToReviewList.add(flashcard);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        this.flashcardsToReview \u003d new FilteredList\u003c\u003e(flashcardsToReviewList);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    /** Returns the modified list of flashcards to be reviewed */"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public ObservableList\u003cFlashcard\u003e getModifiedFlashcardsToReview() {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        return flashcardsToReview;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "     * Updates the flashcard being reviewed in the review mode"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public void updateFlashcardBeingReviewed(int result) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        resetFlipOfFlashcardBeingReviewed();"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        Flashcard flashcard \u003d this.flashcardsToReview.get(flashcardBeingReviewed);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        markFlashcardBeingReviewed(flashcard, result);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        this.flashcardBeingReviewed +\u003d 1;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        if (flashcardBeingReviewed \u003e\u003d flashcardsToReview.size()) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            flashcardBeingReviewed \u003d 0;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            Flashcard newFlashcard \u003d this.flashcardsToReview.get(flashcardBeingReviewed);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            newFlashcard.resetFlip();"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "     * Reset flashcard being reviewed back to false"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public void resetFlipOfFlashcardBeingReviewed() {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        this.flashcardsToReview.get(flashcardBeingReviewed).resetFlip();"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "     * Gets the flashcard being reviewed in the review mode and returns it."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "     * @return Flashcard being reviewed"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public Flashcard getFlashcardBeingReviewed() {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        return this.flashcardsToReview.get(flashcardBeingReviewed);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "     * Checks whether the flashcard being reviewed is flipped"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public boolean getIsFlashcardFlipped() {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        return this.flashcardsToReview.get(flashcardBeingReviewed).getIsFlipped();"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "     * Flip the flashcard currently being reviewed"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public void carryOutFlipCommand() {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        Flashcard flashcard \u003d this.flashcardsToReview.get(flashcardBeingReviewed);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        flashcard.flipFlashcard();"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "     * Marks flashcard being reviewed as correct or wrong"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public void markFlashcardBeingReviewed(Flashcard flashcard, int result) {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        flashcard.markCard(result);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Util methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return flashNotes.equals(other.flashNotes)"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                \u0026\u0026 filteredFlashcards.equals(other.filteredFlashcards);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 37,
      "pengxiangg": 25,
      "chuyouchia": 67,
      "foongsq": 84,
      "-": 107,
      "Sruthisarav": 89
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/model/ReadOnlyFlashNotes.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.deck.Deck;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " * Unmodifiable view of an flashnotes"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public interface ReadOnlyFlashNotes {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Returns an unmodifiable view of the flashcards list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * This list will not contain any duplicate flashcards."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    ObservableList\u003cFlashcard\u003e getFlashcardList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Returns an unmodifiable view of the deck list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * This list will not contain any duplicate decks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    ObservableList\u003cDeck\u003e getDeckList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 2,
      "chuyouchia": 11,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    Path getFlashNotesFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    long getReviewCardLimit();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 3,
      "foongsq": 1,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private static final int DEFAULT_CARD_LIMIT \u003d Integer.MAX_VALUE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private Path flashNotesFilePath \u003d Paths.get(\"data\" , \"flashnotes.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private long reviewCardLimit \u003d DEFAULT_CARD_LIMIT;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        setFlashNotesFilePath(newUserPrefs.getFlashNotesFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        setReviewCardLimit(newUserPrefs.getReviewCardLimit());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public Path getFlashNotesFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return flashNotesFilePath;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void setFlashNotesFilePath(Path flashNotesFilePath) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        requireNonNull(flashNotesFilePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        this.flashNotesFilePath \u003d flashNotesFilePath;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public long getReviewCardLimit() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return reviewCardLimit;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void setReviewCardLimit(long reviewCardLimit) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        requireNonNull(reviewCardLimit);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.reviewCardLimit \u003d reviewCardLimit;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                \u0026\u0026 flashNotesFilePath.equals(o.flashNotesFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return Objects.hash(guiSettings, flashNotesFilePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + flashNotesFilePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 12,
      "foongsq": 10,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/model/deck/Deck.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " * Deck is the tag which is given to every card."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class Deck {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_LENGTH \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            \"Deck name should not be blank and should be less than or equal to 40 characters. \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    + \"Current number of characters in deck name is %d.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_STATISTIC \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            \"ResultStatistic should be a numeric value between 0 and 100.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    private static final String RESERVED_DECK_NAME \u003d \"list\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    private static final String DEFAULT_DECK_NAME \u003d \"Default\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_RESERVED \u003d \"Deck name should not be the reserved deck name: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            + RESERVED_DECK_NAME;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private String deckName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private String resultStatistics;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Initializes a Deck that contains the Deck Name and Result Statistics if any."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param name description of deck"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public Deck(String name) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        this.deckName \u003d name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        this.resultStatistics \u003d \"-1.0\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public String getDeckName() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return deckName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public String getResultStatistics() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return resultStatistics;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public static String getDefaultDeckName() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        return DEFAULT_DECK_NAME;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public static String getReservedDeckName() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        return RESERVED_DECK_NAME;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void setDeckName(String deckName) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        requireNonNull(deckName);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        this.deckName \u003d deckName;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void setResultStatistics(String resultStatistics) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        requireNonNull(resultStatistics);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        this.resultStatistics \u003d resultStatistics;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Returns true if a given string is a valid deck name."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static boolean isValidDeckLength(String test) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return !test.isBlank() \u0026\u0026 test.length() \u003c\u003d 40;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static boolean isValidDeckReservedName(String test) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        return !test.equals(Model.getReservedDeckName());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Returns true if both Decks have at least one other identity field that is the same."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * This defines a weaker notion of equality between two decks."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public boolean isSameDeck(Deck otherDeck) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        if (otherDeck \u003d\u003d this) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return otherDeck !\u003d null"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                \u0026\u0026 otherDeck.getDeckName().equals(getDeckName());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Deck deck \u003d (Deck) o;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return Objects.equals(deckName, deck.deckName);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return Objects.hash(deckName);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 3,
      "pengxiangg": 24,
      "chuyouchia": 72,
      "foongsq": 9
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/model/deck/UniqueDeckList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.deck.exceptions.DeckNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.deck.exceptions.DuplicateDeckException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " * A list of decks that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " * A deck is considered unique by comparing using {@code Deck#isSameDeck(Deck)}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " * As such, adding and updating of deck uses Deck#isSameDeck(Deck) for equality"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " * so as to ensure that the deck being added or updated is unique in terms of identity in the UniqueDeckList."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " * However, the removal of a deck uses Deck#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " * as to ensure that the deck with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " * @see Deck#isSameDeck(Deck)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class UniqueDeckList implements Iterable\u003cDeck\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private final ObservableList\u003cDeck\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private final ObservableList\u003cDeck\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Returns true if the list contains an equivalent deck as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public boolean contains(Deck toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameDeck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Returns Deck that matches given string (if any)."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Else, returns null"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @param deck String containing name of deck to find"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public Deck findDeck(String deck) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        requireNonNull(deck);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return internalList.stream().filter(finding -\u003e deck.equals(finding.getDeckName()))"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                .orElse(null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Adds a deck to the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * The deck must not already exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void add(Deck toAdd) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new DuplicateDeckException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Replaces the deck {@code target} in the list with {@code editedDeck}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * The deck identity of {@code editedDeck} must not be the same as another existing deck in the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void setDeck(Deck target, Deck editedDeck) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        requireAllNonNull(target, editedDeck);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new DeckNotFoundException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        if (!target.isSameDeck(editedDeck) \u0026\u0026 contains(editedDeck)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new DuplicateDeckException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        internalList.set(index, editedDeck);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Removes the equivalent deck from the list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * The deck must exist in the list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void remove(Deck toRemove) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new DeckNotFoundException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void setDecks(UniqueDeckList replacement) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Replaces the contents of this list with {@code decks}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * {@code decks} must not contain duplicate decks."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void setDecks(List\u003cDeck\u003e decks) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        requireAllNonNull(decks);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        if (!decksAreUnique(decks)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new DuplicateDeckException();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        internalList.setAll(decks);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public ObservableList\u003cDeck\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public Iterator\u003cDeck\u003e iterator() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                || (other instanceof UniqueDeckList // instanceof handles nulls"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueDeckList) other).internalList));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Returns true if {@code decks} contains only unique decks."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private boolean decksAreUnique(List\u003cDeck\u003e decks) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        for (int i \u003d 0; i \u003c decks.size() - 1; i++) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            for (int j \u003d i + 1; j \u003c decks.size(); j++) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                if (decks.get(i).isSameDeck(decks.get(j))) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 12,
      "chuyouchia": 137
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/model/deck/exceptions/DeckNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.model.deck.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " * Signals that the operation is unable to find the specified deck."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class DeckNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 6
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/model/deck/exceptions/DuplicateDeckException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.model.deck.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " * Signals that the operation will result in duplicate Decks"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " * (Decks are considered duplicates if they have the same name or same list of cards)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class DuplicateDeckException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public DuplicateDeckException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        super(\"Operation would result in duplicate decks\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 11
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/model/flashcard/Answer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": " * Represents a flashcard\u0027s answer."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAnswer(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "public class Answer {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            \"Answers should not be blank and should less than or equal to 140 characters. \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                + \"Current length of answer is %d.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * Constructs a {@code Answer}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param answer A valid answer."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public Answer(String answer) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        requireNonNull(answer);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        checkArgument(isValidAnswer(answer), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        value \u003d answer;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * Returns true if a given string is a valid answer."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public static boolean isValidAnswer(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        boolean isAnswerBlank \u003d test.isBlank();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        boolean isAnswerLengthValid \u003d test.length() \u003c\u003d 140;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return !isAnswerBlank \u0026\u0026 isAnswerLengthValid;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "                || (other instanceof Answer // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "                \u0026\u0026 value.equals(((Answer) other).value)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 2,
      "foongsq": 9,
      "-": 34,
      "Sruthisarav": 10
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/model/flashcard/Flashcard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " * Represents a Flashcard in the flashnotes book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rachel170"
        },
        "content": "public class Flashcard {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private final Question question;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    private final Answer answer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    private final Tag tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    private boolean isFlipped \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    private int isCorrect \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public Flashcard(Question question, Answer answer, Tag tag) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        requireAllNonNull(question, answer, tag);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public Question getQuestion() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return question;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public Answer getAnswer() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public Tag getTag() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        return tag;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "     * Returns whether the flashcard has been flipped in review mode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public boolean getIsFlipped() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        return isFlipped;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "     * Flips flashcard being reviewed in the review mode"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public void flipFlashcard() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        if (this.isFlipped) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            this.isFlipped \u003d false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            this.isFlipped \u003d true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "     * Resets the value of isFlipped to false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public void resetFlip() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        isFlipped \u003d false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "     * Marks whether the card was reviewed correctly in the review mode"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "     * @param result"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public void markCard(int result) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        this.isCorrect \u003d result;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "     * Returns the value of isCorrect"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "     * @return int"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public int getIsCorrect() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        return this.isCorrect;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * Returns true if both flashcards have the same question have at least one other identity field that is the same."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * This defines a weaker notion of equality between two flashcards."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public boolean isSameFlashcard(Flashcard otherFlashcard) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        if (otherFlashcard \u003d\u003d this) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return otherFlashcard !\u003d null"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                \u0026\u0026 otherFlashcard.getQuestion().equals(getQuestion())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                \u0026\u0026 (otherFlashcard.getAnswer().equals(getAnswer()))"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "                \u0026\u0026 otherFlashcard.getTag().equals(getTag());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Returns true if both cards have the same identity and data fields."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * This defines a stronger notion of equality between two cards."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        if (!(other instanceof Flashcard)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        Flashcard otherFlashcard \u003d (Flashcard) other;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return otherFlashcard.getQuestion().equals(getQuestion())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                \u0026\u0026 otherFlashcard.getAnswer().equals(getAnswer())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "                \u0026\u0026 otherFlashcard.getTag().equals(getTag());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        return Objects.hash(question, answer, tag);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        builder.append(\"\\nQuestion: \")"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                .append(getQuestion())"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                .append(\"\\nAnswer: \")"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "                .append(getAnswer())"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                .append(\"\\nDeck: \")"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                .append(getTag());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 10,
      "pengxiangg": 10,
      "chuyouchia": 6,
      "foongsq": 8,
      "-": 54,
      "Sruthisarav": 52
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/model/flashcard/Question.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": " * Represents a flashcard\u0027s question."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidQuestion(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": "public class Question {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            \"Questions should not be blank and should less than or equal to 140 characters. \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                + \"Current length of question is %d.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public final String question;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * Constructs a {@code Question}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param question A valid question."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public Question(String question) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        requireNonNull(question);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        checkArgument(isValidQuestion(question), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * Returns true if a given string is a valid question."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static boolean isValidQuestion(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        boolean isQuestionBlank \u003d test.isBlank();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        boolean isQuestionLengthValid \u003d test.length() \u003c\u003d 140;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return !isQuestionBlank \u0026\u0026 isQuestionLengthValid;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return this.question;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                || (other instanceof Question // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                \u0026\u0026 this.question.equals(((Question) other).question)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return question.hashCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 2,
      "foongsq": 22,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/model/flashcard/QuestionContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * Tests that a {@code Flashcard}\u0027s {@code Question} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rachel170"
        },
        "content": "public class QuestionContainsKeywordsPredicate implements Predicate\u003cFlashcard\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public QuestionContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public boolean test(Flashcard flashcard) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(flashcard.getQuestion().question, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                || (other instanceof QuestionContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                \u0026\u0026 keywords.equals(((QuestionContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 4,
      "chuyouchia": 2,
      "foongsq": 3,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/model/flashcard/UniqueFlashcardList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.exceptions.DuplicateFlashcardException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.exceptions.FlashcardNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * A list of flashcards that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * A flashcard is considered unique by comparing using {@code Flashcard#isSameFlashcard(Flashcard)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * As such, adding and updating of flashcards uses Flashcard#isSameFlashcard(Flashcard) for equality"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * so as to ensure that the flashcard being added or updated is unique in terms of identity in the UniqueFlashcardList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * However, the removal of a flashcard uses Flashcard#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * as to ensure that the flashcard with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * @see Flashcard#isSameFlashcard(Flashcard)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rachel170"
        },
        "content": "public class UniqueFlashcardList implements Iterable\u003cFlashcard\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private final ObservableList\u003cFlashcard\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private final ObservableList\u003cFlashcard\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Returns true if the list contains an equivalent flashcard as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public boolean contains(Flashcard toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameFlashcard);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Adds a flashcard to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * The flashcard must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void add(Flashcard toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            throw new DuplicateFlashcardException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Replaces the flashcard {@code target} in the list with {@code editedFlashcard}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * The flashcard identity of {@code editedFlashcard} must not be the same as another existing flashcard in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void setFlashcard(Flashcard target, Flashcard editedFlashcard) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        requireAllNonNull(target, editedFlashcard);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            throw new FlashcardNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        if (!target.isSameFlashcard(editedFlashcard) \u0026\u0026 contains(editedFlashcard)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            throw new DuplicateFlashcardException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        internalList.set(index, editedFlashcard);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Removes the equivalent flashcard from the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * The flashcard must exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void remove(Flashcard toRemove) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            throw new FlashcardNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void setFlashcards(UniqueFlashcardList replacement) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Replaces the contents of this list with {@code flashcards}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * {@code flashcards} must not contain duplicate flashcards."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void setFlashcards(List\u003cFlashcard\u003e flashcards) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        requireAllNonNull(flashcards);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        if (!flashcardsAreUnique(flashcards)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            throw new DuplicateFlashcardException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        internalList.setAll(flashcards);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public ObservableList\u003cFlashcard\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public Iterator\u003cFlashcard\u003e iterator() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                || (other instanceof UniqueFlashcardList // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueFlashcardList) other).internalList));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Returns true if {@code flashcards} contains only unique flashcards."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private boolean flashcardsAreUnique(List\u003cFlashcard\u003e flashcards) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        for (int i \u003d 0; i \u003c flashcards.size() - 1; i++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            for (int j \u003d i + 1; j \u003c flashcards.size(); j++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                if (flashcards.get(i).isSameFlashcard(flashcards.get(j))) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 46,
      "chuyouchia": 4,
      "-": 88
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/model/flashcard/exceptions/DuplicateFlashcardException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.model.flashcard.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * Signals that the operation will result in duplicate Flashcards"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * (Flashcards are considered duplicates if they have the same detail)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rachel170"
        },
        "content": "public class DuplicateFlashcardException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public DuplicateFlashcardException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        super(\"Operation would result in duplicate flashcards\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 5,
      "chuyouchia": 1,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/model/flashcard/exceptions/FlashcardNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.model.flashcard.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rachel170"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * Signals that the operation is unable to find the specified flashcard."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rachel170"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rachel170"
        },
        "content": "public class FlashcardNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 5,
      "chuyouchia": 1
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/model/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.model.deck.Deck;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " * Represents a Tag in the flashnotes."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public static final String RESERVED_TAG_NAME \u003d Deck.getReservedDeckName();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should not be blank. \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            + \"Tag name should not use the reserved name: \" + RESERVED_TAG_NAME;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        return !test.isBlank() \u0026\u0026 test.length() \u003c\u003d 140 \u0026\u0026 !test.equals(RESERVED_TAG_NAME);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pengxiangg": 10,
      "chuyouchia": 3,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/model/tag/TagContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "package seedu.flashnotes.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": " * Tests that a {@code Flashcard}\u0027s {@code Tag} matches any of the keywords given."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "public class TagContainsKeywordsPredicate implements Predicate\u003cFlashcard\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public TagContainsKeywordsPredicate(String keyword) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public String getKeyword() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        return keyword;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public boolean test(Flashcard flashcard) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        return flashcard.getTag().tagName.equals(keyword);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                || (other instanceof TagContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                \u0026\u0026 keyword.equals(((TagContainsKeywordsPredicate) other).keyword)); // state check"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pengxiangg": 32
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.FlashNotes;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.ReadOnlyFlashNotes;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.model.deck.Deck;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.Answer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.Question;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " * Contains utility methods for populating {@code FlashNotes} with sample data."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public static Flashcard[] getSampleFlashcards() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return new Flashcard[]{"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            new Flashcard(new Question(\"What is the definition of Macroeconomics?\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        new Answer(\"It is concerned with large-scale or general economic factors, \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                                + \"such as interest rates and national productivity.\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                        new Tag(\"Economics\")),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            new Flashcard(new Question(\"What is the definition of Microeconomics?\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        new Answer(\"It is concerned with single factors and the effects of individual decisions.\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                        new Tag(\"Economics\")),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            new Flashcard(new Question(\"What is the definition of demand?\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                        new Answer(\"It is the desire and willingness to pay a price for a good or service\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                        new Tag(\"Economics\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            new Flashcard(new Question(\"When did Singapore gain independence?\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                        new Answer(\"1965\"), new Tag(\"Singapore\")),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            new Flashcard(new Question(\"How many stars are there on Singapore\u0027s Flag?\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                        new Answer(\"5\"), new Tag(\"Singapore\")),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            new Flashcard(new Question(\"Who was Singapore\u0027s First Prime Minister?\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                        new Answer(\"Lee Kuan Yew\"), new Tag(\"Singapore\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            new Flashcard(new Question(\"How do you spell Singaporean?\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                        new Answer(\"Singaporean\"), new Tag(\"Singapore\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            new Flashcard(new Question(\"Who wrote The Great Gatsby\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                        new Answer(\"F. Scott Fitzgerald\"), new Tag(\"Literature\")),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            new Flashcard(new Question(\"Why did Daisy marry Tom in the Great Gatsby?\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                        new Answer(\"Daisy most likely married Tom because she knew \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                                + \"he could provide her with more material comforts\"), new Tag(\"Literature\")),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            new Flashcard(new Question(\"Why does Myrtle run out in front of Gatsby’s car in the Great Gatsby?\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                        new Answer(\" Myrtle runs out in front of Gatsby’s \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                                + \"car because she mistakes it for Tom’s car.\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                        new Tag(\"Literature\"))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public static Deck[] getSampleDecks() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        return new Deck[]{new Deck(\"Economics\"), new Deck(\"Singapore\"), new Deck(\"Literature\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        };"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public static ReadOnlyFlashNotes getSampleFlashNotes() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        FlashNotes sampleAb \u003d new FlashNotes();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        for (Flashcard sampleFlashcard : getSampleFlashcards()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            sampleAb.addFlashcard(sampleFlashcard);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        for (Deck deck : getSampleDecks()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            sampleAb.addDeck(deck);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 4,
      "pengxiangg": 34,
      "chuyouchia": 10,
      "foongsq": 3,
      "-": 22,
      "Sruthisarav": 4
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/storage/FlashNotesStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.FlashNotes;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.ReadOnlyFlashNotes;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import seedu.flashnotes.model.deck.UniqueDeckList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " * Represents a storage for {@link FlashNotes}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public interface FlashNotesStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    Path getFlashNotesFilePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Returns FlashNotes data as a {@link ReadOnlyFlashNotes}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    Optional\u003cReadOnlyFlashNotes\u003e readFlashNotes() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @see #getFlashNotesFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    Optional\u003cReadOnlyFlashNotes\u003e readFlashNotes(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Saves the given {@link ReadOnlyFlashNotes} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param flashNotes cannot be null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @param deckList unqiue decklist"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    void saveFlashNotes(ReadOnlyFlashNotes flashNotes, UniqueDeckList deckList) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @see #saveFlashNotes(ReadOnlyFlashNotes, UniqueDeckList)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    void saveFlashNotes(ReadOnlyFlashNotes flashNotes, Path filePath, UniqueDeckList deckList) throws IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 5,
      "chuyouchia": 43
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/storage/JsonAdaptedDeck.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rachel170"
        },
        "content": "package seedu.flashnotes.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import seedu.flashnotes.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import seedu.flashnotes.model.deck.Deck;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rachel170"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * Jackson-friendly version of {@link Deck}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rachel170"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rachel170"
        },
        "content": "class JsonAdaptedDeck {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private final String deckName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    // deck statistic"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private final String resultStatistic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Constructs a {@code JsonAdaptedDeck} with the given FlashNote deck details."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public JsonAdaptedDeck(@JsonProperty(\"deck\") String deckName, @JsonProperty(\"statistic\") String stat) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        this.deckName \u003d deckName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        this.resultStatistic \u003d stat;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Converts a given {@code Deck} into this class for Jackson use."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public JsonAdaptedDeck(Deck source) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        deckName \u003d source.getDeckName();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        resultStatistic \u003d source.getResultStatistics();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Reads from this Jackson-friendly adapted deck object, and turn it into model\u0027s {@code Deck} object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public Deck toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // Check to make sure deckName is valid"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        if (!Deck.isValidDeckLength(deckName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            throw new IllegalValueException(Deck.MESSAGE_CONSTRAINTS_LENGTH);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        } else if (!Deck.isValidDeckReservedName(deckName)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            throw new IllegalValueException(Deck.MESSAGE_CONSTRAINTS_RESERVED);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        //If deckName is valid, create a new Deck object with it"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        Deck theDeck \u003d new Deck(deckName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        // Check to make sure resultStatistic is valid"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        if (resultStatistic.isBlank()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new IllegalValueException(Deck.MESSAGE_CONSTRAINTS_STATISTIC);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // If still default value"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        if (resultStatistic.equals(\"-1.0\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // Update the created Deck object with the default value"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            theDeck.setResultStatistics(resultStatistic);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                // Check to make sure result statistics can be converted to Double"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                double statistic \u003d Double.parseDouble(resultStatistic);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                // Check to make sure that statistic is a valid value"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                if (statistic \u003e\u003d 0.0 \u0026\u0026 statistic \u003c\u003d 100.0) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    // Update the created Deck object with the retrieved result statistics"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    theDeck.setResultStatistics(String.format(\"%.1f\", statistic));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    // Throw an exception"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    throw new IllegalValueException(Deck.MESSAGE_CONSTRAINTS_STATISTIC);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                // If exception is found, throw IVE"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                throw new IllegalValueException(Deck.MESSAGE_CONSTRAINTS_STATISTIC);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return theDeck;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rachel170"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 61,
      "chuyouchia": 15,
      "foongsq": 5
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/storage/JsonAdaptedFlashcard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.Answer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.Question;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * Jackson-friendly version of {@link Flashcard}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rachel170"
        },
        "content": "class JsonAdaptedFlashcard {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Flashcard\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private final String question;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    private final String answer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    private final String tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Constructs a {@code JsonAdaptedFlashcard} with the given flashcard details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public JsonAdaptedFlashcard(@JsonProperty(\"question\") String question, @JsonProperty(\"answer\") String answer,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                                @JsonProperty(\"tag\") String tag) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Converts a given {@code Flashcard} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public JsonAdaptedFlashcard(Flashcard source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        question \u003d source.getQuestion().question;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        answer \u003d source.getAnswer().value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        tag \u003d source.getTag().tagName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Converts this Jackson-friendly adapted flashcard object into the model\u0027s {@code Flashcard} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted flashcard."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public Flashcard toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        if (question \u003d\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    Question.class.getSimpleName()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        if (!Question.isValidQuestion(question)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            throw new IllegalValueException(Question.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        final Question modelQuestion \u003d new Question(question);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        if (answer \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Answer.class.getSimpleName()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        if (!Answer.isValidAnswer(answer)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new IllegalValueException(Answer.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        final Answer modelAnswer \u003d new Answer(answer);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        if (tag \u003d\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                    Tag.class.getSimpleName()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        if (!Tag.isValidTagName(tag)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        final Tag modelTag \u003d new Tag(tag);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        return new Flashcard(modelQuestion, modelAnswer, modelTag);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 10,
      "pengxiangg": 14,
      "chuyouchia": 6,
      "foongsq": 9,
      "-": 30,
      "Sruthisarav": 9
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/storage/JsonAdaptedTag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 3,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/storage/JsonFlashNotesStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.ReadOnlyFlashNotes;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import seedu.flashnotes.model.deck.UniqueDeckList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " * A class to access FlashNotes data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class JsonFlashNotesStorage implements FlashNotesStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonFlashNotesStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public JsonFlashNotesStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public Path getFlashNotesFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public Optional\u003cReadOnlyFlashNotes\u003e readFlashNotes() throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return readFlashNotes(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Similar to {@link #readFlashNotes()}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public Optional\u003cReadOnlyFlashNotes\u003e readFlashNotes(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Optional\u003cJsonSerializableFlashNotes\u003e jsonFlashNotes \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                filePath, JsonSerializableFlashNotes.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        if (!jsonFlashNotes.isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            return Optional.of(jsonFlashNotes.get().toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void saveFlashNotes(ReadOnlyFlashNotes flashNotes, UniqueDeckList deckList) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        saveFlashNotes(flashNotes, filePath, deckList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Similar to {@link FlashNotesStorage#saveFlashNotes(ReadOnlyFlashNotes, UniqueDeckList)}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @param deckList"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void saveFlashNotes(ReadOnlyFlashNotes flashNotes, Path filePath, UniqueDeckList deckList)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        requireNonNull(flashNotes);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        requireNonNull(deckList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableFlashNotes(flashNotes, deckList), filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 9,
      "chuyouchia": 75
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/storage/JsonSerializableFlashNotes.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.logic.commands.AddDeckCommand.MESSAGE_DUPLICATE_DECK;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.FlashNotes;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.ReadOnlyFlashNotes;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.deck.Deck;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import seedu.flashnotes.model.deck.UniqueDeckList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " * An Immutable FlashNotes that is serializable to JSON format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "@JsonRootName(value \u003d \"flashnotes\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "class JsonSerializableFlashNotes {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FLASHCARD \u003d \"Flashcards list contains duplicate flashcard(s).\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private final List\u003cJsonAdaptedFlashcard\u003e flashcards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private final List\u003cJsonAdaptedDeck\u003e decks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Constructs a {@code JsonSerializableFlashNotes} with the given flashcards."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public JsonSerializableFlashNotes(@JsonProperty(\"flashcards\") List\u003cJsonAdaptedFlashcard\u003e flashcards,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                                      @JsonProperty(\"decks\") List\u003cJsonAdaptedDeck\u003e decks) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        this.flashcards.addAll(flashcards);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        this.decks.addAll(decks);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Converts a given {@code ReadOnlyFlashNotes} into this class for Jackson use."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Converts a given {@code UniqueDeckList} into this class for Jackson use."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableFlashNotes}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public JsonSerializableFlashNotes(ReadOnlyFlashNotes source, UniqueDeckList deckList) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        flashcards.addAll(source.getFlashcardList().stream()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                .map(JsonAdaptedFlashcard::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        decks.addAll(deckList.asUnmodifiableObservableList().stream()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                .map(JsonAdaptedDeck::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Converts this flashnotes into the model\u0027s {@code FlashNotes} object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public FlashNotes toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        FlashNotes flashNotes \u003d new FlashNotes();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        for (JsonAdaptedFlashcard jsonAdaptedFlashcard : flashcards) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            Flashcard flashcard \u003d jsonAdaptedFlashcard.toModelType();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            if (flashNotes.hasFlashcard(flashcard)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_FLASHCARD);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            flashNotes.addFlashcard(flashcard);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // For each deck info read"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        for (JsonAdaptedDeck jsonAdaptedDeck : decks) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            Deck theDeck \u003d jsonAdaptedDeck.toModelType();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            if (flashNotes.hasDeck(theDeck)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_DECK);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            flashNotes.addDeck(theDeck);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return flashNotes;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 22,
      "chuyouchia": 25,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/storage/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.ReadOnlyFlashNotes;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import seedu.flashnotes.model.deck.UniqueDeckList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public interface Storage extends FlashNotesStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    Path getFlashNotesFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    Optional\u003cReadOnlyFlashNotes\u003e readFlashNotes() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    void saveFlashNotes(ReadOnlyFlashNotes flashNotes, UniqueDeckList deckList) throws IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 2,
      "chuyouchia": 31
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.ReadOnlyFlashNotes;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import seedu.flashnotes.model.deck.UniqueDeckList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " * Manages storage of FlashNotes data in local storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private FlashNotesStorage flashNotesStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code FlashNotesStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public StorageManager(FlashNotesStorage flashNotesStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        this.flashNotesStorage \u003d flashNotesStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FlashNotes methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public Path getFlashNotesFilePath() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return flashNotesStorage.getFlashNotesFilePath();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public Optional\u003cReadOnlyFlashNotes\u003e readFlashNotes() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return readFlashNotes(flashNotesStorage.getFlashNotesFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public Optional\u003cReadOnlyFlashNotes\u003e readFlashNotes(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return flashNotesStorage.readFlashNotes(filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void saveFlashNotes(ReadOnlyFlashNotes flashNotes, UniqueDeckList deckList) throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        saveFlashNotes(flashNotes, flashNotesStorage.getFlashNotesFilePath(), deckList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void saveFlashNotes(ReadOnlyFlashNotes flashNotes, Path filePath, UniqueDeckList deckList)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        flashNotesStorage.saveFlashNotes(flashNotes, filePath, deckList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 6,
      "chuyouchia": 75
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/storage/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " * Represents a storage for {@link seedu.flashnotes.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Saves the given {@link seedu.flashnotes.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void disable() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        commandTextField.setEditable(false);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void enable() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        commandTextField.setEditable(true);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "         * @see seedu.flashnotes.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 5,
      "foongsq": 8,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/ui/DeckCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.deck.Deck;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " * An UI component that displays information of a {@code Deck}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class DeckCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private static final String FXML \u003d \"DeckCard.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    // Percentage string message"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private static final String RESULT_STATISTIC_LABEL \u003d \"Cards answered correctly on first try during last in-deck \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            + \"review session (%): \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    // No Statistic message"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private static final String NO_RESULT_STATISTIC_LABEL \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            \"No statistic available! Conduct a review session for some!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on FlashNotes level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    //todo change the link here"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private Deck cardDeck;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private Label deckName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private Label resultStatistics;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Creates a {@code cardDeck} with the given {@code deckName} and index to display."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public DeckCard(Deck cardDeck, int displayedIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        this.cardDeck \u003d cardDeck;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        deckName.setText(cardDeck.getDeckName());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        if (cardDeck.getResultStatistics().equals(\"-1.0\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // Update result display with no statistics available yet."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            resultStatistics.setText(NO_RESULT_STATISTIC_LABEL);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            resultStatistics.setText(RESULT_STATISTIC_LABEL + cardDeck.getResultStatistics());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        if (!(other instanceof DeckCard)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        // state check - name and ID check"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        DeckCard card \u003d (DeckCard) other;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                \u0026\u0026 deckName.equals(card.deckName)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                \u0026\u0026 cardDeck.equals(card.cardDeck);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 13,
      "chuyouchia": 64
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/ui/DeckCardListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.deck.Deck;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class DeckCardListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private static final String FXML \u003d \"DeckCardListPanel.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(DeckCardListPanel.class);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private ListView\u003cDeck\u003e deckCardListView;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Creates a {@code DeckCardListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public DeckCardListPanel(ObservableList\u003cDeck\u003e deckList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        deckCardListView.setItems(deckList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        deckCardListView.setCellFactory(listView -\u003e new DeckCardListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Deck} using a {@code DeckCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    class DeckCardListViewCell extends ListCell\u003cDeck\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        protected void updateItem(Deck deck, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            super.updateItem(deck, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            if (empty || deck \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                setGraphic(new DeckCard(deck, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 46
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/ui/DeckCardListRoot.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class DeckCardListRoot extends UiPart\u003cRegion\u003e implements RootNode {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private static final String FXML \u003d \"DeckCardListRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private DeckCardListPanel deckCardListPanel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private StackPane deckListPanelPlaceholder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    //handle moving from Home Screen to the main window view (card based)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public DeckCardListRoot(MainWindow mainWindow, Logic logic) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        this.mainWindow \u003d mainWindow;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return mainWindow.getPrimaryStage();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void fillInnerParts() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        deckCardListPanel \u003d new DeckCardListPanel(logic.getFilteredCardDeckList());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        deckListPanelPlaceholder.getChildren().addAll(deckCardListPanel.getRoot());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getFlashNotesFilePath());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void setFeedbackToUser(String s) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        resultDisplay.setFeedbackToUser(s);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Stage primaryStage \u003d mainWindow.getPrimaryStage();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        mainWindow.getPrimaryStage().show();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void handleExit() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Stage primaryStage \u003d getPrimaryStage();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public DeckCardListPanel getDeckCardListPanel() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return deckCardListPanel;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Executes the valid command to Deck Mode and returns the result."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @see seedu.flashnotes.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            if (commandResult.isDeck()) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                Stage primaryStage \u003d this.mainWindow.getPrimaryStage();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                        (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                RootNode rootNode \u003d new FlashcardListRoot(mainWindow, logic);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                mainWindow.setRootNode(rootNode, commandResult);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 54,
      "-": 159
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/ui/FlashcardCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * An UI component that displays information of a {@code Flashcard}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class FlashcardCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private static final String FXML \u003d \"FlashcardCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on FlashNotes level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    //todo change the link here"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public final Flashcard flashcard;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private Label question;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    private Label answer;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    //    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    //    private Label tag;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Creates a {@code FlashcardCard} with the given {@code Flashcard} and index to display."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public FlashcardCard(Flashcard flashcard, int displayedIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        this.flashcard \u003d flashcard;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        question.setText(flashcard.getQuestion().question);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        answer.setText(flashcard.getAnswer().value);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        //tag.setText(flashcard.getTag().tagName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        if (!(other instanceof FlashcardCard)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        FlashcardCard card \u003d (FlashcardCard) other;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                \u0026\u0026 flashcard.equals(card.flashcard);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 6,
      "chuyouchia": 10,
      "foongsq": 4,
      "-": 46,
      "Sruthisarav": 2
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/ui/FlashcardListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * Panel containing the list of flashcards."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rachel170"
        },
        "content": "public class FlashcardListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private static final String FXML \u003d \"FlashcardListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(FlashcardListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private ListView\u003cFlashcard\u003e flashcardListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Creates a {@code FlashcardListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public FlashcardListPanel(ObservableList\u003cFlashcard\u003e flashcardList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        flashcardListView.setItems(flashcardList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        flashcardListView.setCellFactory(listView -\u003e new FlashcardListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Flashcard} using a {@code FlashcardCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    class FlashcardListViewCell extends ListCell\u003cFlashcard\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        protected void updateItem(Flashcard flashcard, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            super.updateItem(flashcard, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            if (empty || flashcard \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                setGraphic(new FlashcardCard(flashcard, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 13,
      "chuyouchia": 5,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/ui/FlashcardListRoot.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class FlashcardListRoot extends UiPart\u003cRegion\u003e implements RootNode {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private static final String FXML \u003d \"FlashcardListRoot.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private final MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private FlashcardListPanel flashcardListPanel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private ReviewWindow reviewWindow;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private CommandBox commandBox;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private StackPane cardListPanelPlaceholder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public FlashcardListRoot(MainWindow mainWindow, Logic logic) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        this.mainWindow \u003d mainWindow;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        reviewWindow \u003d new ReviewWindow(logic, mainWindow);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "         *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "         *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "         */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        });"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void fillInnerParts() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        flashcardListPanel \u003d new FlashcardListPanel(logic.getFilteredFlashcardList());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        cardListPanelPlaceholder.getChildren().add(flashcardListPanel.getRoot());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getFlashNotesFilePath());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        this.commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void setFeedbackToUser(String s) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        resultDisplay.setFeedbackToUser(s);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Opens the review window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void handleReview() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        if (!reviewWindow.isShowing()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            disableCommandBox();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            reviewWindow.show();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            reviewWindow.focus();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void handleExit() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Stage primaryStage \u003d mainWindow.getPrimaryStage();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        reviewWindow.hide();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * Removes functionality for users to enter commands in the command box temporarily."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private void disableCommandBox() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        this.commandBox.disable();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * Restores functionality for users to enter commands in the command box temporarily."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void enableCommandBox() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        this.commandBox.enable();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public FlashcardListPanel getFlashcardListPanel() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return flashcardListPanel;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Executes the valid commands in card-mode and returns the result."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @see seedu.flashnotes.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            if (commandResult.isStartReview()) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                handleReview();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            if (commandResult.isHome()) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                Stage primaryStage \u003d mainWindow.getPrimaryStage();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                        (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                RootNode rootNode \u003d new DeckCardListRoot(mainWindow, logic);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                mainWindow.setRootNode(rootNode, commandResult);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 210,
      "foongsq": 8
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103t-t15-2.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        getRoot().setAlwaysOnTop(true);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 3,
      "foongsq": 1,
      "-": 99
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/ui/IndividualFlashcard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": "package seedu.flashnotes.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import seedu.flashnotes.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import seedu.flashnotes.logic.Logic;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import seedu.flashnotes.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foongsq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": " * The UI component that is responsible for showing the flashcard being reviewed."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foongsq"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": "public class IndividualFlashcard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private static final String FXML \u003d \"IndividualFlashcard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(IndividualFlashcard.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private ObservableList\u003cFlashcard\u003e flashcardsToReview;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    private double count;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    private int numOfFlashcards;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    private Flashcard flashcardToDisplay;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    // Count of number of questions gotten right the first time"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private int correctAnswers;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * Update these below to match flashcard."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private Label question;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private Label answer;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * Constructs an individual flashcard display panel."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param logic"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public IndividualFlashcard(Logic logic) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.index \u003d 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        this.count \u003d 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        this.correctAnswers \u003d 0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * Initializes the content of the flashcards to review in display."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.flashcardsToReview \u003d logic.getFlashcardsToReview();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        this.numOfFlashcards \u003d flashcardsToReview.size();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * Displays the flashcard in the GUI"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void displayFlashcard() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        flashcardToDisplay \u003d this.flashcardsToReview.get(this.index);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        question.setText(\"Question: \" + flashcardToDisplay.getQuestion().question);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        answer.setText(\"Answer: \" + flashcardToDisplay.getAnswer().value);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        question.setVisible(true);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        answer.setVisible(false);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Displays the final statistics of review session in the GUI."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Update the deck revision stats with the review session\u0027s."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public String displayStatistics() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // Calculate Performance percentage"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        double performance \u003d (this.correctAnswers * 100.00) / (this.numOfFlashcards * 1.0);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // Store the performance value"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        logic.updateDeckPerformanceScore(performance);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // Log the new statistics"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        logger.info(String.format(\"Statistic for review session: %1$d/%2$d\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                this.correctAnswers, this.numOfFlashcards));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        logger.info(String.format(\"Calculated statistic for review session: %.1f percent correct\", performance));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // Use the question label to list total percentage of first time right"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        question.setText(String.format(\"Percentage of questions answered correctly on the first try: %.1f%s\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                performance,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                \"%\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // Use the question label to list total questions right on first time right/total card"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        answer.setText(String.format(\"Out of %d questions, you got %d right on the first try!\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                this.numOfFlashcards, this.correctAnswers));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        question.setVisible(true);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        answer.setVisible(true);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // Successful update of it leads to display of statistic"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return \"Here is your score for the review session!\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "     * Flips the flashcard to show the answer/question"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public void flipFlashcard() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        if (isCardFlipped()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            showAnswer();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            showQuestion();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "     * Makes question visible while hiding the answer"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public void showQuestion() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        question.setVisible(true);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        answer.setVisible(false);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "     * Makes answer visible while hiding question"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public void showAnswer() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        question.setVisible(false);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        answer.setVisible(true);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "     * Returns whether the current flashcard being reviewed has been flipped"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public boolean isCardFlipped() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        return flashcardToDisplay.getIsFlipped();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "     * After marking the card as correct/wrong depending on user input,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "     * show the next card. If the card is wrong, add card to the back of"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "     * the list to be reviewed again later."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "     * @param isCorrect"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public String handleNextCard(int isCorrect) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assert(isCorrect \u003e 0);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        if (isCorrect \u003d\u003d 2) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            this.count +\u003d 1;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            Flashcard incorrectFlashcard \u003d flashcardsToReview.get(this.index);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            this.flashcardsToReview \u003d logic.getModifiedFlashcardsToReview();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // Check if index is still within first run"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        if (this.index \u003c numOfFlashcards) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // If correctly answered on first try, increment correctAnswers"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            if (isCorrect \u003d\u003d 2) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                this.correctAnswers +\u003d 1;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        this.index +\u003d 1;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        if (count \u003d\u003d numOfFlashcards) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            return \"exit\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            displayFlashcard();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            return Double.toString(count / numOfFlashcards);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "foongsq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 39,
      "foongsq": 59,
      "Sruthisarav": 64
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.logic.Logic;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private RootNode rootNode;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        //initialize the deck list root node as the primary scene"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        rootNode \u003d new DeckCardListRoot(this, logic);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Region root \u003d rootNode.getFxmlLoader().getRoot();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        primaryStage.setScene(new Scene(root));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        rootNode.fillInnerParts();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Sets the new root node object for the MainWindow."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param rootNode The new root node to be rendered."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param commandResult Command Result which contains the right message for the user."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void setRootNode(RootNode rootNode, CommandResult commandResult) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        this.rootNode \u003d rootNode;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Region root \u003d rootNode.getFxmlLoader().getRoot();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        primaryStage.getScene().setRoot(root);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        this.rootNode.fillInnerParts();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        this.rootNode.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        rootNode.handleExit();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 32,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/ui/ResultDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/ui/ReviewWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": "package seedu.flashnotes.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import javafx.scene.control.ProgressBar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import javafx.stage.StageStyle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import seedu.flashnotes.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import seedu.flashnotes.logic.Logic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import seedu.flashnotes.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import seedu.flashnotes.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import seedu.flashnotes.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foongsq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foongsq"
        },
        "content": " * Controller for a review page"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foongsq"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foongsq"
        },
        "content": "public class ReviewWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ReviewWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private static final String FXML \u003d \"ReviewWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    // Make use of a standard message for invalid input at end of review session"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private static final String MESSAGE_END_OF_REVIEW \u003d \"The review session has ended. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            + \"Please enter \u0027endReview\u0027 to return to the deck screen.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private CommandBox commandBox;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private IndividualFlashcard individualFlashcard;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    // Use a boolean to check status of review session"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private boolean isComplete;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private StackPane individualFlashcardPlaceholder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    private ProgressBar progressBar;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * Creates a new ReviewWindow."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public ReviewWindow(Logic logic, MainWindow mainWindow) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        super(FXML, new Stage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        this.mainWindow \u003d mainWindow;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.individualFlashcard \u003d new IndividualFlashcard(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        individualFlashcardPlaceholder.getChildren().add(individualFlashcard.getRoot());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getFlashNotesFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        this.progressBar \u003d new ProgressBar(0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        statusbarPlaceholder.getChildren().add(progressBar);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // Initial state of isComplete is False"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        this.isComplete \u003d false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * Shows the review window."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        logger.fine(\"Showing review page about the application.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.individualFlashcard.init();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.individualFlashcard.displayFlashcard();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        getRoot().setAlwaysOnTop(true);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        getRoot().initStyle(StageStyle.UTILITY);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        getRoot().showAndWait();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // After manual closing"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        this.handleExit();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * Returns true if the review window is currently being shown."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Hides the review window."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // Hide review window"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Focuses on the review window."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Shows the final statistics of the review session."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Updates model with new review statistic for the deck."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void displayStatistics() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // Log"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        logger.info(\"Displaying statistics of current review session.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // Update IndividualFlashcard UI"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        String message \u003d this.individualFlashcard.displayStatistics();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // Update resultDisplay"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        resultDisplay.setFeedbackToUser(message);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // Update progressBar display (100% correctly answered)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        progressBar.setProgress(1);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // Mark the review session at its end"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        this.isComplete \u003d true;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "     * Flips the flashcard to show the answer/question"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void handleFlip() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        this.individualFlashcard.flipFlashcard();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "     * After marking the card as correct/wrong depending on user input,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "     * show the next card. If the card is wrong, add card to the back of"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "     * the list to be reviewed again later."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "     * @param isCorrect"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public void handleNextCard(int isCorrect) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assert(isCorrect \u003e 0);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        String result \u003d individualFlashcard.handleNextCard(isCorrect);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        if (result.equals(\"exit\")) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            displayStatistics();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            progressBar.setProgress(Double.parseDouble(result));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // Turn off review mode in logic"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        logic.setIsReviewModeFalse();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // Hide help window"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        RootNode rootNode \u003d new FlashcardListRoot(mainWindow, logic);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"Closed Review Window\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        Region root \u003d rootNode.getFxmlLoader().getRoot();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        mainWindow.getPrimaryStage().getScene().setRoot(root);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        rootNode.fillInnerParts();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        rootNode.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @see seedu.flashnotes.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            if (isComplete \u0026\u0026 !(commandResult.isExit())) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                // If session has ended, ban the usage of next command"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                throw new CommandException(MESSAGE_END_OF_REVIEW);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                // Hide review window"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                this.hide();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                // Return to Card View"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            if (commandResult.isNext() !\u003d 0) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "                handleNextCard(commandResult.isNext());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            if (commandResult.isFlipped()) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "                handleFlip();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "foongsq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 48,
      "chuyouchia": 10,
      "foongsq": 151,
      "Sruthisarav": 37
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/ui/RootNode.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " * Interface for Root Nodes of MainWindow object."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public interface RootNode {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    void fillInnerParts();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    FXMLLoader getFxmlLoader();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    void setFeedbackToUser(String s);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    void handleExit();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 15
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/ui/StatusBarFooter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code StatusBarFooter} with the given {@code Path}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/flash_notes_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 6,
      "-": 83
    }
  },
  {
    "path": "src/main/java/seedu/flashnotes/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    //to be checked again if this is the right approach"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public FXMLLoader getFxmlLoader() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return fxmlLoader;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 6,
      "-": 86
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    -fx-padding: 20;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    -fx-background-radius: 20;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    -fx-padding: 20;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ".list-cell:filled {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    -fx-background-color:derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ".list-cell:filled:even #cardPane{"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ".list-cell:filled:odd #cardPane {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ".list-cell:filled:selected #deckCardPane {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    -fx-border-radius: 20px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ".list-cell:filled #deckCardPane {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    -fx-background-color: #914f3e;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    -fx-background-radius: 20px;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "rachel170"
        },
        "content": "#filterField, #flashcardListPanel, #flashcardWebpage {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "foongsq"
        },
        "content": ".individualFlashcard {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    -fx-background-radius: 10;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "foongsq"
        },
        "content": "}"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "foongsq"
        },
        "content": ".individualFlashcard .label {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "foongsq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 1,
      "chuyouchia": 19,
      "foongsq": 11,
      "-": 346
    }
  },
  {
    "path": "src/main/resources/view/DeckCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003cHBox id\u003d\"deckCardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                \u003cminWidth\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                    \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                    \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            \u003cLabel fx:id\u003d\"deckName\" text\u003d\"\\$deckName\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        \u003cLabel fx:id\u003d\"resultStatistics\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$resultStatistics\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 27
    }
  },
  {
    "path": "src/main/resources/view/DeckCardListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003cListView fx:id\u003d\"deckCardListView\" VBox.vgrow\u003d\"ALWAYS\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "          xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"/\u003e"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 7
    }
  },
  {
    "path": "src/main/resources/view/DeckCardListRoot.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        \u003c/Menu\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        \u003c/Menu\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    \u003cVBox fx:id\u003d\"deckList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        \u003cStackPane fx:id\u003d\"deckListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 44
    }
  },
  {
    "path": "src/main/resources/view/FlashcardCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        \u003cLabel fx:id\u003d\"question\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foongsq"
        },
        "content": "\u003c!--      \u003cLabel fx:id\u003d\"tag\" /\u003e--\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foongsq"
        },
        "content": "      \u003cLabel fx:id\u003d\"answer\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$answer\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "foongsq": 3,
      "-": 31
    }
  },
  {
    "path": "src/main/resources/view/FlashcardListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003cListView fx:id\u003d\"flashcardListView\" VBox.vgrow\u003d\"ALWAYS\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"/\u003e"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 2,
      "-": 5
    }
  },
  {
    "path": "src/main/resources/view/FlashcardListRoot.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        \u003c/Menu\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        \u003c/Menu\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    \u003cVBox fx:id\u003d\"flashcardList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        \u003cStackPane fx:id\u003d\"cardListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "   \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "      \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "      \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "   \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 45
    }
  },
  {
    "path": "src/main/resources/view/IndividualFlashcard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": "\u003cStackPane maxWidth\u003d\"600\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foongsq"
        },
        "content": "           xmlns:fx\u003d\"http://javafx.com/fxml/1\" styleClass\u003d\"individualFlashcard\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            \u003cLabel fx:id\u003d\"question\" text\u003d\"Question\" styleClass\u003d\"individualFlashcard\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            \u003cLabel fx:id\u003d\"answer\" text\u003d\"Answer\" styleClass\u003d\"individualFlashcard\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foongsq"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "foongsq": 34
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "         title\u003d\"Flash Notes\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    \u003cImage url\u003d\"@/images/flash_notes_32.png\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 3,
      "-": 10
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "foongsq": 1,
      "-": 8
    }
  },
  {
    "path": "src/main/resources/view/ReviewWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Review\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        \u003cImage url\u003d\"@/images/review_icon.png\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                           minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"individualFlashcardPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                           minHeight\u003d\"200\" prefHeight\u003d\"300\" maxHeight\u003d\"500\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foongsq"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "foongsq": 45
    }
  },
  {
    "path": "src/test/data/JsonFlashNotesStorageTest/invalidAndValidFlashcard.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rachel170"
        },
        "content": "  \"flashcards\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    \"question\": \"Valid card\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    \"answer\": \"9482424\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    \"question\": \"Card With Invalid answer Field\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    \"answer\": \"\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 1,
      "foongsq": 4,
      "-": 4
    }
  },
  {
    "path": "src/test/data/JsonFlashNotesStorageTest/invalidDeck.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rachel170"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rachel170"
        },
        "content": "  \"flashcards\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    \"question\": \"What is a valid Deck?\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    \"answer\": \"One with a name matching an existing tag.\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    \"tag\": \"valid tag\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rachel170"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    \"question\": \"valid question\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    \"answer\": \"valid answer\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    \"tag\": \"valid tag\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rachel170"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rachel170"
        },
        "content": "  \"decks\": [ {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    \"deckName\": \"\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    \"resultStatistic\": \"\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rachel170"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rachel170"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 15
    }
  },
  {
    "path": "src/test/data/JsonFlashNotesStorageTest/invalidFlashcard.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rachel170"
        },
        "content": "  \"flashcards\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    \"question\": \" \","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    \"answer\": \"\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 1,
      "foongsq": 2,
      "-": 3
    }
  },
  {
    "path": "src/test/data/JsonSerializableFlashNotesTest/duplicateFlashcard.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rachel170"
        },
        "content": "  \"flashcards\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    \"question\": \"What can you do today that you were not capable of a year ago?\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    \"answer\": \"binge eat\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    \"tag\": \"friends\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    \"question\": \"What can you do today that you were not capable of a year ago?\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    \"answer\": \"binge eat\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    \"tag\": \"friends\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rachel170"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rachel170"
        },
        "content": "  \"decks\": [ {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    \"deckName\": \"friends\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    \"resultStatistic\": \"-1.0\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 5,
      "pengxiangg": 3,
      "foongsq": 2,
      "-": 4,
      "Sruthisarav": 1
    }
  },
  {
    "path": "src/test/data/JsonSerializableFlashNotesTest/invalidDeck.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rachel170"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rachel170"
        },
        "content": "  \"flashcards\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    \"question\": \"What is an invalid Deck?\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    \"answer\": \"One containing an incorrect statistical value.\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    \"tag\": \"valid tag\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rachel170"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    \"question\": \"valid question\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    \"answer\": \"valid answer\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    \"tag\": \"valid tag\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rachel170"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rachel170"
        },
        "content": "  \"decks\": [ {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    \"deckName\": \"valid tag\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    \"resultStatistic\": \"null\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rachel170"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rachel170"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 15
    }
  },
  {
    "path": "src/test/data/JsonSerializableFlashNotesTest/invalidFlashcard.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rachel170"
        },
        "content": "  \"flashcards\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    \"question\": \" \","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    \"answer\": \"\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    \"tag\": \"\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    \"question\": \"valid question\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    \"answer\": \"valid answer\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    \"tag\": \"valid tag\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rachel170"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rachel170"
        },
        "content": "  \"decks\": [ {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    \"deckName\": \"valid tag\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    \"resultStatistic\": \"-1.0\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 9,
      "chuyouchia": 1,
      "foongsq": 2,
      "-": 3
    }
  },
  {
    "path": "src/test/data/JsonSerializableFlashNotesTest/reservedDeck.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rachel170"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rachel170"
        },
        "content": "  \"flashcards\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    \"question\": \"What is an invalid Deck?\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    \"answer\": \"One with a reserved deck name.\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    \"tag\": \"default\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rachel170"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    \"question\": \"valid question\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    \"answer\": \"valid answer\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    \"tag\": \"valid tag\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rachel170"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rachel170"
        },
        "content": "  \"decks\": [ {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    \"deckName\": \"valid tag\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    \"resultStatistic\": \"-1.0\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rachel170"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    \"deckName\": \"list\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    \"resultStatistic\": \"-1.0\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rachel170"
        },
        "content": "  }]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rachel170"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 18
    }
  },
  {
    "path": "src/test/data/JsonSerializableFlashNotesTest/typicalFlashcards.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "  \"_comment\": \"FlashNotes save file which contains the same Flashcard values as in TypicalFlashcards#getTypicalFlashNotes()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rachel170"
        },
        "content": "  \"flashcards\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    \"question\" : \"Who\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    \"answer\" : \"me\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    \"tag\" : \"friends\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    \"question\" : \"What\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    \"answer\" : \"idk\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    \"tag\" : \"owesMoney\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    \"question\" : \"Why\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    \"answer\" : \"because someone has to\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    \"tag\" : \"friends\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    \"question\" : \"How\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    \"answer\" : \"use your hands\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    \"tag\" : \"friends\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    \"question\" : \"When\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    \"answer\" : \"at 2pm\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    \"tag\" : \"Time\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    \"question\" : \"Where\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    \"answer\" : \"at home\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    \"tag\" : \"Place\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    \"question\" : \"How much\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    \"answer\" : \"300 apples\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    \"tag\" : \"Math\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rachel170"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rachel170"
        },
        "content": "  \"decks\" : [ {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    \"deckName\" : \"friends\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    \"resultStatistic\" : \"3.3\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rachel170"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    \"deckName\" : \"owesMoney\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    \"resultStatistic\" : \"-1.0\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rachel170"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    \"deckName\" : \"Time\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    \"resultStatistic\" : \"0\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rachel170"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    \"deckName\" : \"Place\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    \"resultStatistic\" : \"100\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rachel170"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    \"deckName\" : \"Math\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    \"resultStatistic\" : \"75\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 17,
      "pengxiangg": 7,
      "chuyouchia": 1,
      "foongsq": 7,
      "-": 9,
      "Sruthisarav": 7
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "  \"flashNotesFilePath\" : \"flashnotes.json\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 1,
      "-": 12
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "  \"flashNotesFilePath\" : \"flashnotes.json\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/AppParametersTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/commons/core/ConfigTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/commons/core/VersionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        final Index fifthFlashcardIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertTrue(fifthFlashcardIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertTrue(fifthFlashcardIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertTrue(fifthFlashcardIndex.equals(fifthFlashcardIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertFalse(fifthFlashcardIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertFalse(fifthFlashcardIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertFalse(fifthFlashcardIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 7,
      "chuyouchia": 2,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/flash_notes_32.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 3,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/commons/util/CollectionUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/commons/util/ConfigUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/commons/util/FileUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/commons/util/JsonUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.MESSAGE_INVALID_DECK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.VALID_TAG_NATURE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import seedu.flashnotes.logic.commands.AddDeckCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.logic.commands.ListAllCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.ReadOnlyFlashNotes;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import seedu.flashnotes.model.deck.Deck;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import seedu.flashnotes.model.deck.UniqueDeckList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.storage.JsonFlashNotesStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        JsonFlashNotesStorage flashNotesStorage \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                new JsonFlashNotesStorage(temporaryFolder.resolve(\"flashnotes.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        StorageManager storage \u003d new StorageManager(flashNotesStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        String deleteCommand \u003d \"deleteDeck 9\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_DECK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        String listCommand \u003d ListAllCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertCommandSuccess(listCommand, String.format(ListAllCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                0), model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        // Setup LogicManager with JsonFlashNotesIoExceptionThrowingStub"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        JsonFlashNotesStorage flashNotesStorage \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                new JsonFlashNotesIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionFlashNotes.json\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        StorageManager storage \u003d new StorageManager(flashNotesStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        String addCommand \u003d AddDeckCommand.COMMAND_WORD + \" n/\" + VALID_TAG_NATURE;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        Deck expectedDeck \u003d new Deck(VALID_TAG_NATURE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        expectedModel.addDeck(expectedDeck);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void getFilteredFlashcardList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredFlashcardList().remove(0));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFlashNotes(), new UserPrefs());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private static class JsonFlashNotesIoExceptionThrowingStub extends JsonFlashNotesStorage {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        private JsonFlashNotesIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        public void saveFlashNotes(ReadOnlyFlashNotes flashNotes, Path filePath, UniqueDeckList deckList)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                throws IOException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 17,
      "pengxiangg": 9,
      "chuyouchia": 20,
      "-": 118
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/logic/commands/AddCardCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.testutil.TypicalFlashcards.getTypicalFlashNotes;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.model.deck.Deck;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "public class AddCardCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        model \u003d new ModelManager(getTypicalFlashNotes(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void execute_newFlashcard_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        Flashcard validFlashcard \u003d new FlashcardBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFlashNotes(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        expectedModel.addFlashcard(validFlashcard);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        expectedModel.addDeck(new Deck(\"singapore\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertCommandSuccess(new AddCardCommand(validFlashcard), model,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "                String.format(AddCardCommand.MESSAGE_SUCCESS, validFlashcard), expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void execute_duplicateFlashcard_throwsCommandException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Flashcard flashcardInList \u003d model.getFlashNotes().getFlashcardList().get(0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertCommandFailure(new AddCardCommand(flashcardInList), model, AddCardCommand.MESSAGE_DUPLICATE_FLASHCARD);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 4,
      "pengxiangg": 1,
      "chuyouchia": 12,
      "-": 25,
      "Sruthisarav": 5
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/logic/commands/AddCardCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.FlashNotes;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.ReadOnlyFlashNotes;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.deck.Deck;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import seedu.flashnotes.model.deck.UniqueDeckList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "public class AddCardCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void constructor_nullFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCardCommand(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void execute_flashcardAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        ModelStubAcceptingFlashcardAdded modelStub \u003d new ModelStubAcceptingFlashcardAdded();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        Flashcard validFlashcard \u003d new FlashcardBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        CommandResult commandResult \u003d new AddCardCommand(validFlashcard).execute(modelStub);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertEquals(String.format(AddCardCommand.MESSAGE_SUCCESS, validFlashcard), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertEquals(Arrays.asList(validFlashcard), modelStub.flashcardsAdded);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void execute_duplicateFlashcard_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        Flashcard validFlashcard \u003d new FlashcardBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        AddCardCommand addCardCommand \u003d new AddCardCommand(validFlashcard);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithFlashcard(validFlashcard);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "                AddCardCommand.MESSAGE_DUPLICATE_FLASHCARD, () -\u003e addCardCommand.execute(modelStub));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        Flashcard alice \u003d new FlashcardBuilder().withQuestion(\"Why?\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        Flashcard bob \u003d new FlashcardBuilder().withQuestion(\"How?\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        AddCardCommand addAliceCommand \u003d new AddCardCommand(alice);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        AddCardCommand addBobCommand \u003d new AddCardCommand(bob);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        AddCardCommand addAliceCommandCopy \u003d new AddCardCommand(alice);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // different flashcard -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        public Path getFlashNotesFilePath() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        public void setFlashNotesFilePath(Path flashNotesFilePath) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        public void setUpReviewList() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        public void addFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        public void setFlashNotes(ReadOnlyFlashNotes flashNotes) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        public ReadOnlyFlashNotes getFlashNotes() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        public ObservableList\u003cFlashcard\u003e getFlashcardsToReview() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        public void addFlashcardToReview() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        public ObservableList\u003cFlashcard\u003e getModifiedFlashcardsToReview() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        public void updateFlashcardBeingReviewed(int result) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        public void resetFlipOfFlashcardBeingReviewed() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        public Flashcard getFlashcardBeingReviewed() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        public boolean getIsFlashcardFlipped() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        public void carryOutFlipCommand() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        public void markFlashcardBeingReviewed(Flashcard flashcard, int result) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        public boolean hasDeck(Deck deck) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        public void deleteDeck(Deck target) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        public void addDeck(Deck deck) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        public void setDeck(Deck target, Deck editedDeck) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public boolean getIsInDeck() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public void setIsInDeckTrue() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public void setIsInDeckFalse() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public void setCurrentDeckName(String deckName) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public String getCurrentDeckName() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        public ObservableList\u003cDeck\u003e getFilteredDeckList() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        public void updateFilteredDeckList(Predicate\u003cDeck\u003e predicate) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        public boolean hasFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        public void deleteFlashcard(Flashcard target) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        public void setFlashcard(Flashcard target, Flashcard editedFlashcard) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        public ObservableList\u003cFlashcard\u003e getFilteredFlashcardList() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        public void updateFilteredFlashcardList(Predicate\u003cFlashcard\u003e predicate) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        public boolean getIsReviewMode() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        public void setIsReviewModeFalse() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        public void setIsReviewModeTrue() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        public long getReviewCardLimit() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        public void setReviewCardLimit(long reviewCardLimit) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        public void updateDeckPerformanceScore(Double reviewScore, String deckName) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        public UniqueDeckList getUniqueDeckList() {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * A Model stub that contains a single flashcard."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private class ModelStubWithFlashcard extends ModelStub {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        private final Flashcard flashcard;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        ModelStubWithFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            requireNonNull(flashcard);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            this.flashcard \u003d flashcard;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        public boolean hasFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            requireNonNull(flashcard);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            return this.flashcard.isSameFlashcard(flashcard);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * A Model stub that always accept the flashcard being added."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private class ModelStubAcceptingFlashcardAdded extends ModelStub {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        final ArrayList\u003cFlashcard\u003e flashcardsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        public boolean hasFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            requireNonNull(flashcard);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            return flashcardsAdded.stream().anyMatch(flashcard::isSameFlashcard);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        public void addFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            requireNonNull(flashcard);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            flashcardsAdded.add(flashcard);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        public void addDeck(Deck deck) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            requireNonNull(deck);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        public ReadOnlyFlashNotes getFlashNotes() {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            return new FlashNotes();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 47,
      "pengxiangg": 22,
      "chuyouchia": 52,
      "foongsq": 34,
      "-": 134,
      "Sruthisarav": 51
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/logic/commands/AddDeckCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.testutil.TypicalDecks.VALID_DECK_1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.testutil.TypicalDecks.VALID_DECK_2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.FlashNotes;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.ReadOnlyFlashNotes;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.deck.Deck;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.deck.UniqueDeckList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class AddDeckCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void constructor_nullDeck_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddDeckCommand(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void execute_deckAcceptedByModel_success() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        AddDeckCommandTest.ModelStubAcceptingDeckAdded modelStub \u003d new AddDeckCommandTest.ModelStubAcceptingDeckAdded();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        CommandResult commandResult \u003d new AddDeckCommand(VALID_DECK_1).execute(modelStub);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertEquals(String.format(AddDeckCommand.MESSAGE_SUCCESS, VALID_DECK_1.getDeckName()),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertEquals(Arrays.asList(VALID_DECK_1), modelStub.decksAdded);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void execute_duplicateDeck_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Deck validDeck \u003d new Deck(\"Funky\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        AddDeckCommand addDeckCommand \u003d new AddDeckCommand(validDeck);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithDeck(validDeck);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                AddDeckCommand.MESSAGE_DUPLICATE_DECK, () -\u003e addDeckCommand.execute(modelStub));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        AddDeckCommand addFirstValidDeckCommand \u003d new AddDeckCommand(VALID_DECK_1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        AddDeckCommand addSecondValidDeckCommand \u003d new AddDeckCommand(VALID_DECK_2);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertTrue(addFirstValidDeckCommand.equals(addFirstValidDeckCommand));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        AddDeckCommand addFirstValidDeckCommandCopy \u003d new AddDeckCommand(VALID_DECK_1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertTrue(addFirstValidDeckCommand.equals(addFirstValidDeckCommandCopy));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertFalse(addFirstValidDeckCommand.equals(1));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertFalse(addFirstValidDeckCommand.equals(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        // different flashcard -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertFalse(addFirstValidDeckCommand.equals(addSecondValidDeckCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        public Path getFlashNotesFilePath() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        public void setFlashNotesFilePath(Path flashNotesFilePath) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        public void setUpReviewList() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        public void addFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        public void setFlashNotes(ReadOnlyFlashNotes flashNotes) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        public ReadOnlyFlashNotes getFlashNotes() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        public ObservableList\u003cFlashcard\u003e getFlashcardsToReview() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        public void addFlashcardToReview() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        public ObservableList\u003cFlashcard\u003e getModifiedFlashcardsToReview() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        public void updateFlashcardBeingReviewed(int result) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        public void resetFlipOfFlashcardBeingReviewed() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        public Flashcard getFlashcardBeingReviewed() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        public boolean getIsFlashcardFlipped() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        public void carryOutFlipCommand() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        public void markFlashcardBeingReviewed(Flashcard flashcard, int result) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        public boolean hasDeck(Deck deck) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        public void deleteDeck(Deck target) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        public void addDeck(Deck deck) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        public void setDeck(Deck target, Deck editedDeck) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        public boolean getIsInDeck() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        public void setIsInDeckTrue() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        public void setIsInDeckFalse() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        public void setCurrentDeckName(String deckName) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        public String getCurrentDeckName() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        public ObservableList\u003cDeck\u003e getFilteredDeckList() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        public void updateFilteredDeckList(Predicate\u003cDeck\u003e predicate) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        public boolean hasFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        public void deleteFlashcard(Flashcard target) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        public void setFlashcard(Flashcard target, Flashcard editedFlashcard) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        public ObservableList\u003cFlashcard\u003e getFilteredFlashcardList() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        public void updateFilteredFlashcardList(Predicate\u003cFlashcard\u003e predicate) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        public long getReviewCardLimit() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        public void setReviewCardLimit(long reviewCardLimit) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        public void updateDeckPerformanceScore(Double reviewScore, String deckName) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        public UniqueDeckList getUniqueDeckList() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public void setIsReviewModeFalse() {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public void setIsReviewModeTrue() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public boolean getIsReviewMode() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * A Model stub that contains a single flashcard."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private class ModelStubWithDeck extends ModelStub {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        private final Deck deck;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        ModelStubWithDeck(Deck deck) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            requireNonNull(deck);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            this.deck \u003d deck;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        public boolean hasDeck(Deck deck) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            requireNonNull(deck);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            return this.deck.isSameDeck(deck);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * A Model stub that always accept the flashcard being added."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private class ModelStubAcceptingDeckAdded extends AddDeckCommandTest.ModelStub {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        final ArrayList\u003cDeck\u003e decksAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        public boolean hasDeck(Deck deck) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            requireNonNull(deck);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            return decksAdded.stream().anyMatch(deck::isSameDeck);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        public void addDeck(Deck deck) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            requireNonNull(deck);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            decksAdded.add(deck);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        public ReadOnlyFlashNotes getFlashNotes() {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            return new FlashNotes();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 1,
      "pengxiangg": 12,
      "chuyouchia": 274,
      "foongsq": 3,
      "Sruthisarav": 37
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/logic/commands/CheckReviewLimitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": "package seedu.flashnotes.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import static seedu.flashnotes.testutil.TypicalFlashcards.getTypicalFlashNotes;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import seedu.flashnotes.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import seedu.flashnotes.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import seedu.flashnotes.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foongsq"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": " * {@code CheckReviewLimitCommand}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foongsq"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foongsq"
        },
        "content": "public class CheckReviewLimitCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFlashNotes(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void execute_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        long validLimit \u003d 20;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        String expectedMessage \u003d String.format(CheckReviewLimitCommand.MESSAGE_SUCCESS, validLimit);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getFlashNotes(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        expectedModel.setReviewCardLimit(validLimit);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        model.setReviewCardLimit(validLimit);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        CheckReviewLimitCommand checkReviewLimitCommand \u003d new CheckReviewLimitCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertCommandSuccess(checkReviewLimitCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        CheckReviewLimitCommand checkReviewLimitCommand \u003d new CheckReviewLimitCommand();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertTrue(checkReviewLimitCommand.equals(checkReviewLimitCommand));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertFalse(checkReviewLimitCommand.equals(10));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertFalse(checkReviewLimitCommand.equals(null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foongsq"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "foongsq": 49
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.testutil.TypicalFlashcards.getTypicalFlashNotes;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.FlashNotes;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void execute_emptyFlashNotes_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void execute_nonEmptyFlashNotes_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalFlashNotes(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalFlashNotes(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        expectedModel.setFlashNotes(new FlashNotes());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 32
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, false, false, 0)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false, false, false, 0)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true, false, false, 0)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "                false, false, false, 0).hashCode());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "                true, false, false, 0).hashCode());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 1,
      "-": 48,
      "Sruthisarav": 7
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.logic.parser.CliSyntax.PREFIX_DECK_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.FlashNotes;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.QuestionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.testutil.EditFlashcardDescriptorBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public static final String VALID_QUESTION_SKY \u003d \"Why is the sky blue?\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public static final String VALID_QUESTION_MACROECONS \u003d \"What is macroeconomics?\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public static final String VALID_ANSWER_SKY \u003d \"Because it\u0027s blue\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public static final String VALID_ANSWER_MACROECONS \u003d \"I don\u0027t know\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public static final String VALID_TAG_NATURE \u003d \"Nature\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public static final String VALID_TAG_ECONOMICS \u003d \"Economics\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public static final String VALID_TAG_DEFAULT \u003d \"Default\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public static final String QUESTION_DESC_SKY \u003d \" \" + PREFIX_QUESTION + VALID_QUESTION_SKY;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public static final String QUESTION_DESC_MACROECONS \u003d \" \" + PREFIX_QUESTION + VALID_QUESTION_MACROECONS;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public static final String ANSWER_DESC_SKY \u003d \" \" + PREFIX_ANSWER + VALID_ANSWER_SKY;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public static final String ANSWER_DESC_MACROECONS \u003d \" \" + PREFIX_ANSWER + VALID_ANSWER_MACROECONS;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public static final String TAG_DESC_ECONOMICS \u003d \" \" + PREFIX_TAG + VALID_TAG_ECONOMICS;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public static final String TAG_DESC_NATURE \u003d \" \" + PREFIX_TAG + VALID_TAG_NATURE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public static final String DECK_DESC_ECONOMICS \u003d \" \" + PREFIX_DECK_NAME + VALID_TAG_ECONOMICS;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public static final String DECK_DESC_NATURE \u003d \" \" + PREFIX_DECK_NAME + VALID_TAG_NATURE;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public static final String TAG_DESC_DEFAULT \u003d \" \" + PREFIX_TAG + VALID_TAG_DEFAULT;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static final String INVALID_QUESTION_DESC \u003d \" \" + PREFIX_QUESTION + \"\"; // question cannot be blank"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static final String INVALID_ANSWER_DESC \u003d \" \" + PREFIX_ANSWER + \"\"; // answer cannot be blank"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"\"; // blank tag not allowed"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public static final EditCardCommand.EditFlashcardDescriptor DESC_SKY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public static final EditCardCommand.EditFlashcardDescriptor DESC_MACROECONS;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        DESC_SKY \u003d new EditFlashcardDescriptorBuilder().withQuestion(VALID_QUESTION_SKY)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                .withAnswer(VALID_ANSWER_SKY)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                .withTag(VALID_TAG_ECONOMICS).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        DESC_MACROECONS \u003d new EditFlashcardDescriptorBuilder().withQuestion(VALID_QUESTION_MACROECONS)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                .withAnswer(VALID_ANSWER_MACROECONS)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                .withTag(VALID_TAG_NATURE).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * - the flashnotes book, filtered flashcard list and selected flashcard in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        FlashNotes expectedFlashNotes \u003d new FlashNotes(actualModel.getFlashNotes());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        List\u003cFlashcard\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredFlashcardList());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertEquals(expectedFlashNotes, actualModel.getFlashNotes());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredFlashcardList());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the flashcard at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * {@code model}\u0027s flashnotes book."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public static void showFlashcardAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredFlashcardList().size());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        Flashcard flashcard \u003d model.getFilteredFlashcardList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        final String[] splitQuestion \u003d flashcard.getQuestion().question.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        model.updateFilteredFlashcardList(new QuestionContainsKeywordsPredicate(Arrays.asList(splitQuestion[0])));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertEquals(1, model.getFilteredFlashcardList().size());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 9,
      "pengxiangg": 21,
      "chuyouchia": 20,
      "foongsq": 2,
      "-": 61,
      "Sruthisarav": 9
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/logic/commands/CorrectCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "package seedu.flashnotes.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import static seedu.flashnotes.testutil.TypicalFlashcards.getTypicalFlashNotes;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import seedu.flashnotes.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import seedu.flashnotes.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import seedu.flashnotes.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import seedu.flashnotes.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "public class CorrectCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public void execute_correctCommandWhenFlashcardNotFlipped_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        model \u003d new ModelManager(getTypicalFlashNotes(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        // To get a new flashcard"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        model.updateFlashcardBeingReviewed(2);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(CorrectCommand.MESSAGE_CORRECT_ERROR,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                false, false, true, false, 0);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        CorrectCommand correctCommand \u003d new CorrectCommand();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertEquals(correctCommand.execute(model), expectedCommandResult);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        Flashcard flashcard \u003d model.getFlashcardBeingReviewed();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertEquals(2, flashcard.getIsCorrect());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public void execute_correctCommandWhenFlashcardFlipped_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        model \u003d new ModelManager(getTypicalFlashNotes(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        // To get a new flashcard"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        model.updateFlashcardBeingReviewed(2);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(CorrectCommand.MESSAGE_CORRECT_ACKNOWLEDGEMENT,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                false, false, true, false, 2);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        CorrectCommand correctCommand \u003d new CorrectCommand();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        Flashcard flashcard \u003d model.getFlashcardBeingReviewed();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        model.carryOutFlipCommand();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertEquals(correctCommand.execute(model), expectedCommandResult);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertEquals(2, flashcard.getIsCorrect());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foongsq": 2,
      "Sruthisarav": 49
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/logic/commands/DeleteCardCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.showFlashcardAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.testutil.TypicalFlashcards.getTypicalFlashNotes;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.testutil.TypicalIndexes.INDEX_SECOND_FLASHCARD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "public class DeleteCardCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFlashNotes(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        Flashcard flashcardToDelete \u003d model.getFilteredFlashcardList().get(INDEX_FIRST_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        DeleteCardCommand deleteCardCommand \u003d new DeleteCardCommand(INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCardCommand.MESSAGE_DELETE_FLASHCARD_SUCCESS, flashcardToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getFlashNotes(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        expectedModel.deleteFlashcard(flashcardToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertCommandSuccess(deleteCardCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredFlashcardList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        DeleteCardCommand deleteCardCommand \u003d new DeleteCardCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertCommandFailure(deleteCardCommand, model, Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        showFlashcardAtIndex(model, INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        Flashcard flashcardToDelete \u003d model.getFilteredFlashcardList().get(INDEX_FIRST_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        DeleteCardCommand deleteCardCommand \u003d new DeleteCardCommand(INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCardCommand.MESSAGE_DELETE_FLASHCARD_SUCCESS, flashcardToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFlashNotes(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        expectedModel.deleteFlashcard(flashcardToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        showNoFlashcard(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertCommandSuccess(deleteCardCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        showFlashcardAtIndex(model, INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_FLASHCARD;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of flashnotes list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getFlashNotes().getFlashcardList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        DeleteCardCommand deleteCardCommand \u003d new DeleteCardCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertCommandFailure(deleteCardCommand, model, Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        DeleteCardCommand deleteFirstCommand \u003d new DeleteCardCommand(INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        DeleteCardCommand deleteSecondCommand \u003d new DeleteCardCommand(INDEX_SECOND_FLASHCARD);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        DeleteCardCommand deleteFirstCommandCopy \u003d new DeleteCardCommand(INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // different flashcard -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private void showNoFlashcard(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        model.updateFilteredFlashcardList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertTrue(model.getFilteredFlashcardList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 13,
      "chuyouchia": 18,
      "-": 64,
      "Sruthisarav": 14
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/logic/commands/DeleteDeckCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "package seedu.flashnotes.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.model.ReadOnlyFlashNotes;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.model.deck.Deck;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.model.deck.UniqueDeckList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "public class DeleteDeckCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public void execute_deckAcceptedByModel_deleteSuccessful() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        Deck deck \u003d new Deck(\"Singapore\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        ModelStubWithFlashcardAndDeck modelStub \u003d new ModelStubWithFlashcardAndDeck(deck);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertEquals(1, modelStub.decks.size());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        CommandResult commandResult \u003d new DeleteDeckCommand(Index.fromZeroBased(0)).execute(modelStub);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertEquals(String.format(DeleteDeckCommand.MESSAGE_DELETE_DECK_SUCCESS,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                deck.getDeckName()), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertEquals(0, modelStub.decks.size());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public void execute_deleteDeck_deckNotFound() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        Deck deck \u003d new Deck(\"Singapore\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        ModelStubWithFlashcardAndDeck modelStub \u003d new ModelStubWithFlashcardAndDeck(deck);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        DeleteDeckCommand command \u003d new DeleteDeckCommand(Index.fromZeroBased(1));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                Messages.MESSAGE_INVALID_DECK_DISPLAYED_INDEX, () -\u003e command.execute(modelStub));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public Path getFlashNotesFilePath() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public void setFlashNotesFilePath(Path flashNotesFilePath) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        public void setUpReviewList() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public void addFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public void setFlashNotes(ReadOnlyFlashNotes flashNotes) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public ReadOnlyFlashNotes getFlashNotes() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public ObservableList\u003cFlashcard\u003e getFlashcardsToReview() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        public void addFlashcardToReview() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        public ObservableList\u003cFlashcard\u003e getModifiedFlashcardsToReview() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        public void updateFlashcardBeingReviewed(int result) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        public void resetFlipOfFlashcardBeingReviewed() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        public boolean getIsFlashcardFlipped() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        public Flashcard getFlashcardBeingReviewed() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        public void carryOutFlipCommand() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        public void markFlashcardBeingReviewed(Flashcard flashcard, int result) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public boolean hasDeck(Deck deck) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public void deleteDeck(Deck target){"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public void addDeck(Deck deck) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public void setDeck(Deck target, Deck editedDeck) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public boolean getIsInDeck() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public void setIsInDeckTrue() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public void setIsInDeckFalse() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public void setCurrentDeckName(String deckName) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public String getCurrentDeckName() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public ObservableList\u003cDeck\u003e getFilteredDeckList() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public void updateFilteredDeckList(Predicate\u003cDeck\u003e predicate) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public boolean hasFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public void deleteFlashcard(Flashcard target) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public void setFlashcard(Flashcard target, Flashcard editedFlashcard) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public ObservableList\u003cFlashcard\u003e getFilteredFlashcardList() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public void updateFilteredFlashcardList(Predicate\u003cFlashcard\u003e predicate) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public boolean getIsReviewMode() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public void setIsReviewModeFalse() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public void setIsReviewModeTrue() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        public long getReviewCardLimit() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        public void setReviewCardLimit(long reviewCardLimit) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        public void updateDeckPerformanceScore(Double reviewScore, String deckName) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public UniqueDeckList getUniqueDeckList() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    private class ModelStubWithFlashcardAndDeck extends ModelStub {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        final ObservableList\u003cDeck\u003e decks \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        ModelStubWithFlashcardAndDeck(Deck deck) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            decks.add(deck);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public void deleteDeck(Deck deck) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            decks.remove(deck);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public ObservableList\u003cDeck\u003e getFilteredDeckList() {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            return decks;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public boolean hasDeck(Deck deck) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            return decks.contains(deck);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 1,
      "pengxiangg": 244,
      "foongsq": 3,
      "Sruthisarav": 38
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/logic/commands/EditCardCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.DESC_MACROECONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.DESC_SKY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.VALID_ANSWER_MACROECONS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.VALID_QUESTION_MACROECONS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.VALID_TAG_NATURE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.showFlashcardAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.testutil.TypicalFlashcards.getTypicalFlashNotes;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.testutil.TypicalIndexes.INDEX_SECOND_FLASHCARD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.model.FlashNotes;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.model.deck.Deck;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.model.tag.TagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.testutil.EditFlashcardDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "public class EditCardCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFlashNotes(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        Flashcard editedFlashcard \u003d new FlashcardBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        EditCardCommand.EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder(editedFlashcard)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        EditCardCommand editCommand \u003d new EditCardCommand(INDEX_FIRST_FLASHCARD, descriptor);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        String expectedMessage \u003d String.format(EditCardCommand.MESSAGE_EDIT_FLASHCARD_SUCCESS, editedFlashcard);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FlashNotes(model.getFlashNotes()), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        model.setIsInDeckTrue();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        model.setCurrentDeckName(FlashcardBuilder.DEFAULT_TAG);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        expectedModel.setCurrentDeckName(FlashcardBuilder.DEFAULT_TAG);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        expectedModel.setIsInDeckTrue();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        expectedModel.setFlashcard(model.getFilteredFlashcardList().get(0), editedFlashcard);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        expectedModel.addDeck(new Deck(FlashcardBuilder.DEFAULT_TAG));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        expectedModel.updateFilteredFlashcardList(new TagContainsKeywordsPredicate(FlashcardBuilder.DEFAULT_TAG));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        Index indexLastFlashcard \u003d Index.fromOneBased(model.getFilteredFlashcardList().size());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        Flashcard lastFlashcard \u003d model.getFilteredFlashcardList().get(indexLastFlashcard.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        FlashcardBuilder flashcardInList \u003d new FlashcardBuilder(lastFlashcard);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        Flashcard editedFlashcard \u003d flashcardInList.withQuestion(VALID_QUESTION_MACROECONS)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                .withAnswer(VALID_ANSWER_MACROECONS)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                .withTag(VALID_TAG_NATURE).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        EditCardCommand.EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                .withQuestion(VALID_QUESTION_MACROECONS)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                .withAnswer(VALID_ANSWER_MACROECONS).withTag(VALID_TAG_NATURE).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        EditCardCommand editCommand \u003d new EditCardCommand(indexLastFlashcard, descriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        String expectedMessage \u003d String.format(EditCardCommand.MESSAGE_EDIT_FLASHCARD_SUCCESS, editedFlashcard);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FlashNotes(model.getFlashNotes()), new UserPrefs());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        expectedModel.setFlashcard(lastFlashcard, editedFlashcard);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        model.setIsInDeckTrue();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        model.setCurrentDeckName(VALID_TAG_NATURE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        expectedModel.setCurrentDeckName(VALID_TAG_NATURE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        expectedModel.setIsInDeckTrue();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        expectedModel.addDeck(new Deck(VALID_TAG_NATURE));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        expectedModel.updateFilteredFlashcardList(new TagContainsKeywordsPredicate(VALID_TAG_NATURE));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void execute_invalidFlashcardIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredFlashcardList().size() + 1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        EditCardCommand.EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                .withQuestion(VALID_QUESTION_MACROECONS).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        EditCardCommand editCardCommand \u003d new EditCardCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertCommandFailure(editCardCommand, model, Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * but smaller than size of flashnotes"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void execute_invalidFlashcardIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        showFlashcardAtIndex(model, INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_FLASHCARD;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of flashnotes list"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getFlashNotes().getFlashcardList().size());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        EditCardCommand editCardCommand \u003d new EditCardCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                new EditFlashcardDescriptorBuilder().withQuestion(VALID_QUESTION_MACROECONS).build());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertCommandFailure(editCardCommand, model, Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        final EditCardCommand standardCommand \u003d new EditCardCommand(INDEX_FIRST_FLASHCARD, DESC_SKY);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        EditCardCommand.EditFlashcardDescriptor copyDescriptor \u003d new EditCardCommand.EditFlashcardDescriptor(DESC_SKY);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        EditCardCommand commandWithSameValues \u003d new EditCardCommand(INDEX_FIRST_FLASHCARD, copyDescriptor);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCardCommand(INDEX_SECOND_FLASHCARD, DESC_SKY)));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCardCommand(INDEX_FIRST_FLASHCARD, DESC_MACROECONS)));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 11,
      "pengxiangg": 41,
      "chuyouchia": 18,
      "-": 57,
      "Sruthisarav": 15
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/logic/commands/EditDeckNameCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "package seedu.flashnotes.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.model.ReadOnlyFlashNotes;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.model.deck.Deck;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.model.deck.UniqueDeckList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.model.flashcard.Answer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.model.flashcard.Question;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "public class EditDeckNameCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    private static final String NAME \u003d \"Singapore\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    private static final String NEW_NAME \u003d \"Malaysia\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    private static final String QUESTION \u003d \"Testq\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    private static final String ANSWER \u003d \"Testa\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public void constructor_nullFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new EditDeckNameCommand(null, null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public void execute_editDeck_editSuccessful() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        Deck deck \u003d new Deck(NAME);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        Flashcard flashcard \u003d new Flashcard(new Question(QUESTION),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                new Answer(ANSWER), new Tag(NAME));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        Deck expectedDeck \u003d new Deck(NEW_NAME);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        Flashcard expectedFlashcard \u003d new Flashcard(new Question(QUESTION),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                new Answer(ANSWER), new Tag(NEW_NAME));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        ModelStubWithFlashcardAndDeck modelStub \u003d new ModelStubWithFlashcardAndDeck(deck, flashcard);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        ModelStubWithFlashcardAndDeck expectedModelStub \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                new ModelStubWithFlashcardAndDeck(expectedDeck, expectedFlashcard);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        CommandResult commandResult \u003d new EditDeckNameCommand(Index.fromZeroBased(0), new Deck(NEW_NAME))"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                .execute(modelStub);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertEquals(String.format(EditDeckNameCommand.MESSAGE_SUCCESS, NEW_NAME), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertEquals(expectedModelStub.flashcards, modelStub.newFlashcards);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertEquals(expectedModelStub.decks, modelStub.decks);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public Path getFlashNotesFilePath() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public void setFlashNotesFilePath(Path flashNotesFilePath) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        public void setUpReviewList() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public void addFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public void setFlashNotes(ReadOnlyFlashNotes flashNotes) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public ReadOnlyFlashNotes getFlashNotes() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public ObservableList\u003cFlashcard\u003e getFlashcardsToReview() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        public void addFlashcardToReview() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        public ObservableList\u003cFlashcard\u003e getModifiedFlashcardsToReview() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        public void updateFlashcardBeingReviewed(int result) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        public void resetFlipOfFlashcardBeingReviewed() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        public boolean getIsFlashcardFlipped() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        public Flashcard getFlashcardBeingReviewed() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        public void carryOutFlipCommand() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        public void markFlashcardBeingReviewed(Flashcard flashcard, int result) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public boolean hasDeck(Deck deck) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public void deleteDeck(Deck target) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public void addDeck(Deck deck) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public void setDeck(Deck target, Deck editedDeck) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public boolean getIsInDeck() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public void setIsInDeckTrue() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public void setIsInDeckFalse() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public void setCurrentDeckName(String deckName) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public String getCurrentDeckName() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public ObservableList\u003cDeck\u003e getFilteredDeckList() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public void updateFilteredDeckList(Predicate\u003cDeck\u003e predicate) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public boolean hasFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public void deleteFlashcard(Flashcard target) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public void setFlashcard(Flashcard target, Flashcard editedFlashcard) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public ObservableList\u003cFlashcard\u003e getFilteredFlashcardList() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public void updateFilteredFlashcardList(Predicate\u003cFlashcard\u003e predicate) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public boolean getIsReviewMode() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public void setIsReviewModeFalse() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public void setIsReviewModeTrue() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        public long getReviewCardLimit() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        public void setReviewCardLimit(long reviewCardLimit) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        public void updateDeckPerformanceScore(Double reviewScore, String deckName) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public UniqueDeckList getUniqueDeckList() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    private class ModelStubWithFlashcardAndDeck extends ModelStub {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        final ObservableList\u003cDeck\u003e decks \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        final ObservableList\u003cFlashcard\u003e flashcards \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        final ObservableList\u003cFlashcard\u003e newFlashcards \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        ModelStubWithFlashcardAndDeck(Deck deck, Flashcard flashcard) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            decks.add(deck);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            flashcards.add(flashcard);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public ObservableList\u003cDeck\u003e getFilteredDeckList() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            return decks;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public boolean hasDeck(Deck deck) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            return decks.contains(deck);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public void setDeck(Deck original, Deck newDeck) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            int index \u003d decks.indexOf(original);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            decks.set(index, newDeck);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public void updateFilteredFlashcardList(Predicate\u003cFlashcard\u003e predicate) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public ObservableList\u003cFlashcard\u003e getFilteredFlashcardList() {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            return flashcards;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        public void setFlashcard(Flashcard original, Flashcard newCard) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            newFlashcards.add(newCard);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            flashcards.remove(original);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 1,
      "pengxiangg": 265,
      "foongsq": 3,
      "Sruthisarav": 43
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/logic/commands/EditFlashcardDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.DESC_MACROECONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.DESC_SKY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.VALID_ANSWER_MACROECONS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.VALID_QUESTION_MACROECONS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.VALID_TAG_NATURE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import seedu.flashnotes.logic.commands.EditCardCommand.EditFlashcardDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.testutil.EditFlashcardDescriptorBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rachel170"
        },
        "content": "public class EditFlashcardDescriptorTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        EditFlashcardDescriptor descriptorWithSameValues \u003d new EditFlashcardDescriptor(DESC_SKY);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertTrue(DESC_SKY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertTrue(DESC_SKY.equals(DESC_SKY));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertFalse(DESC_SKY.equals(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertFalse(DESC_SKY.equals(5));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertFalse(DESC_SKY.equals(DESC_MACROECONS));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        // different question -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        EditFlashcardDescriptor editedAmy \u003d new EditFlashcardDescriptorBuilder(DESC_SKY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                .withQuestion(VALID_QUESTION_MACROECONS).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertFalse(DESC_SKY.equals(editedAmy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        // different answer -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        editedAmy \u003d new EditFlashcardDescriptorBuilder(DESC_SKY).withAnswer(VALID_ANSWER_MACROECONS).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertFalse(DESC_SKY.equals(editedAmy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        editedAmy \u003d new EditFlashcardDescriptorBuilder(DESC_SKY).withTag(VALID_TAG_NATURE).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertFalse(DESC_SKY.equals(editedAmy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 1,
      "pengxiangg": 18,
      "chuyouchia": 2,
      "foongsq": 1,
      "-": 21,
      "Sruthisarav": 6
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/logic/commands/EndReviewCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rachel170"
        },
        "content": "package seedu.flashnotes.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import static seedu.flashnotes.logic.commands.EndReviewCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import seedu.flashnotes.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import seedu.flashnotes.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rachel170"
        },
        "content": "public class EndReviewCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void execute_endReview_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                false, true, false, false, 0);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertCommandSuccess(new EndReviewCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rachel170"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 21
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/logic/commands/EnterDeckCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "package seedu.flashnotes.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.MESSAGE_FLASHCARDS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.testutil.TypicalFlashcards.HOW;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.testutil.TypicalFlashcards.WHO;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.testutil.TypicalFlashcards.WHY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.testutil.TypicalFlashcards.getTypicalFlashNotes;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.model.tag.TagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "public class EnterDeckCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFlashNotes(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalFlashNotes(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public void constructor_nullFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new EnterDeckCommand(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        TagContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                new TagContainsKeywordsPredicate(\"first\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        TagContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                new TagContainsKeywordsPredicate(\"second\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        EnterDeckCommand listTagsFirstCommand \u003d new EnterDeckCommand(firstPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        EnterDeckCommand listTagsSecondCommand \u003d new EnterDeckCommand(secondPredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertTrue(listTagsFirstCommand.equals(listTagsFirstCommand));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        EnterDeckCommand listTagsFirstCommandCopy \u003d new EnterDeckCommand(firstPredicate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertTrue(listTagsFirstCommand.equals(listTagsFirstCommandCopy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertFalse(listTagsFirstCommand.equals(1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertFalse(listTagsFirstCommand.equals(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        // different flashcard -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertFalse(listTagsFirstCommand.equals(listTagsSecondCommand));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public void execute_zeroKeywords_noFlashcardFound() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        TagContainsKeywordsPredicate predicate \u003d preparePredicate(\"\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        EnterDeckCommand command \u003d new EnterDeckCommand(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        expectedModel.updateFilteredFlashcardList(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                EnterDeckCommand.MESSAGE_DECK_NOT_FOUND, () -\u003e command.execute(expectedModel));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public void execute_incorrectKeywords_noFlashcardFound() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        TagContainsKeywordsPredicate predicate \u003d preparePredicate(\"error\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        EnterDeckCommand command \u003d new EnterDeckCommand(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        expectedModel.updateFilteredFlashcardList(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                EnterDeckCommand.MESSAGE_DECK_NOT_FOUND, () -\u003e command.execute(expectedModel));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public void execute_multipleKeywords_noFlashcardFound() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        TagContainsKeywordsPredicate predicate \u003d preparePredicate(\"friends Time\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        EnterDeckCommand command \u003d new EnterDeckCommand(predicate);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        expectedModel.updateFilteredFlashcardList(predicate);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                EnterDeckCommand.MESSAGE_DECK_NOT_FOUND, () -\u003e command.execute(expectedModel));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public void execute_singleKeyword_multipleFlashcardsFound() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_FLASHCARDS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        TagContainsKeywordsPredicate predicate \u003d preparePredicate(\"friends\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        EnterDeckCommand command \u003d new EnterDeckCommand(predicate);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        expectedModel.updateFilteredFlashcardList(predicate);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertEquals(Arrays.asList(WHO, WHY, HOW), model.getFilteredFlashcardList());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    private TagContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        return new TagContainsKeywordsPredicate(userInput);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pengxiangg": 100
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "                true, false, false, 0);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 5,
      "-": 14,
      "Sruthisarav": 2
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.testutil.TypicalFlashcards.HOW;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.testutil.TypicalFlashcards.WHO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.testutil.TypicalFlashcards.WHY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.testutil.TypicalFlashcards.getTypicalFlashNotes;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.QuestionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.model.tag.TagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFlashNotes(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalFlashNotes(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        QuestionContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                new QuestionContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        QuestionContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                new QuestionContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // different flashcard -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public void execute_multipleKeywords_multipleFlashcardsFound() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        String expectedMessage \u003d String.format(\"%1$d flashcard(s) found\", 3);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        QuestionContainsKeywordsPredicate predicate \u003d preparePredicate(\"who why how\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        model.setIsInDeckTrue();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        model.setCurrentDeckName(\"friends\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        expectedModel.updateFilteredFlashcardList(predicate.and(new TagContainsKeywordsPredicate(\"friends\")));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        expectedModel.setIsInDeckTrue();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        expectedModel.setCurrentDeckName(\"friends\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertEquals(Arrays.asList(WHO, WHY, HOW), model.getFilteredFlashcardList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Parses {@code userInput} into a {@code QuestionContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private QuestionContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return new QuestionContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 2,
      "pengxiangg": 18,
      "chuyouchia": 8,
      "foongsq": 6,
      "-": 43,
      "Sruthisarav": 1
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/logic/commands/FlipCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "package seedu.flashnotes.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import static seedu.flashnotes.testutil.TypicalFlashcards.getTypicalFlashNotes;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import seedu.flashnotes.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import seedu.flashnotes.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import seedu.flashnotes.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import seedu.flashnotes.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "public class FlipCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public void execute_flipCommandResult_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        model \u003d new ModelManager(getTypicalFlashNotes(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(FlipCommand.MESSAGE_FLIP_ACKNOWLEDGEMENT,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                false, false, true, true, 0);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        Flashcard flashcard \u003d model.getFlashcardBeingReviewed();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        FlipCommand flipCommand \u003d new FlipCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertEquals(expectedCommandResult, flipCommand.execute(model));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertEquals(true, flashcard.getIsFlipped());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public void execute_doubleFlipCommandResult_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        model \u003d new ModelManager(getTypicalFlashNotes(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(FlipCommand.MESSAGE_FLIP_ACKNOWLEDGEMENT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                false, false, true, true, 0);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        Flashcard flashcard \u003d model.getFlashcardBeingReviewed();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        FlipCommand flipCommand \u003d new FlipCommand();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        CommandResult firstResult \u003d flipCommand.execute(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertEquals(expectedCommandResult, firstResult);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertEquals(true, flashcard.getIsFlipped());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertEquals(expectedCommandResult, flipCommand.execute(model));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertEquals(false, flashcard.getIsFlipped());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foongsq": 2,
      "Sruthisarav": 48
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false, false, false, 0);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 5,
      "-": 14,
      "Sruthisarav": 1
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/logic/commands/HomeCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.MESSAGE_DECK_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.testutil.TypicalFlashcards.getTypicalFlashNotes;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class HomeCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        model \u003d new ModelManager(getTypicalFlashNotes(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getFlashNotes(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void execute_homeCommand_showsAllDecks() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertCommandSuccess(new HomeCommand(), model, MESSAGE_DECK_OVERVIEW, expectedModel);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        HomeCommand homeCommand \u003d new HomeCommand();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertTrue(homeCommand.equals(homeCommand));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertFalse(homeCommand.equals(1));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertFalse(homeCommand.equals(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 42
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/logic/commands/ListAllCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.showFlashcardAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.testutil.TypicalFlashcards.getTypicalFlashNotes;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "public class ListAllCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        model \u003d new ModelManager(getTypicalFlashNotes(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getFlashNotes(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertCommandSuccess(new ListAllCommand(), model, String.format(ListAllCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                model.getFilteredFlashcardList().size()), expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        showFlashcardAtIndex(model, INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertCommandSuccess(new ListAllCommand(), model, String.format(ListAllCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                7), expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 1,
      "pengxiangg": 5,
      "chuyouchia": 10,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/logic/commands/ReviewCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": "package seedu.flashnotes.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.MESSAGE_NO_CARDS_TO_REVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import static seedu.flashnotes.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import static seedu.flashnotes.testutil.TypicalFlashcards.getTypicalFlashNotes;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import seedu.flashnotes.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import seedu.flashnotes.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import seedu.flashnotes.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import seedu.flashnotes.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foongsq"
        },
        "content": "public class ReviewCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void execute_review_success() throws Exception {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        model \u003d new ModelManager(getTypicalFlashNotes(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getFlashNotes(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(ReviewCommand.SHOWING_REVIEW_MESSAGE,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                false, false, true, false, 0);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        expectedModel.setIsReviewModeTrue();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        expectedModel.setUpReviewList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        ReviewCommand reviewCommand \u003d new ReviewCommand();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertEquals(reviewCommand.execute(model), expectedCommandResult);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertEquals(model.getFlashcardsToReview().size(), expectedModel.getFlashcardsToReview().size());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void execute_reviewEmptyDeck_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        model \u003d new ModelManager();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        ReviewCommand reviewCommand \u003d new ReviewCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertThrows(CommandException.class, MESSAGE_NO_CARDS_TO_REVIEW, () -\u003e reviewCommand.execute(model));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foongsq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foongsq": 38
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/logic/commands/SetReviewLimitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": "package seedu.flashnotes.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import static seedu.flashnotes.testutil.TypicalFlashcards.getTypicalFlashNotes;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import seedu.flashnotes.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import seedu.flashnotes.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import seedu.flashnotes.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import seedu.flashnotes.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foongsq"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foongsq"
        },
        "content": " * {@code SetReviewLimitCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foongsq"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foongsq"
        },
        "content": "public class SetReviewLimitCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFlashNotes(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void execute_validLimit_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        long validLimit \u003d 20;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        SetReviewLimitCommand setReviewLimitCommand \u003d new SetReviewLimitCommand(validLimit);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        String expectedMessage \u003d String.format(SetReviewLimitCommand.MESSAGE_SUCCESS, validLimit);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getFlashNotes(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        expectedModel.setReviewCardLimit(validLimit);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertCommandSuccess(setReviewLimitCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void execute_invalidLimit_throwsCommandException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        long invalidLimit \u003d 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        SetReviewLimitCommand setReviewLimitCommand \u003d new SetReviewLimitCommand(invalidLimit);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertCommandFailure(setReviewLimitCommand, model, Messages.MESSAGE_INVALID_LIMIT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        SetReviewLimitCommand setReviewLimitCommand10 \u003d new SetReviewLimitCommand(10);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        SetReviewLimitCommand setReviewLimitCommand30 \u003d new SetReviewLimitCommand(30);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertTrue(setReviewLimitCommand10.equals(setReviewLimitCommand10));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        SetReviewLimitCommand setReviewLimitCommand10Copy \u003d new SetReviewLimitCommand(10);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertTrue(setReviewLimitCommand10.equals(setReviewLimitCommand10Copy));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertFalse(setReviewLimitCommand10.equals(10));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertFalse(setReviewLimitCommand10.equals(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        // different limit -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertFalse(setReviewLimitCommand10.equals(setReviewLimitCommand30));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foongsq"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "foongsq": 67
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/logic/commands/WrongCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "package seedu.flashnotes.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import static seedu.flashnotes.testutil.TypicalFlashcards.getTypicalFlashNotes;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import seedu.flashnotes.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import seedu.flashnotes.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import seedu.flashnotes.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import seedu.flashnotes.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "public class WrongCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public void execute_wrongCommandWhenFlashcardNotFlipped_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        model \u003d new ModelManager(getTypicalFlashNotes(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        // To get a new flashcard"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        model.updateFlashcardBeingReviewed(2);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(WrongCommand.MESSAGE_WRONG_ERROR,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                false, false, true, false, 0);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        WrongCommand wrongCommand \u003d new WrongCommand();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertEquals(wrongCommand.execute(model), expectedCommandResult);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        Flashcard flashcard \u003d model.getFlashcardBeingReviewed();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertEquals(1, flashcard.getIsCorrect());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public void execute_wrongCommandWhenFlashcardFlipped_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        model \u003d new ModelManager(getTypicalFlashNotes(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        // To get a new flashcard"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        model.updateFlashcardBeingReviewed(2);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(WrongCommand.MESSAGE_WRONG_ACKNOWLEDGEMENT,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                false, false, true, false, 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        WrongCommand wrongCommand \u003d new WrongCommand();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        Flashcard flashcard \u003d model.getFlashcardBeingReviewed();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        model.carryOutFlipCommand();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertEquals(wrongCommand.execute(model), expectedCommandResult);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertEquals(1, flashcard.getIsCorrect());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foongsq": 2,
      "Sruthisarav": 50
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/logic/parser/AddCardCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.ANSWER_DESC_MACROECONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.ANSWER_DESC_SKY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.INVALID_ANSWER_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.INVALID_QUESTION_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.QUESTION_DESC_MACROECONS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.QUESTION_DESC_SKY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.VALID_ANSWER_MACROECONS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.VALID_QUESTION_MACROECONS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.testutil.TypicalFlashcards.MACROECONS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import seedu.flashnotes.logic.commands.AddCardCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.Answer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.Question;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "public class AddCardCommandParserTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    private AddCardCommandParser parser \u003d new AddCardCommandParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        Flashcard expectedFlashcard \u003d new FlashcardBuilder(MACROECONS).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + QUESTION_DESC_MACROECONS + ANSWER_DESC_MACROECONS,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "                new AddCardCommand(expectedFlashcard));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        String test;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        // multiple questions - last question accepted"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertParseSuccess(parser, QUESTION_DESC_SKY + QUESTION_DESC_MACROECONS + ANSWER_DESC_MACROECONS,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "                new AddCardCommand(expectedFlashcard));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        // multiple answers - last answer accepted"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertParseSuccess(parser, QUESTION_DESC_MACROECONS + ANSWER_DESC_SKY + ANSWER_DESC_MACROECONS,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "                new AddCardCommand(expectedFlashcard));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCardCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        // missing question prefix"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertParseFailure(parser, VALID_QUESTION_MACROECONS + ANSWER_DESC_MACROECONS,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        // missing answer prefix"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertParseFailure(parser, QUESTION_DESC_MACROECONS + VALID_ANSWER_MACROECONS,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertParseFailure(parser, VALID_QUESTION_MACROECONS + VALID_ANSWER_MACROECONS,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        // invalid question"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertParseFailure(parser, INVALID_QUESTION_DESC + ANSWER_DESC_MACROECONS,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                String.format(Question.MESSAGE_CONSTRAINTS, 0));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        // invalid answer"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertParseFailure(parser, QUESTION_DESC_MACROECONS + INVALID_ANSWER_DESC,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                String.format(Answer.MESSAGE_CONSTRAINTS, 0));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + QUESTION_DESC_MACROECONS + ANSWER_DESC_MACROECONS,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCardCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pengxiangg": 19,
      "chuyouchia": 12,
      "foongsq": 5,
      "-": 31,
      "Sruthisarav": 13
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/logic/parser/AddDeckCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.DECK_DESC_ECONOMICS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.DECK_DESC_NATURE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.logic.commands.AddDeckCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.deck.Deck;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class AddDeckCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private AddDeckCommandParser parser \u003d new AddDeckCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Deck expectedDeck \u003d new Deck(\"Economics\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertParseSuccess(parser, DECK_DESC_ECONOMICS,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                new AddDeckCommand(expectedDeck));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        //multiple deck names - last name accepted"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertParseSuccess(parser, DECK_DESC_NATURE + DECK_DESC_ECONOMICS,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                new AddDeckCommand(expectedDeck));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddDeckCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        // missing argument for deck name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertParseFailure(parser, \"n/\", expectedMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertParseFailure(parser, \"deckName\", expectedMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 42
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: testing for prefixes not specified as a prefix */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/logic/parser/DeleteCardCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import seedu.flashnotes.logic.commands.DeleteCardCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "public class DeleteCardCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    private DeleteCardCommandParser parser \u003d new DeleteCardCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCardCommand(INDEX_FIRST_FLASHCARD));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT + \"\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                        + MESSAGE_INVALID_INDEX,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "                DeleteCardCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pengxiangg": 3,
      "chuyouchia": 5,
      "-": 22,
      "Sruthisarav": 5
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/logic/parser/EditCardCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.ANSWER_DESC_MACROECONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.ANSWER_DESC_SKY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.INVALID_ANSWER_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.INVALID_QUESTION_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.QUESTION_DESC_SKY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.TAG_DESC_ECONOMICS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.TAG_DESC_NATURE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.VALID_ANSWER_MACROECONS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.VALID_ANSWER_SKY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.VALID_QUESTION_SKY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.VALID_TAG_ECONOMICS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.VALID_TAG_NATURE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.testutil.TypicalIndexes.INDEX_SECOND_FLASHCARD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.testutil.TypicalIndexes.INDEX_THIRD_FLASHCARD;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.core.index.Index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import seedu.flashnotes.logic.commands.EditCardCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import seedu.flashnotes.logic.commands.EditCardCommand.EditFlashcardDescriptor;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.Answer;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.Question;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.tag.Tag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.testutil.EditFlashcardDescriptorBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "public class EditCardCommandParserTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCardCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    private EditCardCommandParser parser \u003d new EditCardCommandParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertParseFailure(parser, VALID_QUESTION_SKY, MESSAGE_INVALID_FORMAT + \"\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                + MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCardCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT + \"\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                + MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertParseFailure(parser, \"-5\" + QUESTION_DESC_SKY, MESSAGE_INVALID_FORMAT + \"\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                + MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertParseFailure(parser, \"0\" + QUESTION_DESC_SKY, MESSAGE_INVALID_FORMAT + \"\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                + MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT + \"\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                + MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT + \"\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                + MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_QUESTION_DESC,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                String.format(Question.MESSAGE_CONSTRAINTS, 0)); // invalid question"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ANSWER_DESC,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                String.format(Answer.MESSAGE_CONSTRAINTS, 0)); // invalid answer"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        /// valid answer followed by invalid answer. The test case for invalid answer followed by valid answer"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertParseFailure(parser, \"1\" + ANSWER_DESC_MACROECONS + INVALID_ANSWER_DESC,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                String.format(Answer.MESSAGE_CONSTRAINTS, 0));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Flashcard} being edited,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_ECONOMICS + TAG_DESC_NATURE + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        //assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        //assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_FLASHCARD;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + ANSWER_DESC_MACROECONS + TAG_DESC_NATURE"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                + QUESTION_DESC_SKY;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder().withQuestion(VALID_QUESTION_SKY)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                .withAnswer(VALID_ANSWER_MACROECONS).withTag(VALID_TAG_NATURE).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        EditCardCommand expectedCommand \u003d new EditCardCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + ANSWER_DESC_MACROECONS;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        EditCardCommand.EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                .withAnswer(VALID_ANSWER_MACROECONS).build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        EditCardCommand expectedCommand \u003d new EditCardCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        // question"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_FLASHCARD;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + QUESTION_DESC_SKY;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder()"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                .withQuestion(VALID_QUESTION_SKY).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        EditCardCommand expectedCommand \u003d new EditCardCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        // answer"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ANSWER_DESC_SKY;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        descriptor \u003d new EditFlashcardDescriptorBuilder().withAnswer(VALID_ANSWER_SKY).build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        expectedCommand \u003d new EditCardCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        // tag"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_ECONOMICS;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        descriptor \u003d new EditFlashcardDescriptorBuilder().withTag(VALID_TAG_ECONOMICS).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        expectedCommand \u003d new EditCardCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + ANSWER_DESC_SKY"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                + TAG_DESC_ECONOMICS + ANSWER_DESC_SKY + TAG_DESC_ECONOMICS"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                + ANSWER_DESC_MACROECONS + TAG_DESC_NATURE;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        EditCardCommand.EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder()"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                .withAnswer(VALID_ANSWER_MACROECONS)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                .withTag(VALID_TAG_NATURE).build();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        EditCardCommand expectedCommand \u003d new EditCardCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_ANSWER_DESC + ANSWER_DESC_MACROECONS;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder()"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                .withAnswer(VALID_ANSWER_MACROECONS).build();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        EditCardCommand expectedCommand \u003d new EditCardCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + INVALID_ANSWER_DESC"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                + ANSWER_DESC_MACROECONS;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        descriptor \u003d new EditFlashcardDescriptorBuilder().withAnswer(VALID_ANSWER_MACROECONS).build();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        expectedCommand \u003d new EditCardCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 8,
      "pengxiangg": 50,
      "chuyouchia": 16,
      "foongsq": 7,
      "Sruthisarav": 20,
      "-": 75
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/logic/parser/EnterDeckCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "package seedu.flashnotes.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.logic.commands.EnterDeckCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.model.tag.TagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "public class EnterDeckCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    private EnterDeckCommandParser parser \u003d new EnterDeckCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                EnterDeckCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public void parse_validArgs_returnsListTagsCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        EnterDeckCommand expectedListTagCommand \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                new EnterDeckCommand(new TagContainsKeywordsPredicate(\"friends\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertParseSuccess(parser, \"friends\", expectedListTagCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertParseSuccess(parser, \" \\n friends \\n\", expectedListTagCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pengxiangg": 32
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.QuestionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                new FindCommand(new QuestionContainsKeywordsPredicate(Arrays.asList(\"Why\", \"How\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertParseSuccess(parser, \"Why How\", expectedFindCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertParseSuccess(parser, \" \\n Why \\n \\t How  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 5,
      "chuyouchia": 6,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/logic/parser/FlashNotesParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_ADDCARD_COMMAND_IN_HOME_MESSAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_ADDCARD_COMMAND_IN_REVIEW_MESSAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_ADDDECK_COMMAND_IN_DECK_MESSAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_ADDDECK_COMMAND_IN_REVIEW_MESSAGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_CLEAR_COMMAND_IN_DECK_MESSAGE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_CLEAR_COMMAND_IN_REVIEW_MESSAGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_CORRECT_COMMAND_IN_DECK_MESSAGE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_CORRECT_COMMAND_IN_HOME_MESSAGE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_DELETECARD_COMMAND_IN_HOME_MESSAGE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_DELETECARD_COMMAND_IN_REVIEW_MESSAGE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_DELETEDECK_COMMAND_IN_DECK_MESSAGE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_DELETEDECK_COMMAND_IN_REVIEW_MESSAGE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_EDITCARD_COMMAND_IN_HOME_MESSAGE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_EDITCARD_COMMAND_IN_REVIEW_MESSAGE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_EDITDECKNAME_COMMAND_IN_DECK_MESSAGE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_EDITDECKNAME_COMMAND_IN_REVIEW_MESSAGE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_ENDREVIEW_COMMAND_IN_DECK_MESSAGE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_ENDREVIEW_COMMAND_IN_HOME_MESSAGE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_ENTERDECK_COMMAND_IN_DECK_MESSAGE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_ENTERDECK_COMMAND_IN_REVIEW_MESSAGE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_EXIT_COMMAND_IN_REVIEW_MESSAGE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_FIND_COMMAND_IN_REVIEW_MESSAGE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_FLIP_COMMAND_IN_DECK_MESSAGE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_FLIP_COMMAND_IN_HOME_MESSAGE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_HOME_COMMAND_IN_HOME_MESSAGE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_HOME_COMMAND_IN_REVIEW_MESSAGE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_LISTALL_COMMAND_IN_DECK_MESSAGE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_LISTALL_COMMAND_IN_REVIEW_MESSAGE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_REVIEW_COMMAND_IN_HOME_MESSAGE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_SETREVIEWLIMIT_COMMAND_IN_REVIEW_MESSAGE;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_WRONG_COMMAND_IN_DECK_MESSAGE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.INVALID_WRONG_COMMAND_IN_HOME_MESSAGE;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.MESSAGE_ALREADY_IN_REVIEW_MODE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.MESSAGE_EXTENDED_COMMAND_ERROR;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.testutil.FlashcardBuilder.DEFAULT_TAG;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.commons.core.index.Index;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import seedu.flashnotes.logic.commands.AddCardCommand;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import seedu.flashnotes.logic.commands.AddDeckCommand;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import seedu.flashnotes.logic.commands.CheckReviewLimitCommand;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import seedu.flashnotes.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import seedu.flashnotes.logic.commands.CorrectCommand;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import seedu.flashnotes.logic.commands.DeleteCardCommand;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import seedu.flashnotes.logic.commands.DeleteDeckCommand;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import seedu.flashnotes.logic.commands.EditCardCommand;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import seedu.flashnotes.logic.commands.EditDeckNameCommand;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import seedu.flashnotes.logic.commands.EndReviewCommand;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.logic.commands.EnterDeckCommand;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import seedu.flashnotes.logic.commands.FlipCommand;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import seedu.flashnotes.logic.commands.HomeCommand;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.logic.commands.ListAllCommand;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import seedu.flashnotes.logic.commands.ReviewCommand;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import seedu.flashnotes.logic.commands.SetReviewLimitCommand;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import seedu.flashnotes.logic.commands.WrongCommand;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import seedu.flashnotes.model.deck.Deck;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.QuestionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.model.tag.TagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.testutil.EditFlashcardDescriptorBuilder;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.testutil.FlashcardUtil;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foongsq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foongsq"
        },
        "content": " * All testcases in this test class are testing the parseCommand method"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foongsq"
        },
        "content": " */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class FlashNotesParserTest {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    private static final String DEFAULT \u003d \"Default\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private final FlashNotesParser parser \u003d new FlashNotesParser();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    private boolean isInDeck \u003d true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private boolean isNotInDeck \u003d false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private boolean isReviewMode \u003d true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private boolean isNotReviewMode \u003d false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Home mode testcases \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void homeScreen_addDeck_success() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        String keyword \u003d \"foo\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        Deck deck \u003d new Deck(keyword);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        AddDeckCommand command \u003d (AddDeckCommand) parser"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                .parseCommand(AddDeckCommand.COMMAND_WORD + \" n/\" + keyword, isNotReviewMode,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        isNotInDeck, DEFAULT);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertEquals(new AddDeckCommand(deck), command);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void homeScreen_deleteDeck_success() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        int key \u003d 1;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        Index index \u003d Index.fromZeroBased(key - 1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        DeleteDeckCommand command \u003d (DeleteDeckCommand) parser.parseCommand("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                DeleteDeckCommand.COMMAND_WORD + \" \" + key,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                isNotReviewMode, isNotInDeck, DEFAULT);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertEquals(new DeleteDeckCommand(index), command);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void homeScreen_enterDeck_success() throws Exception {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        String keyword \u003d \"foo\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        EnterDeckCommand command \u003d (EnterDeckCommand) parser.parseCommand("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                EnterDeckCommand.COMMAND_WORD + \" \" + keyword, isNotReviewMode, isNotInDeck, DEFAULT);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertEquals(new EnterDeckCommand(new TagContainsKeywordsPredicate(keyword)), command);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void homeScreen_exit_success() throws Exception {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                isNotReviewMode, isNotInDeck, DEFAULT) instanceof ExitCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void homeScreen_help_success() throws Exception {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD, isNotReviewMode, isNotInDeck, DEFAULT)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                instanceof HelpCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void homeScreen_list_success() throws Exception {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertTrue(parser.parseCommand(ListAllCommand.COMMAND_WORD, isNotReviewMode, isNotInDeck, DEFAULT)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                instanceof ListAllCommand);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void homeScreen_list_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        // Throws ParseException if List command has any arguments"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                String.format(MESSAGE_EXTENDED_COMMAND_ERROR, ListAllCommand.COMMAND_WORD), ()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                -\u003e parser.parseCommand(ListAllCommand.COMMAND_WORD + \" 3\","
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                        isNotReviewMode, isNotInDeck, DEFAULT));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void homeScreen_clear_success() throws Exception {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD, isNotReviewMode, isNotInDeck, DEFAULT)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                instanceof ClearCommand);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void homeScreen_clear_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        // Throws ParseException if Clear command has any arguments"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_EXTENDED_COMMAND_ERROR, ClearCommand.COMMAND_WORD), ()"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            -\u003e parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\", isNotReviewMode, isNotInDeck, DEFAULT));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void homeScreen_setReviewLimit20_success() throws Exception {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertTrue(parser.parseCommand(SetReviewLimitCommand.COMMAND_WORD + \" all\", isNotReviewMode,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                isNotInDeck, DEFAULT) instanceof SetReviewLimitCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertTrue(parser.parseCommand(SetReviewLimitCommand.COMMAND_WORD + \" 20\", isNotReviewMode,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                isNotInDeck, DEFAULT) instanceof SetReviewLimitCommand);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void homeScreen_setReviewLimitAll_success() throws Exception {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertTrue(parser.parseCommand(SetReviewLimitCommand.COMMAND_WORD + \" all\","
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                isNotReviewMode, isNotInDeck, DEFAULT) instanceof SetReviewLimitCommand);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void homeScreen_checkReviewLimit_success() throws Exception {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertTrue(parser.parseCommand(CheckReviewLimitCommand.COMMAND_WORD, isNotReviewMode, isNotInDeck, DEFAULT)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                instanceof CheckReviewLimitCommand);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public void homeScreen_addCard_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertThrows(ParseException.class, INVALID_ADDCARD_COMMAND_IN_HOME_MESSAGE, ()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            -\u003e parser.parseCommand(AddCardCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                isNotReviewMode, isNotInDeck, DEFAULT));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public void homeScreen_editCard_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertThrows(ParseException.class, INVALID_EDITCARD_COMMAND_IN_HOME_MESSAGE, ()"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            -\u003e parser.parseCommand(EditCardCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                isNotReviewMode, isNotInDeck, DEFAULT));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public void homeScreen_deleteCard_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertThrows(ParseException.class, INVALID_DELETECARD_COMMAND_IN_HOME_MESSAGE, ()"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            -\u003e parser.parseCommand(DeleteCardCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                isNotReviewMode, isNotInDeck, DEFAULT));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void homeScreen_review_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertThrows(ParseException.class, INVALID_REVIEW_COMMAND_IN_HOME_MESSAGE, ()"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            -\u003e parser.parseCommand(ReviewCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                isNotReviewMode, isNotInDeck, DEFAULT));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void homeScreen_flip_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertThrows(ParseException.class, INVALID_FLIP_COMMAND_IN_HOME_MESSAGE, ()"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            -\u003e parser.parseCommand(FlipCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                isNotReviewMode, isNotInDeck, DEFAULT));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void homeScreen_correct_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertThrows(ParseException.class, INVALID_CORRECT_COMMAND_IN_HOME_MESSAGE, ()"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            -\u003e parser.parseCommand(CorrectCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                isNotReviewMode, isNotInDeck, DEFAULT));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void homeScreen_wrong_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertThrows(ParseException.class, INVALID_WRONG_COMMAND_IN_HOME_MESSAGE, ()"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            -\u003e parser.parseCommand(WrongCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                isNotReviewMode, isNotInDeck, DEFAULT));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void homeScreen_endReview_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertThrows(ParseException.class, INVALID_ENDREVIEW_COMMAND_IN_HOME_MESSAGE, ()"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            -\u003e parser.parseCommand(EndReviewCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                isNotReviewMode, isNotInDeck, DEFAULT));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void homeScreen_home_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertThrows(ParseException.class, INVALID_HOME_COMMAND_IN_HOME_MESSAGE, ()"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            -\u003e parser.parseCommand(HomeCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                isNotReviewMode, isNotInDeck, DEFAULT));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void homeScreen_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            -\u003e parser.parseCommand(\"\", isNotReviewMode, isNotInDeck, DEFAULT));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void homeScreen_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, ()"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            -\u003e parser.parseCommand(\"unknownCommand\", isNotReviewMode, isNotInDeck, DEFAULT));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Card mode testcases \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void inDeck_add_success() throws Exception {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        Flashcard flashcard \u003d new FlashcardBuilder().build();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        AddCardCommand command \u003d (AddCardCommand) parser"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "                .parseCommand(FlashcardUtil.getAddCardCommand(flashcard), isNotReviewMode, isInDeck, DEFAULT_TAG);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertEquals(new AddCardCommand(flashcard), command);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void inDeck_delete_success() throws Exception {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        DeleteCardCommand command \u003d (DeleteCardCommand) parser.parseCommand("
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "                DeleteCardCommand.COMMAND_WORD + \" \" + INDEX_FIRST_FLASHCARD.getOneBased(),"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                isNotReviewMode, isInDeck, DEFAULT);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertEquals(new DeleteCardCommand(INDEX_FIRST_FLASHCARD), command);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void inDeck_edit_success() throws Exception {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        Flashcard flashcard \u003d new FlashcardBuilder().build();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        EditCardCommand.EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder(flashcard).build();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        EditCardCommand command \u003d (EditCardCommand) parser.parseCommand(EditCardCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                + INDEX_FIRST_FLASHCARD.getOneBased() + \" \""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                + FlashcardUtil.getEditFlashcardDescriptorDetails(descriptor), isNotReviewMode, isInDeck, DEFAULT);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertEquals(new EditCardCommand(INDEX_FIRST_FLASHCARD, descriptor), command);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void inDeck_exit_success() throws Exception {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                isNotReviewMode, isInDeck, DEFAULT) instanceof ExitCommand);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void inDeck_exit_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        // Throws ParseException if Exit command has any arguments"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_EXTENDED_COMMAND_ERROR, ExitCommand.COMMAND_WORD), ()"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            -\u003e parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\", isNotReviewMode, isInDeck, DEFAULT));"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void inDeck_find_success() throws Exception {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                        + keywords.stream().collect(Collectors.joining(\" \")),"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                isNotReviewMode, isInDeck, DEFAULT);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertEquals(new FindCommand(new QuestionContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void inDeck_help_success() throws Exception {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD, isNotReviewMode, isInDeck, DEFAULT)"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                instanceof HelpCommand);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void inDeck_help_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        // Throws ParseException if Help command has any arguments"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_EXTENDED_COMMAND_ERROR, HelpCommand.COMMAND_WORD), ()"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            -\u003e parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\", isNotReviewMode, isInDeck, DEFAULT));"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void inDeck_home_success() throws Exception {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertTrue(parser.parseCommand(HomeCommand.COMMAND_WORD, isNotReviewMode, isInDeck, DEFAULT)"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                instanceof HomeCommand);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void inDeck_review_success() throws Exception {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertTrue(parser.parseCommand(ReviewCommand.COMMAND_WORD, isNotReviewMode, isInDeck, DEFAULT)"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                instanceof ReviewCommand);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void inDeck_setReviewLimit20_success() throws Exception {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertTrue(parser.parseCommand(SetReviewLimitCommand.COMMAND_WORD + \" 20\", isNotReviewMode, isInDeck, DEFAULT)"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                instanceof SetReviewLimitCommand);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void inDeck_setReviewLimitAll_success() throws Exception {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertTrue(parser.parseCommand(SetReviewLimitCommand.COMMAND_WORD + \" all\","
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                isNotReviewMode, isNotInDeck, DEFAULT) instanceof SetReviewLimitCommand);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void inDeck_checkReviewLimit_success() throws Exception {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertTrue(parser.parseCommand(CheckReviewLimitCommand.COMMAND_WORD, isNotReviewMode, isNotInDeck, DEFAULT)"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                instanceof CheckReviewLimitCommand);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void inDeck_addDeck_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        String keyword \u003d \"foo\";"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertThrows(ParseException.class, INVALID_ADDDECK_COMMAND_IN_DECK_MESSAGE, ()"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            -\u003e parser.parseCommand(AddDeckCommand.COMMAND_WORD + \" \" + keyword, isNotReviewMode,"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        isInDeck, DEFAULT));"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void inDeck_deleteDeck_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        String keyword \u003d \"foo\";"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertThrows(ParseException.class, INVALID_DELETEDECK_COMMAND_IN_DECK_MESSAGE, ()"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            -\u003e parser.parseCommand(DeleteDeckCommand.COMMAND_WORD + \" \" + keyword,"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                isNotReviewMode, isInDeck, DEFAULT));"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void inDeck_enterDeck_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        String keyword \u003d \"foo\";"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertThrows(ParseException.class, INVALID_ENTERDECK_COMMAND_IN_DECK_MESSAGE, ()"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            -\u003e parser.parseCommand(EnterDeckCommand.COMMAND_WORD + \" \" + keyword,"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                isNotReviewMode, isInDeck, DEFAULT));"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public void inDeck_editDeckName_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        String keyword \u003d \"foo\";"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertThrows(ParseException.class, INVALID_EDITDECKNAME_COMMAND_IN_DECK_MESSAGE, ()"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            -\u003e parser.parseCommand(EditDeckNameCommand.COMMAND_WORD + \" \" + keyword,"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "                isNotReviewMode, isInDeck, DEFAULT));"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void inDeck_clear_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertThrows(ParseException.class, INVALID_CLEAR_COMMAND_IN_DECK_MESSAGE, ()"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            -\u003e parser.parseCommand(ClearCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                isNotReviewMode, isInDeck, DEFAULT));"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void inDeck_list_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertThrows(ParseException.class, INVALID_LISTALL_COMMAND_IN_DECK_MESSAGE, ()"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            -\u003e parser.parseCommand(ListAllCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                isNotReviewMode, isInDeck, DEFAULT));"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void inDeck_flip_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertThrows(ParseException.class, INVALID_FLIP_COMMAND_IN_DECK_MESSAGE, ()"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            -\u003e parser.parseCommand(FlipCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                isNotReviewMode, isInDeck, DEFAULT));"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void inDeck_correct_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertThrows(ParseException.class, INVALID_CORRECT_COMMAND_IN_DECK_MESSAGE, ()"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            -\u003e parser.parseCommand(CorrectCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                isNotReviewMode, isInDeck, DEFAULT));"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void inDeck_wrong_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertThrows(ParseException.class, INVALID_WRONG_COMMAND_IN_DECK_MESSAGE, ()"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            -\u003e parser.parseCommand(WrongCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                isNotReviewMode, isInDeck, DEFAULT));"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void inDeck_endReview_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertThrows(ParseException.class, INVALID_ENDREVIEW_COMMAND_IN_DECK_MESSAGE, ()"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            -\u003e parser.parseCommand(EndReviewCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                isNotReviewMode, isInDeck, DEFAULT));"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void inDeck_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            -\u003e parser.parseCommand(\"\", isNotReviewMode, isInDeck, DEFAULT));"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void inDeck_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, ()"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            -\u003e parser.parseCommand(\"unknownCommand\", isNotReviewMode, isInDeck, DEFAULT));"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Review mode testcases \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void inReview_flip_success() throws Exception {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertTrue(parser.parseCommand(FlipCommand.COMMAND_WORD, isReviewMode, isInDeck, DEFAULT)"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                instanceof FlipCommand);"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void inReview_correct_success() throws Exception {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertTrue(parser.parseCommand(CorrectCommand.COMMAND_WORD, isReviewMode, isInDeck, DEFAULT)"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                instanceof CorrectCommand);"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void inReview_wrong_success() throws Exception {"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertTrue(parser.parseCommand(WrongCommand.COMMAND_WORD, isReviewMode, isInDeck, DEFAULT)"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                instanceof WrongCommand);"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void inReview_endReview_success() throws Exception {"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertTrue(parser.parseCommand(EndReviewCommand.COMMAND_WORD, isReviewMode, isInDeck, DEFAULT)"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                instanceof EndReviewCommand);"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void inReview_help_success() throws Exception {"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD, isReviewMode, isInDeck, DEFAULT)"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                instanceof HelpCommand);"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void inReview_review_throwsParseException() {"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_ALREADY_IN_REVIEW_MODE, ()"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            -\u003e parser.parseCommand(ReviewCommand.COMMAND_WORD, isReviewMode,"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                isInDeck, DEFAULT));"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void inReview_addDeck_throwsParseException() {"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        String keyword \u003d \"foo\";"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertThrows(ParseException.class, INVALID_ADDDECK_COMMAND_IN_REVIEW_MESSAGE, ()"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            -\u003e parser.parseCommand(AddDeckCommand.COMMAND_WORD + \" \" + keyword, isReviewMode,"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                isInDeck, DEFAULT));"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void inReview_deleteDeck_throwsParseException() {"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        String keyword \u003d \"foo\";"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertThrows(ParseException.class, INVALID_DELETEDECK_COMMAND_IN_REVIEW_MESSAGE, ()"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            -\u003e parser.parseCommand(DeleteDeckCommand.COMMAND_WORD + \" \" + keyword,"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                isReviewMode, isInDeck, DEFAULT));"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void inReview_enterDeck_throwsParseException() {"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        String keyword \u003d \"foo\";"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertThrows(ParseException.class, INVALID_ENTERDECK_COMMAND_IN_REVIEW_MESSAGE, ()"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            -\u003e parser.parseCommand(EnterDeckCommand.COMMAND_WORD + \" \" + keyword, isReviewMode,"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                isInDeck, DEFAULT));"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void inReview_list_throwsParseException() {"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertThrows(ParseException.class, INVALID_LISTALL_COMMAND_IN_REVIEW_MESSAGE, ()"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            -\u003e parser.parseCommand(ListAllCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                isReviewMode, isInDeck, DEFAULT));"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void inReview_clear_throwsParseException() {"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertThrows(ParseException.class, INVALID_CLEAR_COMMAND_IN_REVIEW_MESSAGE, ()"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            -\u003e parser.parseCommand(ClearCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                isReviewMode, isInDeck, DEFAULT));"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void inReview_find_throwsParseException() {"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertThrows(ParseException.class, INVALID_FIND_COMMAND_IN_REVIEW_MESSAGE, ()"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            -\u003e parser.parseCommand(FindCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                isReviewMode, isInDeck, DEFAULT));"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void inReview_setReviewLimit_throwsParseException() {"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertThrows(ParseException.class, INVALID_SETREVIEWLIMIT_COMMAND_IN_REVIEW_MESSAGE, ()"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            -\u003e parser.parseCommand(SetReviewLimitCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                isReviewMode, isInDeck, DEFAULT));"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void inReview_exit_throwsParseException() {"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertThrows(ParseException.class, INVALID_EXIT_COMMAND_IN_REVIEW_MESSAGE, ()"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            -\u003e parser.parseCommand(ExitCommand.COMMAND_WORD, isReviewMode,"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                isInDeck, DEFAULT));"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public void inReview_addCard_throwsParseException() {"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertThrows(ParseException.class, INVALID_ADDCARD_COMMAND_IN_REVIEW_MESSAGE, ()"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            -\u003e parser.parseCommand(AddCardCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                isReviewMode, isInDeck, DEFAULT));"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public void inReview_editCard_throwsParseException() {"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertThrows(ParseException.class, INVALID_EDITCARD_COMMAND_IN_REVIEW_MESSAGE, ()"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            -\u003e parser.parseCommand(EditCardCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                isReviewMode, isInDeck, DEFAULT));"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public void inReview_editDeckName_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertThrows(ParseException.class, INVALID_EDITDECKNAME_COMMAND_IN_REVIEW_MESSAGE, ()"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            -\u003e parser.parseCommand(EditDeckNameCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "                isReviewMode, isInDeck, DEFAULT));"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public void inReview_deleteCard_throwsParseException() {"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertThrows(ParseException.class, INVALID_DELETECARD_COMMAND_IN_REVIEW_MESSAGE, ()"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "            -\u003e parser.parseCommand(DeleteCardCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                isReviewMode, isInDeck, DEFAULT));"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void inReview_home_throwsParseException() {"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertThrows(ParseException.class, INVALID_HOME_COMMAND_IN_REVIEW_MESSAGE, ()"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            -\u003e parser.parseCommand(HomeCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                isReviewMode, isInDeck, DEFAULT));"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void inReview_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            -\u003e parser.parseCommand(\"\", isReviewMode, isInDeck, DEFAULT));"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void inReview_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, ()"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            -\u003e parser.parseCommand(\"unknownCommand\", isReviewMode, isInDeck, DEFAULT));"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 2,
      "pengxiangg": 31,
      "chuyouchia": 19,
      "foongsq": 370,
      "-": 54,
      "Sruthisarav": 102
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.Answer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.Question;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private static final String INVALID_QUESTION \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private static final String INVALID_ANSWER \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    private static final String INVALID_TAG \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private static final String VALID_QUESTION \u003d \"Why?\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    private static final String VALID_ANSWER \u003d \"Idk\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertEquals(INDEX_FIRST_FLASHCARD, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertEquals(INDEX_FIRST_FLASHCARD, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void parseQuestion_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseQuestion((String) null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void parseQuestion_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseQuestion(INVALID_QUESTION));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void parseQuestion_validValueWithoutWhitespace_returnsQuestion() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        Question expectedQuestion \u003d new Question(VALID_QUESTION);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertEquals(expectedQuestion, ParserUtil.parseQuestion(VALID_QUESTION));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void parseQuestion_validValueWithWhitespace_returnsTrimmedQuestion() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        String questionWithWhitespace \u003d WHITESPACE + VALID_QUESTION + WHITESPACE;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        Question expectedQuestion \u003d new Question(VALID_QUESTION);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertEquals(expectedQuestion, ParserUtil.parseQuestion(questionWithWhitespace));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public void parseAnswer_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAnswer((String) null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public void parseAnswer_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAnswer(INVALID_ANSWER));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public void parseAnswer_validValueWithoutWhitespace_returnsAnswer() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        Answer expectedAnswer \u003d new Answer(VALID_ANSWER);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertEquals(expectedAnswer, ParserUtil.parseAnswer(VALID_ANSWER));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public void parseAnswer_validValueWithWhitespace_returnsTrimmedAnswer() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        String answerWithWhitespace \u003d WHITESPACE + VALID_ANSWER + WHITESPACE;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        Answer expectedAnswer \u003d new Answer(VALID_ANSWER);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertEquals(expectedAnswer, ParserUtil.parseAnswer(answerWithWhitespace));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 2,
      "pengxiangg": 1,
      "chuyouchia": 8,
      "foongsq": 14,
      "-": 76,
      "Sruthisarav": 15
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/logic/parser/SetReviewLimitCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": "package seedu.flashnotes.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import static seedu.flashnotes.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import static seedu.flashnotes.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import static seedu.flashnotes.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import static seedu.flashnotes.logic.parser.ParserUtil.MESSAGE_INVALID_LIMIT_LARGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import seedu.flashnotes.logic.commands.SetReviewLimitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foongsq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foongsq"
        },
        "content": " * Test class for SetReviewLimitCommandParser."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foongsq"
        },
        "content": "public class SetReviewLimitCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private SetReviewLimitCommandParser parser \u003d new SetReviewLimitCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void parse_validArgs_returnsSetReviewLimitCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertParseSuccess(parser, \"20\", new SetReviewLimitCommand(20));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                SetReviewLimitCommand.MESSAGE_USAGE + \"\\n\" + MESSAGE_INVALID_LIMIT_LARGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foongsq"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "foongsq": 30
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/model/FlashNotesTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.testutil.TypicalDecks.VALID_DECK_1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.testutil.TypicalDecks.VALID_DECK_2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.testutil.TypicalFlashcards.WHAT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.testutil.TypicalFlashcards.WHY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.testutil.TypicalFlashcards.getTypicalFlashNotes;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.deck.Deck;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.deck.exceptions.DeckNotFoundException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.exceptions.DuplicateFlashcardException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.testutil.TypicalDecks;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class FlashNotesTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private final FlashNotes flashNotes \u003d new FlashNotes();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertEquals(Collections.emptyList(), flashNotes.getFlashcardList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e flashNotes.resetData(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void resetData_withValidReadOnlyFlashNotes_replacesData() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        FlashNotes newData \u003d getTypicalFlashNotes();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        flashNotes.resetData(newData);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertEquals(newData, flashNotes);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void resetData_withDuplicateFlashcards_throwsDuplicateFlashcardException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        // Two flashcards with the same identity fields"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        Flashcard editedAlice \u003d new FlashcardBuilder(WHAT).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        List\u003cFlashcard\u003e newFlashcards \u003d Arrays.asList(WHAT, editedAlice);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        List\u003cDeck\u003e newDecks \u003d TypicalDecks.getTypicalDecks();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        FlashNotesStub newData \u003d new FlashNotesStub(newFlashcards, newDecks);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertThrows(DuplicateFlashcardException.class, () -\u003e flashNotes.resetData(newData));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void hasFlashcard_nullFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e flashNotes.hasFlashcard(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void hasFlashcard_flashcardNotInFlashNotes_returnsFalse() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertFalse(flashNotes.hasFlashcard(WHAT));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void hasFlashcard_flashcardInFlashNotes_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        flashNotes.addFlashcard(WHAT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertTrue(flashNotes.hasFlashcard(WHAT));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void hasFlashcard_flashcardWithSameDetailFieldsInFlashNotes_returnsTrue() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        flashNotes.addFlashcard(WHAT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        Flashcard editedAlice \u003d new FlashcardBuilder(WHAT)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertTrue(flashNotes.hasFlashcard(editedAlice));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void getFlashcardList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e flashNotes.getFlashcardList().remove(0));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void setFlashcard_flashcardWithSameDetailFieldsInFlashNotes_returnsTrue() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        flashNotes.addFlashcard(WHAT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Flashcard editedAlice \u003d new FlashcardBuilder(WHY)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        flashNotes.setFlashcard(WHAT, editedAlice);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        List\u003cFlashcard\u003e flashcards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        flashcards.add(editedAlice);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        FlashNotesStub flashNotesStub \u003d new FlashNotesStub(flashcards, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertEquals(flashNotesStub.getFlashcardList(), flashNotes.getFlashcardList());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void setFlashcard_flashcardWithDifferentDetailFieldsInFlashNotes_fails() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        flashNotes.addFlashcard(WHAT);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Flashcard editedAlice \u003d new FlashcardBuilder(WHY)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        flashNotes.setFlashcard(WHAT, editedAlice);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        List\u003cFlashcard\u003e flashcards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        flashcards.add(WHAT);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        FlashNotesStub flashNotesStub \u003d new FlashNotesStub(flashcards, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertNotEquals(flashNotesStub.getFlashcardList(), flashNotes.getFlashcardList());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void hasDeck_nullDeck_throwsNullPointerException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e flashNotes.hasDeck(null));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void hasDeck_deckNotInFlashNotes_returnsFalse() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertFalse(flashNotes.hasDeck(new Deck(\"WHAT\")));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void hasDeck_deckInFlashNotes_returnsTrue() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        flashNotes.addDeck(VALID_DECK_1);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertTrue(flashNotes.hasDeck(VALID_DECK_1));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void getDeckList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e flashNotes.getDeckList().remove(0));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void setDeck_deckWithSameDeckNameInFlashNotes_returnsTrue() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        flashNotes.addDeck(VALID_DECK_1);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Deck theDeck \u003d new Deck (\"Test Deck\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        flashNotes.setDeck(VALID_DECK_1, theDeck);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        List\u003cDeck\u003e decks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        decks.add(theDeck);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        FlashNotesStub flashNotesStub \u003d new FlashNotesStub(new ArrayList\u003c\u003e(), decks);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertEquals(flashNotesStub.getDeckList(), flashNotes.getDeckList());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void setDeck_deckWithDifferentDetailFieldsInFlashNotes_notEqual() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        flashNotes.addDeck(VALID_DECK_1);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        flashNotes.setDeck(VALID_DECK_1, VALID_DECK_2);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        List\u003cDeck\u003e decks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        decks.add(VALID_DECK_1);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        FlashNotesStub flashNotesStub \u003d new FlashNotesStub(new ArrayList\u003c\u003e(), decks);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertNotEquals(flashNotesStub.getDeckList(), flashNotes.getDeckList());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void removeDeck_deckFoundInNonEmptyFlashNotes_success() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        flashNotes.setDecks(TypicalDecks.getTypicalDecks());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        flashNotes.removeDeck(VALID_DECK_1);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        flashNotes.removeDeck(VALID_DECK_2);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        List\u003cDeck\u003e decks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        FlashNotesStub flashNotesStub \u003d new FlashNotesStub(new ArrayList\u003c\u003e(), decks);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertEquals(flashNotesStub.getDeckList(), flashNotes.getDeckList());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void removeDeck_deckNotFoundInNonEmptyFlashNotes_throwsDeckNotFoundException() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        flashNotes.setDecks(TypicalDecks.getTypicalDecks());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertThrows(DeckNotFoundException.class, () -\u003e flashNotes.removeDeck(new Deck (\"Funky\")));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * A stub ReadOnlyFlashNotes whose flashcards list can violate interface constraints."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private static class FlashNotesStub implements ReadOnlyFlashNotes {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        private final ObservableList\u003cFlashcard\u003e flashcards \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        private final ObservableList\u003cDeck\u003e decks \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        FlashNotesStub(Collection\u003cFlashcard\u003e flashcards, Collection\u003cDeck\u003e decks) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            this.flashcards.setAll(flashcards);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            this.decks.setAll(decks);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        public ObservableList\u003cFlashcard\u003e getFlashcardList() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            return flashcards;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        public ObservableList\u003cDeck\u003e getDeckList() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            return decks;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pengxiangg": 2,
      "chuyouchia": 199
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.model.Model.PREDICATE_SHOW_ALL_FLASHCARDS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.testutil.TypicalFlashcards.WHAT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.testutil.TypicalFlashcards.WHO;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import static seedu.flashnotes.testutil.TypicalFlashcards.getTypicalFlashNotes;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import seedu.flashnotes.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.QuestionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.testutil.FlashNotesBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        FlashNotes fn \u003d new FlashNotes(new FlashNotes());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        FlashNotes modelFN \u003d new FlashNotes(modelManager.getFlashNotes());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        System.out.println(fn);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        System.out.println(modelFN);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertEquals(fn, modelFN);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        userPrefs.setFlashNotesFilePath(Paths.get(\"flashnotes/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        userPrefs.setFlashNotesFilePath(Paths.get(\"new/flashnotes/file/path\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void setFlashNotesFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setFlashNotesFilePath(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void setFlashNotesFilePath_validPath_setsFlashNotesFilePath() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Path path \u003d Paths.get(\"flashnotes/file/path\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        modelManager.setFlashNotesFilePath(path);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertEquals(path, modelManager.getFlashNotesFilePath());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void hasFlashcard_nullFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasFlashcard(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void hasFlashcard_flashcardNotInFlashNotes_returnsFalse() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertFalse(modelManager.hasFlashcard(WHAT));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void hasFlashcard_flashcardInFlashNotes_returnsTrue() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        modelManager.addFlashcard(WHAT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertTrue(modelManager.hasFlashcard(WHAT));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void getFilteredFlashcardList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                .getFilteredFlashcardList().remove(0));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public void execute_addFlashcardToReview() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalFlashNotes(), new UserPrefs());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFlashNotes(), new UserPrefs());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        int size \u003d model.getFlashcardsToReview().size();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        expectedModel.addFlashcardToReview();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertEquals(size + 1, expectedModel.getModifiedFlashcardsToReview().size());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        Flashcard newFlashcard \u003d expectedModel.getFlashcardsToReview().get(size);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertEquals(model.getFlashcardBeingReviewed(), newFlashcard);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public void execute_updateFlashcardBeingReviewedForCorrectCommand() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalFlashNotes(), new UserPrefs());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFlashNotes(), new UserPrefs());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        Flashcard flashcard \u003d expectedModel.getFlashcardBeingReviewed();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertEquals(model.getFlashcardBeingReviewed(), flashcard);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        expectedModel.updateFlashcardBeingReviewed(2);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertEquals(2, flashcard.getIsCorrect());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        Flashcard nextFlashcard \u003d expectedModel.getFlashcardBeingReviewed();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertNotEquals(flashcard, nextFlashcard);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public void execute_updateFlashcardBeingReviewedForWrongCommand() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalFlashNotes(), new UserPrefs());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFlashNotes(), new UserPrefs());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        Flashcard flashcard \u003d expectedModel.getFlashcardBeingReviewed();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertEquals(model.getFlashcardBeingReviewed(), flashcard);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        expectedModel.updateFlashcardBeingReviewed(1);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertEquals(1, flashcard.getIsCorrect());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        Flashcard nextFlashcard \u003d expectedModel.getFlashcardBeingReviewed();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertNotEquals(flashcard, nextFlashcard);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public void execute_resetFlipOfFlashcardBeingReviewedWhenFlipped() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalFlashNotes(), new UserPrefs());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        // To get a new flashcard"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        model.updateFlashcardBeingReviewed(2);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        Flashcard flashcard \u003d model.getFlashcardBeingReviewed();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        //flip flashcard to test whether it can be reset"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        flashcard.flipFlashcard();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertEquals(true, flashcard.getIsFlipped());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        model.resetFlipOfFlashcardBeingReviewed();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertEquals(false, flashcard.getIsFlipped());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public void execute_resetFlipOfFlashcardBeingReviewedWhenNotFlipped() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalFlashNotes(), new UserPrefs());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        // To get a new flashcard"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        model.updateFlashcardBeingReviewed(2);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        Flashcard flashcard \u003d model.getFlashcardBeingReviewed();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertEquals(false, flashcard.getIsFlipped());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        model.resetFlipOfFlashcardBeingReviewed();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertEquals(false, flashcard.getIsFlipped());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public void execute_getFlashcardBeingReviewed() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalFlashNotes(), new UserPrefs());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFlashNotes(), new UserPrefs());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        Flashcard expectedFlashcard \u003d expectedModel.getFlashcardsToReview().get(0);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        Flashcard flashcard \u003d model.getFlashcardBeingReviewed();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertEquals(expectedFlashcard, flashcard);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public void execute_getIsFlashcardFlipped() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalFlashNotes(), new UserPrefs());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        Flashcard flashcard \u003d model.getFlashcardBeingReviewed();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertEquals(false, flashcard.getIsFlipped());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertEquals(false, model.getIsFlashcardFlipped());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        model.carryOutFlipCommand();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertEquals(true, flashcard.getIsFlipped());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertEquals(true, model.getIsFlashcardFlipped());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public void execute_carryOutFlipCommand() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalFlashNotes(), new UserPrefs());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        // To get a new flashcard"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        model.updateFlashcardBeingReviewed(2);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        Flashcard flashcard \u003d model.getFlashcardBeingReviewed();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertEquals(false, flashcard.getIsFlipped());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        model.carryOutFlipCommand();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertEquals(true, flashcard.getIsFlipped());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        model.carryOutFlipCommand();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertEquals(false, flashcard.getIsFlipped());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public void execute_markFlashcardBeingReviewedAsCorrect() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalFlashNotes(), new UserPrefs());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        // To get a new flashcard"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        model.updateFlashcardBeingReviewed(2);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        Flashcard flashcard \u003d model.getFlashcardBeingReviewed();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        model.markFlashcardBeingReviewed(flashcard, 2);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertEquals(2, flashcard.getIsCorrect());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public void execute_markFlashcardBeingReviewedAsWrong() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalFlashNotes(), new UserPrefs());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        // To get a new flashcard"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        model.updateFlashcardBeingReviewed(2);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        Flashcard flashcard \u003d model.getFlashcardBeingReviewed();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        model.markFlashcardBeingReviewed(flashcard, 1);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertEquals(1, flashcard.getIsCorrect());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        FlashNotes flashNotes \u003d new FlashNotesBuilder().withFlashcard(WHAT).withFlashcard(WHO).build();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        FlashNotes differentFlashNotes \u003d new FlashNotes();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        modelManager \u003d new ModelManager(flashNotes, userPrefs);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(flashNotes, userPrefs);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        // different flashNotes -\u003e returns false"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentFlashNotes, userPrefs)));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        String[] keywords \u003d WHAT.getQuestion().question.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        modelManager.updateFilteredFlashcardList(new QuestionContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(flashNotes, userPrefs)));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        modelManager.updateFilteredFlashcardList(PREDICATE_SHOW_ALL_FLASHCARDS);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        differentUserPrefs.setFlashNotesFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(flashNotes, differentUserPrefs)));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 10,
      "chuyouchia": 32,
      "foongsq": 1,
      "-": 94,
      "Sruthisarav": 130
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void setFlashNotesFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setFlashNotesFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 4,
      "-": 17
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/model/deck/DeckTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.testutil.TypicalDecks.VALID_DECK_1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.testutil.TypicalDecks.VALID_DECK_2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class DeckTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void setDeckName_success() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        VALID_DECK_1.setDeckName(\"new name\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertEquals(\"new name\", VALID_DECK_1.getDeckName());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        VALID_DECK_1.setDeckName(\"Test Deck\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void setDeckName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e VALID_DECK_1.setDeckName(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void setResultStatistic_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        VALID_DECK_1.setResultStatistics(\"1\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertEquals(\"1\", VALID_DECK_1.getResultStatistics());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void isValidDeckLength_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        //incorrect input of empty deck name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertEquals(false, Deck.isValidDeckLength(\"\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        //correct input of non-empty deck name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertEquals(true, Deck.isValidDeckLength(\"funky\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void setResultStatistic_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e VALID_DECK_1.setResultStatistics(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void isSameDeck() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertTrue(VALID_DECK_1.isSameDeck(VALID_DECK_1));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertFalse(VALID_DECK_1.isSameDeck(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertFalse(VALID_DECK_1.isSameDeck(VALID_DECK_2));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Deck copyDeck \u003d new Deck(\"Test Deck\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertTrue(VALID_DECK_1.equals(copyDeck));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertTrue(VALID_DECK_1.equals(VALID_DECK_1));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertFalse(VALID_DECK_1.equals(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertFalse(VALID_DECK_1.equals(5));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        // different deck -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertFalse(VALID_DECK_1.equals(VALID_DECK_2));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        // different result statistic -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Deck editedDeck \u003d new Deck(\"Test Deck\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        editedDeck.setResultStatistics(\"1\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertTrue(VALID_DECK_1.equals(editedDeck));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        // change deck name -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        editedDeck \u003d new Deck(\"funky\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertFalse(VALID_DECK_1.equals(editedDeck));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 80,
      "foongsq": 3
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/model/deck/UniqueDeckListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.testutil.TypicalDecks.VALID_DECK_1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.testutil.TypicalDecks.VALID_DECK_2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.deck.exceptions.DeckNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.deck.exceptions.DuplicateDeckException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class UniqueDeckListTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private final UniqueDeckList uniqueDeckList \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void contains_nullDeck_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueDeckList.contains(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void contains_deckNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertFalse(uniqueDeckList.contains(VALID_DECK_1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void contains_deckInList_returnsTrue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        uniqueDeckList.add(VALID_DECK_2);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertTrue(uniqueDeckList.contains(VALID_DECK_2));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void add_nullDeck_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueDeckList.add(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void add_duplicateDeck_throwsDuplicateDeckException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        uniqueDeckList.add(VALID_DECK_2);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertThrows(DuplicateDeckException.class, () -\u003e uniqueDeckList.add(VALID_DECK_2));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void setDeck_nullTargetDeck_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueDeckList.setDeck(null, VALID_DECK_2));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void setDeck_nullEditedDeck_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueDeckList.setDeck(VALID_DECK_2, null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void setDeck_targetDeckNotInList_throwsDeckNotFoundException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertThrows(DeckNotFoundException.class, () -\u003e uniqueDeckList.setDeck("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                VALID_DECK_2, VALID_DECK_2));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void setDeck_editedDeckIsSameDeck_success() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        uniqueDeckList.add(VALID_DECK_2);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        uniqueDeckList.setDeck(VALID_DECK_2, VALID_DECK_2);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        UniqueDeckList expectedUniqueDeckList \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        expectedUniqueDeckList.add(VALID_DECK_2);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertEquals(expectedUniqueDeckList, uniqueDeckList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void setDeck_editedDeckHasSameDetails_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        uniqueDeckList.add(VALID_DECK_2);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Deck editedDeck \u003d new Deck(\"Test Deck\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        uniqueDeckList.setDeck(VALID_DECK_2, editedDeck);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        UniqueDeckList expectedUniqueDeckList \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        expectedUniqueDeckList.add(editedDeck);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertEquals(expectedUniqueDeckList, uniqueDeckList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void setDeck_editedDeckHasDifferentDetails_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        uniqueDeckList.add(VALID_DECK_1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        uniqueDeckList.setDeck(VALID_DECK_1, VALID_DECK_2);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        UniqueDeckList expectedUniqueDeckList \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        expectedUniqueDeckList.add(VALID_DECK_2);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertEquals(expectedUniqueDeckList, uniqueDeckList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void setDeck_editedDeckHasNonUniqueDetails_throwsDuplicateDeckException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        uniqueDeckList.add(VALID_DECK_1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        uniqueDeckList.add(VALID_DECK_2);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertThrows(DuplicateDeckException.class, () -\u003e uniqueDeckList.setDeck(VALID_DECK_1, VALID_DECK_2));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void remove_nullDeck_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueDeckList.remove(null));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void remove_deckDoesNotExist_throwsDeckNotFoundException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertThrows(DeckNotFoundException.class, () -\u003e uniqueDeckList.remove(VALID_DECK_1));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void remove_existingDeck_removesDeck() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        uniqueDeckList.add(VALID_DECK_2);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        uniqueDeckList.remove(VALID_DECK_2);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        UniqueDeckList expectedUniqueDeckList \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertEquals(expectedUniqueDeckList, uniqueDeckList);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void setDeck_nullUniqueDeckList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueDeckList.setDecks((UniqueDeckList) null));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void setDeck_uniqueDeckList_replacesOwnListWithProvidedUniqueDeckList() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        uniqueDeckList.add(VALID_DECK_1);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        UniqueDeckList expectedUniqueDeckList \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        expectedUniqueDeckList.add(VALID_DECK_2);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        uniqueDeckList.setDecks(expectedUniqueDeckList);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertEquals(expectedUniqueDeckList, uniqueDeckList);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void setDecks_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueDeckList.setDecks((List\u003cDeck\u003e) null));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void setDecks_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        uniqueDeckList.add(VALID_DECK_1);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        List\u003cDeck\u003e deckList \u003d Collections.singletonList(VALID_DECK_2);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        uniqueDeckList.setDecks(deckList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        UniqueDeckList expectedUniqueDeckList \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        expectedUniqueDeckList.add(VALID_DECK_2);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertEquals(expectedUniqueDeckList, uniqueDeckList);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void setDecks_listWithDuplicateDecks_throwsDuplicateDeckException() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        List\u003cDeck\u003e listWithDuplicateDecks \u003d Arrays.asList(VALID_DECK_1, VALID_DECK_1);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertThrows(DuplicateDeckException.class, () -\u003e uniqueDeckList"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                .setDecks(listWithDuplicateDecks));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            -\u003e uniqueDeckList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void findDeck_listWithAvailableDeck_success() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        uniqueDeckList.add(VALID_DECK_1);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Deck deckFound \u003d uniqueDeckList.findDeck(\"Test Deck\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Deck expectedDeck \u003d new Deck(\"Test Deck\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertEquals(expectedDeck, deckFound);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void findDeck_listDoesNotHaveDeck_null() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Deck deckFound \u003d uniqueDeckList.findDeck(\"Test Deck 2\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertEquals(null, deckFound);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 175
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/model/flashcard/AnswerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "public class AnswerTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Answer(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public void constructor_invalidAnswer_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        String invalidAnswer \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Answer(invalidAnswer));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public void isValidAnswer() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        // null answer"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Answer.isValidAnswer(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        // invalid answers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertFalse(Answer.isValidAnswer(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertFalse(Answer.isValidAnswer(\" \")); // space only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        // valid answers"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertTrue(Answer.isValidAnswer(\"red\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertTrue(Answer.isValidAnswer(\"blue\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertTrue(Answer.isValidAnswer(\"green is the new yellow\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 2,
      "Sruthisarav": 34
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/model/flashcard/FlashcardTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.VALID_ANSWER_MACROECONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.VALID_QUESTION_MACROECONS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.VALID_TAG_ECONOMICS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.VALID_TAG_NATURE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.testutil.TypicalFlashcards.MACROECONS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.testutil.TypicalFlashcards.WHAT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rachel170"
        },
        "content": "public class FlashcardTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public void execute_flipFlashcard() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        WHAT.flipFlashcard();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertEquals(true, WHAT.getIsFlipped());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public void execute_doubleFlipFlashcard() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        WHAT.flipFlashcard();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        WHAT.flipFlashcard();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertEquals(false, WHAT.getIsFlipped());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public void execute_resetFlipBeforeFlipping() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        WHAT.resetFlip();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertEquals(false, WHAT.getIsFlipped());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public void execute_resetFlipAfterFlipping() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        WHAT.flipFlashcard();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        WHAT.resetFlip();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertEquals(false, WHAT.getIsFlipped());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public void execute_resetFlipAfterDoubleFlips() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        WHAT.flipFlashcard();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        WHAT.flipFlashcard();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        WHAT.resetFlip();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertEquals(false, WHAT.getIsFlipped());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public void execute_markCardAsCorrect_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        WHAT.markCard(2);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertEquals(2, WHAT.getIsCorrect());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public void execute_markCardAsWrong_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        WHAT.markCard(1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        assertEquals(1, WHAT.getIsCorrect());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void isSameFlashcard() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertTrue(WHAT.isSameFlashcard(WHAT));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertFalse(WHAT.isSameFlashcard(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        // different answer -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        Flashcard editedAlice \u003d new FlashcardBuilder(WHAT).withAnswer(VALID_ANSWER_MACROECONS)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                .withTag(VALID_TAG_NATURE).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertFalse(WHAT.isSameFlashcard(editedAlice));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        // different question -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        editedAlice \u003d new FlashcardBuilder(WHAT).withQuestion(VALID_QUESTION_MACROECONS)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                .withTag(VALID_TAG_NATURE).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertFalse(WHAT.isSameFlashcard(editedAlice));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        // same question, same answer, different attributes -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        editedAlice \u003d new FlashcardBuilder(WHAT)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                .withTag(VALID_TAG_ECONOMICS).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertFalse(WHAT.isSameFlashcard(editedAlice));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        Flashcard aliceCopy \u003d new FlashcardBuilder(WHAT).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertTrue(WHAT.equals(aliceCopy));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertTrue(WHAT.equals(WHAT));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertFalse(WHAT.equals(null));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertFalse(WHAT.equals(5));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // different flashcard -\u003e returns false"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertFalse(WHAT.equals(MACROECONS));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        // different question -\u003e returns false"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        Flashcard editedAlice \u003d new FlashcardBuilder(WHAT).withQuestion(VALID_QUESTION_MACROECONS).build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertFalse(WHAT.equals(editedAlice));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        // different answer -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        editedAlice \u003d new FlashcardBuilder(WHAT).withAnswer(VALID_ANSWER_MACROECONS).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertFalse(WHAT.equals(editedAlice));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        editedAlice \u003d new FlashcardBuilder(WHAT).withTag(VALID_TAG_NATURE).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertFalse(WHAT.equals(editedAlice));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 9,
      "pengxiangg": 16,
      "chuyouchia": 3,
      "foongsq": 9,
      "-": 30,
      "Sruthisarav": 53
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/model/flashcard/QuestionContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": "public class QuestionContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        QuestionContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                new QuestionContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        QuestionContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                new QuestionContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        QuestionContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                new QuestionContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // different flashcard -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void test_questionContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        QuestionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                new QuestionContainsKeywordsPredicate(Collections.singletonList(\"Why\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertTrue(predicate.test(new FlashcardBuilder().withQuestion(\"Why How\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        predicate \u003d new QuestionContainsKeywordsPredicate(Arrays.asList(\"Why\", \"How\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertTrue(predicate.test(new FlashcardBuilder().withQuestion(\"Why How\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        predicate \u003d new QuestionContainsKeywordsPredicate(Arrays.asList(\"How\", \"Who\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertTrue(predicate.test(new FlashcardBuilder().withQuestion(\"Why Who\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        predicate \u003d new QuestionContainsKeywordsPredicate(Arrays.asList(\"wHy\", \"hOw\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertTrue(predicate.test(new FlashcardBuilder().withQuestion(\"Why How\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void test_questionDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        QuestionContainsKeywordsPredicate predicate \u003d new QuestionContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertFalse(predicate.test(new FlashcardBuilder().withQuestion(\"Why\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        predicate \u003d new QuestionContainsKeywordsPredicate(Arrays.asList(\"Who\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertFalse(predicate.test(new FlashcardBuilder().withQuestion(\"Why How\").build()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        // Keywords match answer and tags, but does not match question"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        predicate \u003d new QuestionContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertFalse(predicate.test(new FlashcardBuilder().withQuestion(\"Why\").withAnswer(\"12345\").withTag(\"Main\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                .build()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foongsq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 7,
      "pengxiangg": 2,
      "chuyouchia": 2,
      "foongsq": 64,
      "Sruthisarav": 4
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/model/flashcard/QuestionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": "public class QuestionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Question(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void constructor_invalidQuestion_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        String invalidQuestion \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Question(invalidQuestion));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void isValidQuestion() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        // null question"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Question.isValidQuestion(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        // invalid question"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertFalse(Question.isValidQuestion(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertFalse(Question.isValidQuestion(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        // valid question"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"who am I\")); // alphabets only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"where is peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"What is life\")); // with capital letters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"What\u0027s the definition of macroeconomics?\")); // non alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foongsq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 2,
      "foongsq": 36
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/model/flashcard/UniqueFlashcardListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.VALID_TAG_NATURE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.testutil.TypicalFlashcards.MACROECONS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.testutil.TypicalFlashcards.WHAT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.exceptions.DuplicateFlashcardException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.exceptions.FlashcardNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rachel170"
        },
        "content": "public class UniqueFlashcardListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private final UniqueFlashcardList uniqueFlashcardList \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void contains_nullFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlashcardList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void contains_flashcardNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertFalse(uniqueFlashcardList.contains(WHAT));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void contains_flashcardInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        uniqueFlashcardList.add(WHAT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertTrue(uniqueFlashcardList.contains(WHAT));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void add_nullFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlashcardList.add(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void add_duplicateFlashcard_throwsDuplicateFlashcardException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        uniqueFlashcardList.add(WHAT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertThrows(DuplicateFlashcardException.class, () -\u003e uniqueFlashcardList.add(WHAT));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void setFlashcard_nullTargetFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlashcardList.setFlashcard(null, WHAT));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void setFlashcard_nullEditedFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlashcardList.setFlashcard(WHAT, null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void setFlashcard_targetFlashcardNotInList_throwsFlashcardNotFoundException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertThrows(FlashcardNotFoundException.class, () -\u003e uniqueFlashcardList.setFlashcard(WHAT, WHAT));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void setFlashcard_editedFlashcardIsSameFlashcard_success() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        uniqueFlashcardList.add(WHAT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        uniqueFlashcardList.setFlashcard(WHAT, WHAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        UniqueFlashcardList expectedUniqueFlashcardList \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        expectedUniqueFlashcardList.add(WHAT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertEquals(expectedUniqueFlashcardList, uniqueFlashcardList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void setFlashcard_editedFlashcardHasSameDetails_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        uniqueFlashcardList.add(WHAT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        Flashcard editedAlice \u003d new FlashcardBuilder(WHAT).withTag(VALID_TAG_NATURE)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        uniqueFlashcardList.setFlashcard(WHAT, editedAlice);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        UniqueFlashcardList expectedUniqueFlashcardList \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        expectedUniqueFlashcardList.add(editedAlice);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertEquals(expectedUniqueFlashcardList, uniqueFlashcardList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void setFlashcard_editedFlashcardHasDifferentDetails_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        uniqueFlashcardList.add(WHAT);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        uniqueFlashcardList.setFlashcard(WHAT, MACROECONS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        UniqueFlashcardList expectedUniqueFlashcardList \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        expectedUniqueFlashcardList.add(MACROECONS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertEquals(expectedUniqueFlashcardList, uniqueFlashcardList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void setFlashcard_editedFlashcardHasNonUniqueDetails_throwsDuplicateFlashcardException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        uniqueFlashcardList.add(WHAT);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        uniqueFlashcardList.add(MACROECONS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertThrows(DuplicateFlashcardException.class, () -\u003e uniqueFlashcardList.setFlashcard(WHAT, MACROECONS));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void remove_nullFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlashcardList.remove(null));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void remove_flashcardDoesNotExist_throwsFlashcardNotFoundException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertThrows(FlashcardNotFoundException.class, () -\u003e uniqueFlashcardList.remove(WHAT));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void remove_existingFlashcard_removesFlashcard() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        uniqueFlashcardList.add(WHAT);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        uniqueFlashcardList.remove(WHAT);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        UniqueFlashcardList expectedUniqueFlashcardList \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertEquals(expectedUniqueFlashcardList, uniqueFlashcardList);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void setFlashcards_nullUniqueFlashcardList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlashcardList.setFlashcards((UniqueFlashcardList) null));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void setFlashcards_uniqueFlashcardList_replacesOwnListWithProvidedUniqueFlashcardList() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        uniqueFlashcardList.add(WHAT);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        UniqueFlashcardList expectedUniqueFlashcardList \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        expectedUniqueFlashcardList.add(MACROECONS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        uniqueFlashcardList.setFlashcards(expectedUniqueFlashcardList);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertEquals(expectedUniqueFlashcardList, uniqueFlashcardList);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void setFlashcards_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlashcardList.setFlashcards((List\u003cFlashcard\u003e) null));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void setFlashcards_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        uniqueFlashcardList.add(WHAT);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        List\u003cFlashcard\u003e flashcardList \u003d Collections.singletonList(MACROECONS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        uniqueFlashcardList.setFlashcards(flashcardList);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        UniqueFlashcardList expectedUniqueFlashcardList \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        expectedUniqueFlashcardList.add(MACROECONS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertEquals(expectedUniqueFlashcardList, uniqueFlashcardList);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void setFlashcards_listWithDuplicateFlashcards_throwsDuplicateFlashcardException() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        List\u003cFlashcard\u003e listWithDuplicateFlashcards \u003d Arrays.asList(WHAT, WHAT);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertThrows(DuplicateFlashcardException.class, () -\u003e uniqueFlashcardList"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                .setFlashcards(listWithDuplicateFlashcards));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            -\u003e uniqueFlashcardList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 66,
      "pengxiangg": 10,
      "chuyouchia": 6,
      "-": 80
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/model/tag/TagContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "package seedu.flashnotes.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "public class TagContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        String firstPredicateKeyword \u003d \"first\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        String secondPredicateKeyword \u003d \"second\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        TagContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                new TagContainsKeywordsPredicate(firstPredicateKeyword);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        TagContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                new TagContainsKeywordsPredicate(secondPredicateKeyword);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        TagContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                new TagContainsKeywordsPredicate(firstPredicateKeyword);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        // different flashcard -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public void test_tagContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        TagContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                new TagContainsKeywordsPredicate(\"GET1025\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertTrue(predicate.test(new FlashcardBuilder().withTag(\"GET1025\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public void test_tagDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        TagContainsKeywordsPredicate predicate \u003d new TagContainsKeywordsPredicate(\"\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertFalse(predicate.test(new FlashcardBuilder().withTag(\"GET1025\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        predicate \u003d new TagContainsKeywordsPredicate(\"GET1025\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertFalse(predicate.test(new FlashcardBuilder().withTag(\"GET1035\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        // Keywords match answer and question, but does not match tag"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        predicate \u003d new TagContainsKeywordsPredicate(\"Main\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertFalse(predicate.test(new FlashcardBuilder().withQuestion(\"Main\").withAnswer(\"12345\").withTag(\"GET1025\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                .build()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        //Mixed-case keywords"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        predicate \u003d new TagContainsKeywordsPredicate(\"get1025\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertFalse(predicate.test(new FlashcardBuilder().withTag(\"GET1025\").build()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pengxiangg": 69
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/model/tag/TagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 2,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/storage/JsonAdaptedDeckTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rachel170"
        },
        "content": "package seedu.flashnotes.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import static seedu.flashnotes.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import static seedu.flashnotes.testutil.TypicalDecks.VALID_DECK_1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import seedu.flashnotes.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import seedu.flashnotes.model.deck.Deck;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rachel170"
        },
        "content": "public class JsonAdaptedDeckTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private static final String INVALID_DECK_NAME \u003d \"\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private static final String INVALID_DECK_STATISTIC \u003d \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private static final String NEGATIVE_DECK_STATISTIC \u003d \"-0.5\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private static final String INVALID_VALUE_DECK_STATISTIC \u003d \"100.1\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private static final String VALID_DECK_NAME \u003d VALID_DECK_1.getDeckName();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private static final String VALID_DECK_STATISTIC \u003d VALID_DECK_1.getResultStatistics();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void toModelType_validDeckDetails_returnsDeck() throws Exception {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        JsonAdaptedDeck deck \u003d new JsonAdaptedDeck(VALID_DECK_1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertEquals(VALID_DECK_1, deck.toModelType());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void toModelType_invalidDeckName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        JsonAdaptedDeck deck \u003d new JsonAdaptedDeck(INVALID_DECK_NAME, VALID_DECK_STATISTIC);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        String expectedMessage \u003d Deck.MESSAGE_CONSTRAINTS_LENGTH;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, deck::toModelType);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void toModelType_invalidDeckStatistic_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        JsonAdaptedDeck deck \u003d new JsonAdaptedDeck(VALID_DECK_NAME, INVALID_DECK_STATISTIC);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        String expectedMessage \u003d Deck.MESSAGE_CONSTRAINTS_STATISTIC;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, deck::toModelType);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void toModelType_negativeDeckStatistic_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        JsonAdaptedDeck deck \u003d new JsonAdaptedDeck(VALID_DECK_NAME, NEGATIVE_DECK_STATISTIC);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        String expectedMessage \u003d Deck.MESSAGE_CONSTRAINTS_STATISTIC;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, deck::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void toModelType_invalidNumberDeckStatistic_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        JsonAdaptedDeck deck \u003d new JsonAdaptedDeck(VALID_DECK_NAME, INVALID_VALUE_DECK_STATISTIC);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        String expectedMessage \u003d Deck.MESSAGE_CONSTRAINTS_STATISTIC;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, deck::toModelType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rachel170"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 56
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/storage/JsonAdaptedFlashcardTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.storage.JsonAdaptedFlashcard.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.testutil.TypicalFlashcards.WHO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.Answer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.Question;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import seedu.flashnotes.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rachel170"
        },
        "content": "public class JsonAdaptedFlashcardTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private static final String INVALID_QUESTION \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private static final String INVALID_ANSWER \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    private static final String INVALID_TAG \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private static final String VALID_QUESTION \u003d WHO.getQuestion().toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    private static final String VALID_ANSWER \u003d WHO.getAnswer().toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    private static final String VALID_TAG \u003d WHO.getTag().toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void toModelType_validFlashcardDetails_returnsFlashcard() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        JsonAdaptedFlashcard flashcard \u003d new JsonAdaptedFlashcard(WHO);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertEquals(WHO, flashcard.toModelType());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void toModelType_invalidQuestion_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        JsonAdaptedFlashcard flashcard \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                new JsonAdaptedFlashcard(INVALID_QUESTION, VALID_ANSWER, VALID_TAG);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        String expectedMessage \u003d Question.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, flashcard::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void toModelType_nullQuestion_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        JsonAdaptedFlashcard flashcard \u003d new JsonAdaptedFlashcard(null, VALID_ANSWER, VALID_TAG);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Question.class.getSimpleName());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, flashcard::toModelType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public void toModelType_invalidAnswer_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        JsonAdaptedFlashcard flashcard \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                new JsonAdaptedFlashcard(VALID_QUESTION, INVALID_ANSWER, VALID_TAG);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        String expectedMessage \u003d Answer.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, flashcard::toModelType);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public void toModelType_nullAnswer_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        JsonAdaptedFlashcard flashcard \u003d new JsonAdaptedFlashcard(VALID_QUESTION, null, VALID_TAG);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Answer.class.getSimpleName());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, flashcard::toModelType);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public void toModelType_invalidTag_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        JsonAdaptedFlashcard flashcard \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "                new JsonAdaptedFlashcard(VALID_QUESTION, VALID_ANSWER, INVALID_TAG);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        String expectedMessage \u003d Tag.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, flashcard::toModelType);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 11,
      "pengxiangg": 12,
      "chuyouchia": 7,
      "foongsq": 7,
      "-": 24,
      "Sruthisarav": 8
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/storage/JsonFlashNotesStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import static seedu.flashnotes.testutil.TypicalFlashcards.WHAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import static seedu.flashnotes.testutil.TypicalFlashcards.WHAT_IS_MEIER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import static seedu.flashnotes.testutil.TypicalFlashcards.WHO_IS_MEIER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import static seedu.flashnotes.testutil.TypicalFlashcards.getTypicalFlashNotes;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import seedu.flashnotes.model.FlashNotes;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.ReadOnlyFlashNotes;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import seedu.flashnotes.model.deck.UniqueDeckList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class JsonFlashNotesStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            \"data\", \"JsonFlashNotesStorageTest\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void readFlashNotes_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readFlashNotes(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private java.util.Optional\u003cReadOnlyFlashNotes\u003e readFlashNotes(String filePath) throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return new JsonFlashNotesStorage(Paths.get(filePath)).readFlashNotes(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertFalse(readFlashNotes(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readFlashNotes(\"notJsonFormatFlashNotes.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void readFlashNotes_invalidFlashcardFlashNotes_throwDataConversionException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readFlashNotes(\"invalidFlashcard.json\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void readFlashNotes_invalidDeckFlashNotes_throwDataConversionException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readFlashNotes(\"invalidDeck.json\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void readFlashNotes_invalidAndValidFlashcardFlashNotes_throwDataConversionException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertThrows(DataConversionException"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                .class, () -\u003e readFlashNotes(\"invalidAndValidFlashcard.json\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void readAndSaveFlashNotes_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempFlashNotes.json\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        FlashNotes original \u003d getTypicalFlashNotes();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        UniqueDeckList originalDecks \u003d original.getUniqueDeckList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        JsonFlashNotesStorage jsonFlashNotesStorage \u003d new JsonFlashNotesStorage(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        jsonFlashNotesStorage.saveFlashNotes(original, filePath, originalDecks);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        ReadOnlyFlashNotes readBack \u003d jsonFlashNotesStorage.readFlashNotes(filePath).get();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertEquals(original, new FlashNotes(readBack));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        original.addFlashcard(WHO_IS_MEIER);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        original.removeFlashcard(WHAT);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        original \u003d new FlashNotes(original); //todo remove this line when proper deck impl is up - PX"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        jsonFlashNotesStorage.saveFlashNotes(original, filePath, original.getUniqueDeckList());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        readBack \u003d jsonFlashNotesStorage.readFlashNotes(filePath).get();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertEquals(original, new FlashNotes(readBack));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        original.addFlashcard(WHAT_IS_MEIER);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        original \u003d new FlashNotes(original); //todo remove this line when proper deck impl is up - PX"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        jsonFlashNotesStorage.saveFlashNotes(original, original.getUniqueDeckList()); // file path not specified"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        readBack \u003d jsonFlashNotesStorage.readFlashNotes().get(); // file path not specified"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertEquals(original, new FlashNotes(readBack));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void saveFlashNotes_nullFlashNotes_throwsNullPointerException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveFlashNotes(null,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Saves {@code flashNotes} at the specified {@code filePath}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private void saveFlashNotes(ReadOnlyFlashNotes flashNotes, UniqueDeckList decks, String filePath) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            new JsonFlashNotesStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    .saveFlashNotes(flashNotes, addToTestDataPathIfNotNull(filePath), decks);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void saveFlashNotes_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveFlashNotes(new FlashNotes(), new UniqueDeckList(),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                null));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 61,
      "chuyouchia": 63
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/storage/JsonSerializableFlashNotesTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import static seedu.flashnotes.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import seedu.flashnotes.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import seedu.flashnotes.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import seedu.flashnotes.model.FlashNotes;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import seedu.flashnotes.model.deck.Deck;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import seedu.flashnotes.testutil.TypicalFlashcards;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class JsonSerializableFlashNotesTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            \"data\", \"JsonSerializableFlashNotesTest\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private static final Path TYPICAL_FLASHCARDS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalFlashcards.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private static final Path INVALID_FLASHCARD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidFlashcard.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private static final Path DUPLICATE_FLASHCARD_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateFlashcard.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private static final Path INVALID_DECK_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidDeck.json\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private static final Path RESERVED_DECK_FILE \u003d TEST_DATA_FOLDER.resolve(\"reservedDeck.json\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void toModelType_typicalFlashcardsFile_success() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        JsonSerializableFlashNotes dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_FLASHCARDS_FILE,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                JsonSerializableFlashNotes.class).get();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        FlashNotes flashNotesFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        FlashNotes typicalFlashcardsFlashNotes \u003d TypicalFlashcards.getTypicalFlashNotes();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        System.out.println(flashNotesFromFile);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        System.out.println(typicalFlashcardsFlashNotes);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertEquals(flashNotesFromFile, typicalFlashcardsFlashNotes);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void toModelType_invalidFlashcardFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        JsonSerializableFlashNotes dataFromFile \u003d JsonUtil.readJsonFile(INVALID_FLASHCARD_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                JsonSerializableFlashNotes.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void toModelType_duplicateFlashcards_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        JsonSerializableFlashNotes dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_FLASHCARD_FILE,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                JsonSerializableFlashNotes.class).get();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableFlashNotes.MESSAGE_DUPLICATE_FLASHCARD,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void toModelType_invalidDeckFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        JsonSerializableFlashNotes dataFromFile \u003d JsonUtil.readJsonFile(INVALID_DECK_FILE,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                JsonSerializableFlashNotes.class).get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void toModelType_reservedDeck_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        JsonSerializableFlashNotes dataFromFile \u003d JsonUtil.readJsonFile(RESERVED_DECK_FILE,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                JsonSerializableFlashNotes.class).get();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertThrows(IllegalValueException.class, Deck.MESSAGE_CONSTRAINTS_RESERVED,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 51,
      "chuyouchia": 18
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        userPrefs.setFlashNotesFilePath(Paths.get(\"flashnotes.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 2,
      "chuyouchia": 6,
      "-": 116
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import static seedu.flashnotes.testutil.TypicalFlashcards.getTypicalFlashNotes;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import seedu.flashnotes.model.FlashNotes;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import seedu.flashnotes.model.ReadOnlyFlashNotes;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        JsonFlashNotesStorage flashNotesStorage \u003d new JsonFlashNotesStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        storageManager \u003d new StorageManager(flashNotesStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void flashNotesReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        * {@link JsonFlashNotesStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        * More extensive testing of UserPref saving/reading is done in {@link JsonFlashNotesStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        * */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        FlashNotes original \u003d getTypicalFlashNotes();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        storageManager.saveFlashNotes(original, original.getUniqueDeckList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        ReadOnlyFlashNotes retrieved \u003d storageManager.readFlashNotes().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertEquals(original, new FlashNotes(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void getFlashNotesFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertNotNull(storageManager.getFlashNotesFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 12,
      "chuyouchia": 7,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/testutil/Assert.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)},"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * to maintain consistency with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 2,
      "chuyouchia": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/testutil/EditFlashcardDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import seedu.flashnotes.logic.commands.EditCardCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.Answer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.Question;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rachel170"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * A utility class to help with building EditFlashcardDescriptor objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rachel170"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rachel170"
        },
        "content": "public class EditFlashcardDescriptorBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    private EditCardCommand.EditFlashcardDescriptor descriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public EditFlashcardDescriptorBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        descriptor \u003d new EditCardCommand.EditFlashcardDescriptor();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public EditFlashcardDescriptorBuilder(EditCardCommand.EditFlashcardDescriptor descriptor) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        this.descriptor \u003d new EditCardCommand.EditFlashcardDescriptor(descriptor);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Returns an {@code EditFlashcardDescriptor} with fields containing {@code flashcard}\u0027s details"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public EditFlashcardDescriptorBuilder(Flashcard flashcard) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        descriptor \u003d new EditCardCommand.EditFlashcardDescriptor();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        descriptor.setQuestion(flashcard.getQuestion());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        descriptor.setAnswer(flashcard.getAnswer());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        descriptor.setTag(flashcard.getTag());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Sets the {@code Question} of the {@code EditFlashcardDescriptor} that we are building."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public EditFlashcardDescriptorBuilder withQuestion(String question) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        descriptor.setQuestion(new Question(question));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Sets the {@code Answer} of the {@code EditFlashcardDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public EditFlashcardDescriptorBuilder withAnswer(String answer) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        descriptor.setAnswer(new Answer(answer));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditFlashcardDescriptor}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public EditFlashcardDescriptorBuilder withTag(String tag) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        descriptor.setTag(new Tag(tag));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public EditCardCommand.EditFlashcardDescriptor build() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rachel170"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 48,
      "pengxiangg": 3,
      "chuyouchia": 5,
      "Sruthisarav": 7
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/testutil/FlashNotesBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.FlashNotes;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " * A utility class to help with building FlashNotes objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " *     {@code FlashNotes ab \u003d new FlashNotesBuilder().withFlashcard(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class FlashNotesBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private FlashNotes flashNotes;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public FlashNotesBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        flashNotes \u003d new FlashNotes();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public FlashNotesBuilder(FlashNotes flashNotes) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        this.flashNotes \u003d flashNotes;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**a"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Adds a new {@code Flashcard} to the {@code FlashNotes} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public FlashNotesBuilder withFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        flashNotes.addFlashcard(flashcard);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public FlashNotes build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return flashNotes;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 34
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/testutil/FlashcardBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.Answer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.Question;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * A utility class to help with building Flashcard objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rachel170"
        },
        "content": "public class FlashcardBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static final String DEFAULT_QUESTION \u003d \"Who am I?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public static final String DEFAULT_ANSWER \u003d \"85355255\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public static final String DEFAULT_TAG \u003d \"singapore\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private Question question;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    private Answer answer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    private Tag tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Creates a {@code FlashcardBuilder} with the default details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public FlashcardBuilder() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        question \u003d new Question(DEFAULT_QUESTION);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        answer \u003d new Answer(DEFAULT_ANSWER);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        tag \u003d new Tag(DEFAULT_TAG);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Initializes the FlashcardBuilder with the data of {@code flashcardToCopy}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public FlashcardBuilder(Flashcard flashcardToCopy) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        question \u003d flashcardToCopy.getQuestion();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        answer \u003d flashcardToCopy.getAnswer();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        tag \u003d flashcardToCopy.getTag();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Sets the {@code Question} of the {@code Flashcard} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public FlashcardBuilder withQuestion(String question) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.question \u003d new Question(question);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Flashcard} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public FlashcardBuilder withTag(String tag) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        this.tag \u003d new Tag(tag);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Sets the {@code Answer} of the {@code Flashcard} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public FlashcardBuilder withAnswer(String answer) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        this.answer \u003d new Answer(answer);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public Flashcard build() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        return new Flashcard(question, answer, tag);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 14,
      "pengxiangg": 6,
      "chuyouchia": 5,
      "foongsq": 4,
      "-": 33,
      "Sruthisarav": 6
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/testutil/FlashcardUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import seedu.flashnotes.logic.commands.AddCardCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "import seedu.flashnotes.logic.commands.EditCardCommand.EditFlashcardDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * A utility class for Flashcard."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rachel170"
        },
        "content": "public class FlashcardUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Returns an add command string for adding the {@code flashcard}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "    public static String getAddCardCommand(Flashcard flashcard) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        return AddCardCommand.COMMAND_WORD + \" \" + getFlashcardDetails(flashcard);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Returns the part of command string for the given {@code flashcard}\u0027s details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public static String getFlashcardDetails(Flashcard flashcard) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        sb.append(PREFIX_QUESTION + flashcard.getQuestion().question + \" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        sb.append(PREFIX_ANSWER + flashcard.getAnswer().value + \" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        //sb.append(PREFIX_TAG + flashcard.getTag().tagName + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Returns the part of command string for the given {@code EditFlashcardDescriptor}\u0027s details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public static String getEditFlashcardDescriptorDetails(EditFlashcardDescriptor descriptor) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        descriptor.getQuestion().ifPresent(question -\u003e sb.append(PREFIX_QUESTION)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                .append(question.question).append(\" \"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sruthisarav"
        },
        "content": "        descriptor.getAnswer().ifPresent(answer -\u003e sb.append(PREFIX_ANSWER).append(answer.value).append(\" \"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "        descriptor.getTag().ifPresent(tag -\u003e sb.append(PREFIX_TAG).append(tag.tagName).append(\" \"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 9,
      "pengxiangg": 2,
      "chuyouchia": 5,
      "foongsq": 2,
      "-": 21,
      "Sruthisarav": 6
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/testutil/SerializableTestClass.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Returns the middle index of the flashcard in the {@code model}\u0027s flashcard list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return Index.fromOneBased(model.getFilteredFlashcardList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Returns the last index of the flashcard in the {@code model}\u0027s flashcard list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return Index.fromOneBased(model.getFilteredFlashcardList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Returns the flashcard in the {@code model}\u0027s flashcard list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public static Flashcard getFlashcard(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return model.getFilteredFlashcardList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 7,
      "chuyouchia": 4,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/testutil/TypicalDecks.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.deck.Deck;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " * A utility class containing a list of {@code Deck} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class TypicalDecks {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public static final Deck VALID_DECK_1 \u003d new Deck(\"Test Deck\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public static final Deck VALID_DECK_2 \u003d new Deck (\"Test Deck 2\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private TypicalDecks() {} // prevents instantiation"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public static List\u003cDeck\u003e getTypicalDecks() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(VALID_DECK_2, VALID_DECK_1));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 22
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/testutil/TypicalFlashcards.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.VALID_ANSWER_MACROECONS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.VALID_ANSWER_SKY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.VALID_QUESTION_MACROECONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.VALID_QUESTION_SKY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "import static seedu.flashnotes.logic.commands.CommandTestUtil.VALID_TAG_DEFAULT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.FlashNotes;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.deck.Deck;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rachel170"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * A utility class containing a list of {@code Flashcard} objects to be used in tests."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rachel170"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rachel170"
        },
        "content": "public class TypicalFlashcards {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public static final Flashcard WHO \u003d new FlashcardBuilder().withQuestion(\"Who\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            .withAnswer(\"me\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            .withTag(\"friends\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public static final Flashcard WHAT \u003d new FlashcardBuilder().withQuestion(\"What\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            .withAnswer(\"idk\").withTag(\"owesMoney\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public static final Flashcard WHY \u003d new FlashcardBuilder().withQuestion(\"Why\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            .withAnswer(\"because someone has to\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            .withTag(\"friends\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public static final Flashcard HOW \u003d new FlashcardBuilder().withQuestion(\"How\").withAnswer(\"use your hands\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            .withTag(\"friends\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public static final Flashcard WHEN \u003d new FlashcardBuilder().withQuestion(\"When\").withAnswer(\"at 2pm\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            .withTag(\"Time\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public static final Flashcard WHERE \u003d new FlashcardBuilder().withQuestion(\"Where\").withAnswer(\"at home\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            .withTag(\"Place\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public static final Flashcard HOW_MUCH \u003d new FlashcardBuilder().withQuestion(\"How much\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            .withAnswer(\"300 apples\").withTag(\"Math\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public static final Flashcard WHO_IS_MEIER \u003d new FlashcardBuilder().withQuestion(\"who is meier\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            .withAnswer(\"8482424\").withTag(\"test\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public static final Flashcard WHAT_IS_MEIER \u003d new FlashcardBuilder().withQuestion(\"what is meier\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            .withAnswer(\"8482131\").withTag(\"test\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    // Manually added - Flashcard\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public static final Flashcard SKY \u003d new FlashcardBuilder().withQuestion(VALID_QUESTION_SKY)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            .withAnswer(VALID_ANSWER_SKY)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            .withTag(VALID_TAG_DEFAULT).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "    public static final Flashcard MACROECONS \u003d new FlashcardBuilder().withQuestion(VALID_QUESTION_MACROECONS)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            .withAnswer(VALID_ANSWER_MACROECONS)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pengxiangg"
        },
        "content": "            .withTag(VALID_TAG_DEFAULT).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private TypicalFlashcards() {} // prevents instantiation"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Returns an {@code FlashNotes} with all the typical flashcards."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public static FlashNotes getTypicalFlashNotes() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        FlashNotes ab \u003d new FlashNotes();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        for (Flashcard flashcard : getTypicalFlashcards()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            ab.addFlashcard(flashcard);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        for (Deck deck: getTypicalDecks()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            ab.addDeck(deck);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public static List\u003cDeck\u003e getTypicalDecks() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Deck friends \u003d new Deck (\"friends\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        friends.setResultStatistics(\"3.3\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Deck oweMoney \u003d new Deck (\"owesMoney\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        oweMoney.setResultStatistics(\"-1.0\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Deck time \u003d new Deck(\"Time\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        time.setResultStatistics(\"0.0\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        Deck place \u003d new Deck(\"Place\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        place.setResultStatistics(\"100.0\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Deck math \u003d new Deck(\"Math\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        math.setResultStatistics(\"75.0\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(friends, oweMoney, time, place, math));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public static List\u003cFlashcard\u003e getTypicalFlashcards() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(WHO, WHAT, WHY, HOW, WHEN, WHERE, HOW_MUCH));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rachel170"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 47,
      "pengxiangg": 24,
      "chuyouchia": 19
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public static final Index INDEX_FIRST_FLASHCARD \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public static final Index INDEX_SECOND_FLASHCARD \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public static final Index INDEX_THIRD_FLASHCARD \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 3,
      "chuyouchia": 2,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/ui/TestFxmlObject.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/flashnotes/ui/UiPartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package seedu.flashnotes.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static seedu.flashnotes.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import seedu.flashnotes.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 3,
      "-": 111
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003c?import seedu.flashnotes.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003cfx:root type\u003d\"seedu.flashnotes.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 1,
      "-": 5
    }
  }
]
