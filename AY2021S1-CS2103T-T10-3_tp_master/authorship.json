[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seowalex"
        },
        "content": "# ChopChop"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/se-edu/addressbook-level3/actions)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-T10-3/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-T10-3/tp)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "## ChopChop"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "* This project is a food recipe management system that aims to make it easier for people to manage their recipes and ingredients."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Example usages:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "\t* NUS students living on campus aiming to cook more to save money"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "\t* Home cooks trying to cook a wider variety of meals"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "* The project is implemented as a command-line application in Java, written primarily in OOP."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "\t* The application is written to be extremely modular, to make it easier for multiple people to contribute to the project at once."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "\t* User guides and developer guides are also provided for users and developers to quickly get up to speed on the project"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "* The name “ChopChop” comes from a Cantonese phrase that means to “hurry up”, reflecting the speed in which users can use our application to manage their recipes. It’s also related to the act of chopping, a common action in the kitchen."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "* For the detailed documentation of this project, see the Address Book Product Website."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "For more information, check out **[ChopChop Product Website](https://ay2021s1-cs2103t-t10-3.github.io/tp/)**"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 16,
      "seowalex": 2,
      "-": 5
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "mainClassName \u003d \u0027chopchop.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // showStandardStreams \u003d true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "tasks.withType(JavaCompile) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    options.compilerArgs \u003c\u003c \"-Xdiags:verbose\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    options.compilerArgs \u003c\u003c \"-Xlint:unchecked\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    archiveName \u003d \u0027chopchop.jar\u0027"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "hjl99": 2,
      "zhiayang": 7,
      "-": 72
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "You can reach us at the email `seer[at]comp.nus.edu.sg`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### Ng Zhia Yang"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cimg src\u003d\"images/zhiayang.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "[[github](http://github.com/zhiayang)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "* Role: Technical Lead"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "* Responsibilities: Command UI and Parser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seowalex"
        },
        "content": "### Seow Alex"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seowalex"
        },
        "content": "\u003cimg src\u003d\"images/seowalex.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seowalex"
        },
        "content": "[[github](http://github.com/seowalex)]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seowalex"
        },
        "content": "* Role: Code quality/Integration"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "### Travis Toh"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "\u003cimg src\u003d\"images/trav1st.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "[[github](http://github.com/trav1st)]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "* Role: Testing / Deliverables and Deadlines"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fall9x"
        },
        "content": "### Teh Xue Yong"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003cimg src\u003d\"images/fall9x.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fall9x"
        },
        "content": "[[github](http://github.com/fall9x)]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fall9x"
        },
        "content": "* Role: Testing / Documentation"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "### He Jialei"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "\u003cimg src\u003d\"images/hjl99.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "[[github](http://github.com/hjl99)]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": "* Role: Deliverables and Deadlines / Scheduling and Tracking"
      }
    ],
    "authorContributionMap": {
      "hjl99": 4,
      "zhiayang": 5,
      "Trav1sT": 5,
      "seowalex": 4,
      "-": 34,
      "fall9x": 4
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the address book data."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the address book data in json format and read it back."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` — Saves the current address book state in its history."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "seowalex"
        },
        "content": "**Target user profile**: People that cook daily, who need a way to manage recipes and their fridge contents."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "seowalex"
        },
        "content": "**Value proposition**: Manages recipes and fridge inventory/expiry, and automatically suggests recipes to cook."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "seowalex"
        },
        "content": "| Priority | As a ...                              | I want to ...                                                                     | So that I can ...                                      |"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "seowalex"
        },
        "content": "| -------- | ------------------------------------- | --------------------------------------------------------------------------------- | ------------------------------------------------------ |"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "seowalex"
        },
        "content": "| `* * *`  | person learning how to cook           | view my recipes                                                                   | not get the instructions wrong                         |"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "seowalex"
        },
        "content": "| `* * *`  | forgetful home cook                   | record recipes that I learnt from my friends and television shows                 | try to cook them in the future                         |                                                                        |"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "seowalex"
        },
        "content": "| `* * *`  | person that cannot decide             | select recipes to cook automatically based on the ingredients that i have         | eat a wider variety of meals                           |"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "seowalex"
        },
        "content": "| `* *`    | home cook who buys a lot of groceries | Enter the long list of products that I have bought while referring to the receipt | I can easily enter a large number of groceries at once |"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "seowalex"
        },
        "content": "| `* *`    | person on a diet                      | sort recipes based on calorie count                                               | choose to cook lower-calorie meals                     |"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "seowalex"
        },
        "content": "| `*`      | busy mother                           | enter the list of recipes I want to cook for the week                             | find out which groceries I need to buy                 |"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "hjl99"
        },
        "content": "(For all use cases below, the **System** is the `Food Recipe Management System (FRMS)` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**Use case: U1 - Add recipe**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "fall9x"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "hjl99"
        },
        "content": "1. User chooses to add a recipe."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "hjl99"
        },
        "content": "2. User enters the details according to the format."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "hjl99"
        },
        "content": "3. FRMS displays a confirmation message with the new recipe."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    Use case ends. "
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "fall9x"
        },
        "content": "**Extensions:**  "
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "fall9x"
        },
        "content": "* 2a. FRMS detects invalid input format."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    * 2a1. FRMS displays error messages."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a2. User enters new data. "
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "hjl99"
        },
        "content": "\t     Steps a-b are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "hjl99"
        },
        "content": "\t      User case resumes from step 3."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "hjl99"
        },
        "content": "* 2b. FRMS detects a duplicate recipe."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a1. FRMS displays error messages."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a2. User enters new data. "
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\t     Steps a-b are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\t      User case resumes from step 3.\t      "
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**Use case: U2 - Delete recipe**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "fall9x"
        },
        "content": "**MSS:** "
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "hjl99"
        },
        "content": "1. User chooses to delete a recipe."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "hjl99"
        },
        "content": "2. User enters the recipe name."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "hjl99"
        },
        "content": "3. FRMS displays a confirmation message."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    Use case ends. "
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**Extensions:**  "
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "fall9x"
        },
        "content": "* 2a. FRMS detects invalid input format."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    * 2a1. FRMS displays error messages."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    * 2a2. User enters new data. "
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\t     Steps a-b are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\t      User case resumes from step 3."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "hjl99"
        },
        "content": "* 2b. FRMS detects invalid input of recipe name."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a1. FRMS displays error messages."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a2. User enters new data. "
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\t     Steps a-b are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\t      User case resumes from step 3."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**Use case: U3 - View recipe**"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "fall9x"
        },
        "content": "**MSS:** "
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "hjl99"
        },
        "content": "1. User chooses to view all recipes."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "hjl99"
        },
        "content": "2. User requests for the recipes."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "hjl99"
        },
        "content": "3. FRMS display all the recipes."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    Use case ends. "
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "fall9x"
        },
        "content": "**Extensions:**  "
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "fall9x"
        },
        "content": "* 2a. FRMS detects invalid input format."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    * 2a1. FRMS displays error messages."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a2. User enters data according to the correct format."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\t     Steps a-b are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\t      User case resumes from step 3."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**Use case: U4 - Filter recipes**"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**MSS:** "
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "hjl99"
        },
        "content": "1. User chooses to view a list of filtered recipes."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "hjl99"
        },
        "content": "2. User enters the filter conditions."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "hjl99"
        },
        "content": "3. FMRS displays a filtered list of recipes."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    Use case ends. "
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "fall9x"
        },
        "content": "**Extensions:**  "
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "fall9x"
        },
        "content": "* 2a. FRMS detects invalid input format."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    * 2a1. FRMS displays error messages."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    * 2a2. User enters new data. "
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\t     Steps a-b are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\t      User case resumes from step 3."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "hjl99"
        },
        "content": "* 2b. Filtered list does not contain any recipes."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    * 2a1. FRMS displays error messages."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    * 2a2. User enters new data. "
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\t     Steps a-b are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\t      User case resumes from step 3."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**Use case: U5 - List ingredients**"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "fall9x"
        },
        "content": "**MSS:** "
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "hjl99"
        },
        "content": "1. User chooses to view all ingredients."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "hjl99"
        },
        "content": "2. User inputs the command to request for the ingredients."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "hjl99"
        },
        "content": "3. FRMS shows the confirmation message and displays the complete list of ingredients."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    Use case ends. "
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     "
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**Extensions:**  "
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "fall9x"
        },
        "content": "* 2a. FRMS detects invalid input format."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    * 2a1. FRMS displays error messages."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a2. User enters data according to the correct format.  "
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\t     Steps a-b are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\t      User case resumes from step 3."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**Use case: U6 - Add Ingredient**"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "hjl99"
        },
        "content": "1. User chooses to add an ingredient."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "hjl99"
        },
        "content": "2. User enters the details according to the format."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "hjl99"
        },
        "content": "3. FRMS displays a confirmation message with the new ingredient."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**Extensions:**"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "hjl99"
        },
        "content": "* 2a. FRMS detects invalid input format."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a1. FRMS displays error messages."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a2. User enters new data.  "
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "hjl99"
        },
        "content": "      Steps a-b are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "hjl99"
        },
        "content": "\t      User case resumes from step 3.  "
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "hjl99"
        },
        "content": "* 2b. FRMS detects a duplicate ingredient."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2b1. FRMS displays error messages."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2b2. User enters new data.  "
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "hjl99"
        },
        "content": "      Steps a-b are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "hjl99"
        },
        "content": "\t      User case resumes from step 3.  "
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**Use case: U7 - Delete Ingredient**"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "hjl99"
        },
        "content": "1. User chooses to delete an ingredient."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "hjl99"
        },
        "content": "2. User enters the details according to the format."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "hjl99"
        },
        "content": "3. FRMS displays a confirmation message."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**Extensions:**"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "hjl99"
        },
        "content": "* 2a. FRMS detects invalid input format."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a1. FRMS displays error messages."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a2. User enters new data.  "
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "hjl99"
        },
        "content": "      Steps a-b are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "hjl99"
        },
        "content": "\t      User case resumes from step 3.  "
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "hjl99"
        },
        "content": "* 2b. FRMS detects invalid input of ingredient name."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2b. FRMS displays error messages."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2b. User enters new data.  "
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "hjl99"
        },
        "content": "      Steps a-b are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "hjl99"
        },
        "content": "\t      User case resumes from step 3.  "
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**Use case: U8 - View expiring ingredients** "
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "hjl99"
        },
        "content": "1. User chooses to view a list of expiring ingredients."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "hjl99"
        },
        "content": "2. User enters the date range."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "hjl99"
        },
        "content": "3. FMRS displays a filtered list of expiring ingredients."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**Extensions:**"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "hjl99"
        },
        "content": "* 2a. FRMS detects invalid input format."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a1. FRMS displays error messages."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a2. User enters new data.  "
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "hjl99"
        },
        "content": "      Steps a-b are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "hjl99"
        },
        "content": "\t      User case resumes from step 3.  "
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "hjl99"
        },
        "content": "* 2b. Filtered list does not contain any ingredients in the date range."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a1. FRMS displays error messages."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a2. User enters new data.  "
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "hjl99"
        },
        "content": "      Steps a-b are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "hjl99"
        },
        "content": "\t      User case resumes from step 3."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**Use case: U9 - Filter ingredients**"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "hjl99"
        },
        "content": " "
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "hjl99"
        },
        "content": "1. User chooses to view a list of filtered ingredients."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "hjl99"
        },
        "content": "2. User enters the filter conditions."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "hjl99"
        },
        "content": "3. FMRS displays a filtered list of ingredients."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**Extensions:**"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "hjl99"
        },
        "content": "* 2a. FRMS detects invalid input format."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a1. FRMS displays error messages."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a2. User enters new data.  "
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "hjl99"
        },
        "content": "      Steps a-b are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "hjl99"
        },
        "content": "\t      User case resumes from step 3.  "
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "hjl99"
        },
        "content": "* 2b. Filtered list does not contain any ingredients."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a1. FRMS displays error messages."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a2. User enters new data.  "
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "hjl99"
        },
        "content": "      Steps a-b are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "hjl99"
        },
        "content": "\t      User case resumes from step 3.      "
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "seowalex"
        },
        "content": "1. Should work on any mainstream OS as long as it has Java 11 or above installed."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "2. Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "3. A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "seowalex"
        },
        "content": "4. Should be able to add multiple recipes at once"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "seowalex"
        },
        "content": "5. Should have autocompletion for commands"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "seowalex"
        },
        "content": "6. Should be able to fuzzy search for recipes/food"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "seowalex"
        },
        "content": "7. Should be able to manage recipes in a interactive manner (like Google Assistant)"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "seowalex"
        },
        "content": "8. Should have input sanitisation"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "seowalex"
        },
        "content": "* **Mainstream OS:** Latest version of Windows, MacOS or any Linux distro"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "seowalex"
        },
        "content": "* **Recipe:** List of ingredients and steps needed to cook a dish"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "### Deleting a person"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "1. Deleting a person while all persons are being shown"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "hjl99": 130,
      "seowalex": 18,
      "-": 320,
      "fall9x": 51
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "ChopChop is a **desktop app for managing recipes and ingredients, optimised for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, ChopChop can manage your items faster than traditional GUI apps."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick start"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "1. Download the latest `chopchop.jar` from [here](https://github.com/AY2021S1-CS2103T-T10-3/tp/releases)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "1. Copy the file to the folder you want to use as the _home folder_ for your ChopChop."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "   * **`list recipes`** : Lists recipes."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "   * **`add recipe Milkshake /ingredient Milk /qty 500ml /step Pour Milk /step Shake`** : Adds a recipe for making milkshakes, with one ingredient and two steps."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`exit`** : Exits the app."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. Refer to the [Features](#features) below for details of each command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:** \u003cbr\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "* Words in UPPER_CASE are the parameters to be supplied by the user. \u003cbr\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "  eg. `add recipe NAME /ingredient INGREDIENT`, `NAME` and `INGREDIENT` are parameters supplied by the user."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "* Items in [square brackets] are optional. \u003cbr\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "  eg. `add ingredient NAME [/qty QUANTITY]` can be used as `add ingredient Eggs /qty 4` or as `add ingredient Eggs /qty 4`."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "* Items with `...` after them can be used multiple times. \u003cbr\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "* A `\u003cREFERENCE\u003e` is used to refer to either an ingredient or a recipe. To refer to something by name, just type the full"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\tname (case insensitive). However, it is often more convenient to refer to things by their number, especially when looking"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\tat a filtered view. In that case, use `#NUMBER` (eg. `#7` to refer to the 7th item in the list)."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "### Viewing help : `help`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a message explaning how to access the help page."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "![help message](images/helpMessage.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### Listing all recipes: **`list`** `recipes`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Shows a list of all recipes in the recipe manager."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Format: `list recipes`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### Adding recipe: **`add`** `recipe`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Adds a recipe to the recipe manager."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Format: `add recipe \u003cREFERENCE\u003e [/ingredient INGREDIENT [/qty QTY1]...]... (/step STEP)...`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### Deleting recipe: **`delete`** `recipe`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Deletes a specific recipe from the recipe manager."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Format: `delete recipe NAME`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### Finding recipes: **`find`** `recipe`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Finds all recipes containing the given keywords in the name."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Format: `find recipe KEYWORDS [MORE_KEYWORDS]...`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "The search is case-insensitive. e.g henz will match Henz"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Only the name is searched, and only substrings will be matched."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### Listing all ingredients: **`list`** `ingredients`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Shows a list of all ingredients in the recipe manager."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Format: `list ingredients`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### Adding ingredient: **`add`** `ingredient`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Adds an ingredient to the recipe manager"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Format: `add ingredient NAME [/qty QUANTITY] [/expiry DATE]`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### Deleting ingredient: **`delete`** `ingredient`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Deletes a specific ingredient from the recipe manager."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Format: `delete ingredient NAME`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### Using ingredient: **`use`**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Removes the given quantity of the specified ingredient from the internal inventory."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Format: `use \u003cREFERENCE\u003e /qty QUANTITY`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### Finding ingredients: **`find`** `ingredient`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Finds ingredients containing the given keywords in the name."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Format: `find ingredient KEYWORDS [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "The search is case-insensitive. e.g cheese will match Cheese"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Only the name is searched, and only substrings will be matched."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### Exiting the program: **`exit`**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Format: `exit`"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 54,
      "-": 93
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "# ChopChop"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/se-edu/addressbook-level3/actions)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-T10-3/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-T10-3/tp)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "## ChopChop"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "* This project is a food recipe management system that aims to make it easier for people to manage their recipes and ingredients."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "Example usages:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "\t* NUS students living on campus aiming to cook more to save money"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "\t* Home cooks trying to cook a wider variety of meals"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "* The project is implemented as a command-line application in Java, written primarily in OOP."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "\t* The application is written to be extremely modular, to make it easier for multiple people to contribute to the project at once."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "\t* User guides and developer guides are also provided for users and developers to quickly get up to speed on the project"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "* The name “ChopChop” comes from a Cantonese phrase that means to “hurry up”, reflecting the speed in which users can use our application to manage their recipes. It’s also related to the act of chopping, a common action in the kitchen."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "* For the detailed documentation of this project, see the Address Book Product Website."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "For more information, check out **[ChopChop Product Website](https://ay2021s1-cs2103t-t10-3.github.io/tp/)**"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 15,
      "-": 8
    }
  },
  {
    "path": "src/main/java/chopchop/AppParameters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 64
    }
  },
  {
    "path": "src/main/java/chopchop/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 25
    }
  },
  {
    "path": "src/main/java/chopchop/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.IngredientBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.ReadOnlyIngredientBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.recipe.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.recipe.RecipeBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.storage.IngredientBookStorage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.storage.JsonIngredientBookStorage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.storage.JsonRecipeBookStorage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.storage.RecipeBookStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.ui.UiManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.core.Config;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.core.Version;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.util.StringUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.logic.Logic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.logic.CommandDispatcher;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ModelManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.UserPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.storage.Storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.storage.StorageManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.ui.Ui;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        IngredientBookStorage ingredientBookStorage \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            new JsonIngredientBookStorage(userPrefs.getIngredientBookFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        RecipeBookStorage recipeBookStorage \u003d new JsonRecipeBookStorage(userPrefs.getRecipeBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        storage \u003d new StorageManager(ingredientBookStorage, recipeBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        logic \u003d new CommandDispatcher(model, storage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s ingredient and recipe book"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * The data from the sample ingredient or recipe book will be used instead if {@code storage}\u0027s"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * ingredient or recipe book is not found,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * or an empty ingredient or recipe book will be used instead if errors occur when reading"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * {@code storage}\u0027s ingredient or recipe book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        Optional\u003cReadOnlyIngredientBook\u003e ingredientBookOptional;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        Optional\u003cReadOnlyRecipeBook\u003e recipeBookOptional;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        ReadOnlyIngredientBook initialIndData;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        ReadOnlyRecipeBook initialRecData;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            ingredientBookOptional \u003d storage.readIngredientBook();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            if (!ingredientBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                logger.info(\"Data file for ingredient book not found. Will be starting with a sample IndBook\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            recipeBookOptional \u003d storage.readRecipeBook();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            initialIndData \u003d ingredientBookOptional.orElseGet(SampleDataUtil::getSampleIngredientBook);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            if (!recipeBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                logger.info(\"Data file for recipe book not found. Will be starting with a sample RecBook\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            initialRecData \u003d recipeBookOptional.orElseGet(SampleDataUtil::getSampleRecipeBook);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            initialIndData \u003d new IngredientBook();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            initialRecData \u003d new RecipeBook();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            initialIndData \u003d new IngredientBook();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            initialRecData \u003d new RecipeBook();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return new ModelManager(initialRecData, initialIndData, userPrefs);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                + \"Using default config properties\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                + \"Using default user prefs\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 142,
      "Trav1sT": 58,
      "fall9x": 5
    }
  },
  {
    "path": "src/main/java/chopchop/commons/core/Config.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 63
    }
  },
  {
    "path": "src/main/java/chopchop/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 928;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Constructs a {@code GuiSettings} with the default height, width and position."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Constructs a {@code GuiSettings} with the specified height, width and position."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 77,
      "fall9x": 2
    }
  },
  {
    "path": "src/main/java/chopchop/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private static final String LOG_FILE \u003d \"addressbook.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 112
    }
  },
  {
    "path": "src/main/java/chopchop/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final String MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX \u003d \"The recipe index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final String MESSAGE_RECIPES_LISTED_OVERVIEW \u003d \"%1$d recipes listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final String MESSAGE_INVALID_INGREDIENT_DISPLAYED_INDEX \u003d \"The ingredient index provided is invalid\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final String MESSAGE_INGREDIENTS_LISTED_OVERVIEW \u003d \"%1$d ingredients listed!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 16,
      "Trav1sT": 1
    }
  },
  {
    "path": "src/main/java/chopchop/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Constructs a {@code Version} with the given version details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 116
    }
  },
  {
    "path": "src/main/java/chopchop/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 54
    }
  },
  {
    "path": "src/main/java/chopchop/commons/exceptions/DataConversionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 11
    }
  },
  {
    "path": "src/main/java/chopchop/commons/exceptions/IllegalValueException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 21
    }
  },
  {
    "path": "src/main/java/chopchop/commons/util/AppUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Gets an {@code Image} from the specified path."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 41,
      "seowalex": 1
    }
  },
  {
    "path": "src/main/java/chopchop/commons/util/CollectionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 35
    }
  },
  {
    "path": "src/main/java/chopchop/commons/util/ConfigUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 21,
      "seowalex": 2
    }
  },
  {
    "path": "src/main/java/chopchop/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 83
    }
  },
  {
    "path": "src/main/java/chopchop/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hjl99"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hjl99"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hjl99"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hjl99"
        },
        "content": "         *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hjl99"
        },
        "content": "         */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 140,
      "Trav1sT": 2
    }
  },
  {
    "path": "src/main/java/chopchop/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import static chopchop.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 67,
      "seowalex": 1
    }
  },
  {
    "path": "src/main/java/chopchop/logic/CommandDispatcher.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package chopchop.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "// import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.model.ingredient.ReadOnlyIngredientBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.recipe.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.storage.Storage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fall9x"
        },
        "content": " * The main CommandDispatcher governing the logic in the app."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fall9x"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class CommandDispatcher implements Logic {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CommandDispatcher.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final CommandParser parser;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Constructs a {@code CommandDispatcher} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public CommandDispatcher(Model model, Storage storage) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.model   \u003d model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.parser  \u003d new CommandParser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Executes the specified command based on the commandText."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var res \u003d this.parser.parse(commandText);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (res.isError()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            throw new ParseException(res.getError());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var cmd \u003d res.getValue();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var result \u003d cmd.execute(this.model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        //     storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // } catch (IOException ioe) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        //     throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public ReadOnlyRecipeBook getRecipeBook() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return model.getRecipeBook();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public ObservableList\u003cRecipe\u003e getFilteredRecipeList() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return model.getFilteredRecipeList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public Path getRecipeBookFilePath() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return model.getRecipeBookFilePath();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public ReadOnlyIngredientBook getIngredientBook() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return model.getIngredientBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public ObservableList\u003cIngredient\u003e getFilteredIngredientList() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return model.getFilteredIngredientList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public Path getIngredientBookFilePath() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return model.getIngredientBookFilePath();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 26,
      "Trav1sT": 1,
      "seowalex": 5,
      "fall9x": 80
    }
  },
  {
    "path": "src/main/java/chopchop/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package chopchop.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.model.ingredient.ReadOnlyIngredientBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.recipe.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Returns the RecipeBook."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    ReadOnlyRecipeBook getRecipeBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Returns the IngredientBook."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    ReadOnlyIngredientBook getIngredientBook();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of recipes."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    ObservableList\u003cRecipe\u003e getFilteredRecipeList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Returns an unmodifiable view of the filtered ingredient list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    ObservableList\u003cIngredient\u003e getFilteredIngredientList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Returns the user prefs\u0027 recipe book file path."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    Path getRecipeBookFilePath();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Returns the user prefs\u0027 ingredient book file path."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    Path getIngredientBookFilePath();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 8,
      "seowalex": 6,
      "fall9x": 59
    }
  },
  {
    "path": "src/main/java/chopchop/logic/commands/AddIngredientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// AddIngredientCommand.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.ingredient.exceptions.IncompatibleIngredientsException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.util.Strings.ARG_EXPIRY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.util.Strings.ARG_QUANTITY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class AddIngredientCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add ingredient\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an ingredient to the manager. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        + \"NAME \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        + ARG_QUANTITY + \"QUANTITY \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        + ARG_EXPIRY + \"EXPIRY \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        + \"\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        + \"Chili \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        + ARG_QUANTITY + \"3\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        + ARG_EXPIRY + \"2020-10-05\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New ingredient added: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static final String MESSAGE_COMBINED \u003d \"Updated ingredient: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_INGREDIENT \u003d \"This ingredient already exists in the ingredient book\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final Ingredient ingredient;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public AddIngredientCommand(Ingredient ingredient) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        requireNonNull(ingredient);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.ingredient \u003d ingredient;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var foo \u003d model.findIngredientWithName(this.ingredient.getName());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (foo.isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var existing \u003d foo.get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                var combined \u003d existing.combine(this.ingredient);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                model.setIngredient(existing, combined);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_COMBINED, combined));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            } catch (IncompatibleIngredientsException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                throw new CommandException(e.toString());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            model.addIngredient(ingredient);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, ingredient));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            || (other instanceof AddIngredientCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \u0026\u0026 ingredient.equals(((AddIngredientCommand) other).ingredient));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return String.format(\"AddIngredientCommand: %s\", this.ingredient);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 3,
      "zhiayang": 46,
      "Trav1sT": 32
    }
  },
  {
    "path": "src/main/java/chopchop/logic/commands/AddRecipeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.util.Strings.ARG_STEP;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.util.Strings.ARG_QUANTITY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.util.Strings.ARG_INGREDIENT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class AddRecipeCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add recipe\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a recipe to the recipe book. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            + \"NAME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            + \"[\" + ARG_INGREDIENT + \"INGREDIENT [\" + ARG_QUANTITY + \" QUANTITY]]...\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            + \"[\" + ARG_STEP + \"STEP]...\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            + \"Sugar Tomato\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            + ARG_INGREDIENT + \"Sugar \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            + ARG_INGREDIENT + \"Tomato \" + ARG_QUANTITY + \" 5 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            + ARG_STEP + \"Chop tomatoes. \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            + ARG_STEP + \"Add sugar to it and mix well. \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New recipe added: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RECIPE \u003d \"This recipe already exists in the recipe book\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final Recipe recipe;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public AddRecipeCommand(Recipe recipe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(recipe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.recipe \u003d recipe;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (model.hasRecipe(this.recipe)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_RECIPE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        model.addRecipe(this.recipe);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, this.recipe));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                || (other instanceof AddRecipeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                \u0026\u0026 this.recipe.equals(((AddRecipeCommand) other).recipe));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return String.format(\"AddRecipeCommand: %s\", this.recipe);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hjl99": 45,
      "zhiayang": 28
    }
  },
  {
    "path": "src/main/java/chopchop/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 20
    }
  },
  {
    "path": "src/main/java/chopchop/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 71
    }
  },
  {
    "path": "src/main/java/chopchop/logic/commands/DeleteIngredientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// DeleteIngredientCommand.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.parser.ItemReference;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * Deletes an ingredient identified using it\u0027s displayed index from the ingredient book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class DeleteIngredientCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"delete ingredient\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            + \": Deletes the ingredient identified by the index number used in the displayed recipe list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            + \"Example: \" + \"delete recipe\" + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final String MESSAGE_DELETE_INGREDIENT_SUCCESS \u003d \"Deleted Ingredient: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final ItemReference item;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Constructs a command that deletes the given ingredient item."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public DeleteIngredientCommand(ItemReference item) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        requireNonNull(item);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.item \u003d item;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        Ingredient ingredientToDelete \u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (this.item.isIndexed()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var lastShownList \u003d model.getFilteredIngredientList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (this.item.getZeroIndex() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_INGREDIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            ingredientToDelete \u003d lastShownList.get(this.item.getZeroIndex());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            ingredientToDelete \u003d model"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                .findIngredientWithName(this.item.getName())"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                .orElseThrow(() -\u003e new CommandException(String.format(\"no ingredient named \u0027%s\u0027\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    this.item.getName()))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                );"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        model.deleteIngredient(ingredientToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_INGREDIENT_SUCCESS, ingredientToDelete));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                || (other instanceof DeleteIngredientCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                \u0026\u0026 this.item.equals(((DeleteIngredientCommand) other).item)); // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 34,
      "zhiayang": 34,
      "Trav1sT": 2
    }
  },
  {
    "path": "src/main/java/chopchop/logic/commands/DeleteRecipeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// DeleteRecipeCommand.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.parser.ItemReference;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Deletes a recipe identified using it\u0027s displayed index from the recipe book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class DeleteRecipeCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"delete recipe\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            + \": Deletes the recipe identified by the index number used in the displayed recipe list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            + \"Example: \" + \"delete recipe\" + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final String MESSAGE_DELETE_RECIPE_SUCCESS \u003d \"Deleted Recipe: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final ItemReference item;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Constructs a command that deletes the given recipe item."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public DeleteRecipeCommand(ItemReference item) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        requireNonNull(item);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.item \u003d item;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        Recipe recipeToDelete \u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (this.item.isIndexed()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var lastShownList \u003d model.getFilteredRecipeList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (item.getZeroIndex() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            recipeToDelete \u003d lastShownList.get(this.item.getZeroIndex());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            recipeToDelete \u003d model"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                .findRecipeWithName(this.item.getName())"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                .orElseThrow(() -\u003e new CommandException(String.format(\"no recipe named \u0027%s\u0027\", this.item.getName())));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        model.deleteRecipe(recipeToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_RECIPE_SUCCESS, recipeToDelete));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                || (other instanceof DeleteRecipeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                \u0026\u0026 item.equals(((DeleteRecipeCommand) other).item)); // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 37,
      "zhiayang": 32
    }
  },
  {
    "path": "src/main/java/chopchop/logic/commands/FindIngredientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// FindIngredientCommand.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.attributes.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * Finds and lists all ingredients in ingredient book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class FindIngredientCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find ingredient\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all ingredients whose content contain any of \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" sugar\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Constructs a command that finds the given ingredient item."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public FindIngredientCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        model.updateFilteredIngredientList(predicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new CommandResult(String.format(Messages.MESSAGE_INGREDIENTS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            model.getFilteredIngredientList().size()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                || (other instanceof FindIngredientCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindIngredientCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 31,
      "zhiayang": 15,
      "Trav1sT": 5
    }
  },
  {
    "path": "src/main/java/chopchop/logic/commands/FindRecipeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// FindRecipeCommand.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.attributes.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Finds and lists all recipes in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class FindRecipeCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find recipe\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all recipes whose content contain any of \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" sugar tomato orange\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Constructs a command that finds the given recipe item."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public FindRecipeCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        model.updateFilteredRecipeList(predicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                String.format(Messages.MESSAGE_RECIPES_LISTED_OVERVIEW, model.getFilteredRecipeList().size()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                || (other instanceof FindRecipeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindRecipeCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 37,
      "zhiayang": 13
    }
  },
  {
    "path": "src/main/java/chopchop/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// HelpCommand.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, /* showHelp: */ true, /* exit: */ false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 2,
      "seowalex": 1,
      "fall9x": 20
    }
  },
  {
    "path": "src/main/java/chopchop/logic/commands/ListIngredientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// ListIngredientCommand.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.model.Model.PREDICATE_SHOW_ALL_INGREDIENTS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * Lists all ingredients in the ingredient book to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class ListIngredientCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all ingredients\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        model.updateFilteredIngredientList(PREDICATE_SHOW_ALL_INGREDIENTS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 18,
      "zhiayang": 4,
      "Trav1sT": 1
    }
  },
  {
    "path": "src/main/java/chopchop/logic/commands/ListRecipeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// ListRecipeCommand.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.model.Model.PREDICATE_SHOW_ALL_RECIPES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Lists all recipes in the recipe book to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class ListRecipeCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all recipes\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        model.updateFilteredRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 19,
      "zhiayang": 4
    }
  },
  {
    "path": "src/main/java/chopchop/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 17
    }
  },
  {
    "path": "src/main/java/chopchop/logic/parser/ArgName.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// ArgName.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.logic.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * A helper class to abtract away the menial task of handling \u0027/\u0027 when printing argument names"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class ArgName {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Constructs a new argument name from the given string. Note that it *should not* include"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * the leading slash."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param name the name of the argument."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public ArgName(String name) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assert name !\u003d null"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \u0026\u0026 !name.isEmpty()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \u0026\u0026 !name.startsWith(\"/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns the un-decorated prefix name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public String name() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns the decorated (ie. with a slash) prefix name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return \"/\" + this.name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.name.hashCode();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return (obj instanceof ArgName)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \u0026\u0026 ((ArgName) obj).name.equals(this.name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 51
    }
  },
  {
    "path": "src/main/java/chopchop/logic/parser/CommandArguments.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// CommandArguments.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.logic.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.util.Pair;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * A container class to hold a parsed command, holding its:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * - name"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * - unnamed arguments"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * - named arguments"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * For example, a command such as:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * {@code add ingredient onions /quantity 500g /location fridge /location shelf}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * Would have the following properties:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * {@code"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " *      command     \u003d \"add\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " *      remaining   \u003d \"ingredient onions\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " *      arguments   \u003d ["
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " *                      (\"quantity\", \"500g\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " *                      (\"location\", \"fridge\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " *                      (\"location\", \"shelf\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " *                    ]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * For named arguments, the name cannot be empty, while the value can be empty. For example,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * {@code ... /tag /tag /tag} is valid, but {@code ... / owo / uwu} is not."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * This class makes no judgement on the contents of any of the properties. As seen in the"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * example above, multiple arguments with the same name are allowed; the ordering of named"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * arguments is preserved."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class CommandArguments {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final String command;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final String remaining;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final List\u003cPair\u003cArgName, String\u003e\u003e arguments;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Constructs a set of command arguments consisting of only the command name."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param command   the name of the command"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public CommandArguments(String command) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.command    \u003d command;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.remaining  \u003d \"\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.arguments  \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Constructs a set of command arguments consisting of the command name and"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * some number of named arguments."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param command   the name of the command"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param arguments a map of named arguments and their values"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public CommandArguments(String command, List\u003cPair\u003cArgName, String\u003e\u003e arguments) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.command    \u003d command;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.remaining  \u003d \"\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.arguments  \u003d new ArrayList\u003c\u003e(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Constructs a set of command arguments consisting of the command name, the command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * target, any remaining non-named arguments, and some number of named arguments."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param command   the name of the command"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param remaining any remaining non-named arguments"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param arguments a map of named arguments and their values"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public CommandArguments(String command, String remaining, List\u003cPair\u003cArgName, String\u003e\u003e arguments) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.command    \u003d command;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.remaining  \u003d remaining;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.arguments  \u003d new ArrayList\u003c\u003e(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public String getCommand() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.command;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public String getRemaining() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.remaining;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Gets the arguments with the given name. Since it makes sense for some parameters to"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * be specified more than once, this method returns a list of all arguments with the"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * given name."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public List\u003cString\u003e getArgument(ArgName name) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.arguments"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .filter(p -\u003e p.fst().equals(name))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .map(p -\u003e p.snd())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public List\u003cPair\u003cArgName, String\u003e\u003e getAllArguments() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new ArrayList\u003c\u003e(this.arguments);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 107
    }
  },
  {
    "path": "src/main/java/chopchop/logic/parser/CommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// CommandParser.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.logic.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.util.Pair;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.util.Result;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.util.Strings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.util.StringView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.logic.parser.commands.AddCommandParser.parseAddCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.logic.parser.commands.HelpCommandParser.parseHelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.logic.parser.commands.ListCommandParser.parseListCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.logic.parser.commands.FindCommandParser.parseFindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.logic.parser.commands.DeleteCommandParser.parseDeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class CommandParser {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private Result\u003cList\u003cPair\u003cArgName, String\u003e\u003e\u003e parseNamedArguments(StringView input) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var ret \u003d new ArrayList\u003cPair\u003cArgName, String\u003e\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        while (input.size() \u003e 0) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (input.find(\u0027/\u0027) !\u003d 0) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            // TODO: this won\u0027t handle things like slashes in dates. ideally we want to"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            // split based on \" /\" (ie. there must be a leading space before the slash),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            // but that requires changing StringView::bisect. later."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var currentArg \u003d input.drop(1).bisect(\u0027/\u0027, input);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                var argName \u003d new StringView(\"\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                var argValue \u003d new StringView(\"\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                currentArg.bisect(argName, \u0027 \u0027, argValue);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                if (argName.isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return Result.error(\"argument name cannot be empty\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                ret.add(Pair.of(new ArgName(argName.trim().toString()), argValue.trim().toString()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (input.isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            input \u003d input.undrop(1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return Result.of(ret);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Parse an input string into its constituent components, including the name of the command, its target,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * and its arguments. See the documentation for {@link chopchop.logic.parser.CommandArguments} for the recognised"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * components of a given input string."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param input the input string to parse"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return      the parsed components, iff parsing succeeded; an empty optional otherwise."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private Result\u003cCommandArguments\u003e parseArgs(String input) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var sv \u003d new StringView(input);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var x \u003d new StringView(\"\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var xs \u003d new StringView(\"\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        sv.bisect(x, \u0027 \u0027, xs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var command \u003d x.toString().strip();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        xs.bisect(x, \u0027/\u0027, xs);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var theRest \u003d x.toString().strip();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (!xs.isEmpty()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            xs \u003d xs.undrop(1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            assert xs.at(0) \u003d\u003d \u0027/\u0027;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.parseNamedArguments(xs)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .map(args -\u003e new CommandArguments(command, theRest, args));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Parse a user input into a {@code Command}, or an error message if parsing failed."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param input the input string to parse"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return      the parsed command on success; an error message otherwise."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Result\u003cCommand\u003e parse(String input) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.parseArgs(input)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .then(args -\u003e {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                switch (args.getCommand()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                case Strings.COMMAND_ADD:       return parseAddCommand(args);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                case Strings.COMMAND_HELP:      return parseHelpCommand(args);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                case Strings.COMMAND_FIND:      return parseFindCommand(args);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                case Strings.COMMAND_LIST:      return parseListCommand(args);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                case Strings.COMMAND_DELETE:    return parseDeleteCommand(args);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return Result.error(\"unknown command \u0027%s\u0027\", args.getCommand());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            });"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 114
    }
  },
  {
    "path": "src/main/java/chopchop/logic/parser/ItemReference.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// ItemReference.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.logic.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.util.Either;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.util.Result;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.util.StringView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class ItemReference {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final Either\u003cInteger, String\u003e reference;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private ItemReference(Either\u003cInteger, String\u003e ref) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.reference \u003d ref;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns the zero-based index of the itemreference, if it was an indexed reference."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Integer getZeroIndex() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.reference.fromLeft();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns the lowercased name of the itemreference, if it was a named reference."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.reference.fromRight();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns true iff the {@code ItemReference} was made with an index."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean isIndexed() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.reference.isLeft();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns true iff the {@code ItemReference} was made with a name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean isNamed() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.reference.isRight();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Creates an {@code ItemReference} using the given zero-based index."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param idx the zero-based index"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return    an ItemReference"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static ItemReference ofZeroIndex(int idx) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new ItemReference(Either.left(idx));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Creates an {@code ItemReference} using the given one-based index."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param idx the one-based index"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return    an ItemReference"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static ItemReference ofOneIndex(int idx) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assert idx \u003e 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new ItemReference(Either.left(idx - 1));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Creates an {@code ItemReference} using the given name. Note that the name"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * is case-insensitive."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param name the name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return     an ItemReference"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static ItemReference ofName(String name) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new ItemReference(Either.right(name.toLowerCase()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Automatically parses an {@code ItemReference} given the string input. The denotation"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * for an indexed reference is {@code #3}, where \u00273\u0027 is a 1-based index (ie. it is the"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * third item here). Anything else not starting with a \u0027#\u0027 is considered a name."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static Result\u003cItemReference\u003e parse(String input) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (input.isEmpty()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(\"empty input\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else if (input.startsWith(\"#\")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return new StringView(input)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                .drop(1)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                .parseInt()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                .then(i -\u003e {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    if (i \u003c\u003d 0) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                        return Result.error(\"invalid index (cannot be zero or negative)\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                        return Result.of(ItemReference.ofOneIndex(i));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                });"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.of(ItemReference.ofName(input));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this \u003d\u003d obj"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            || (obj instanceof ItemReference"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                \u0026\u0026 ((ItemReference) obj).reference.equals(this.reference));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 109
    }
  },
  {
    "path": "src/main/java/chopchop/logic/parser/commands/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// AddCommandParser.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.logic.parser.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.util.Result;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.util.Strings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.util.StringView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.ingredient.IngredientReference;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.Step;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.Quantity;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.ExpiryDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.units.Count;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.parser.ArgName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.parser.CommandArguments;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.commands.Command;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.commands.AddRecipeCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.commands.AddIngredientCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.logic.parser.commands.CommonParser.getCommandTarget;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.logic.parser.commands.CommonParser.getFirstUnknownArgument;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class AddCommandParser {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Parses an \u0027add\u0027 command. Syntax(es):"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * {@code add recipe NAME [/ingredient INGREDIENT_NAME [/qty QTY1]...]... [/step STEP]...}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * {@code add ingredient NAME [/qty QUANTITY] [/expiry DATE]}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param args the parsed command arguments from the {@code CommandParser}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return     an AddCommand, if the input was valid."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static Result\u003c? extends Command\u003e parseAddCommand(CommandArguments args) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (!args.getCommand().equals(Strings.COMMAND_ADD)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(\"invalid command \u0027%s\u0027 (expected \u0027%s\u0027)\", args.getCommand(), Strings.COMMAND_ADD);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return getCommandTarget(args)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .then(target -\u003e {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                if (target.snd().isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return Result.error(\"recipe or ingredient name cannot be empty\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                switch (target.fst()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                case RECIPE:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return parseAddRecipeCommand(target.snd().strip(), args);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                case INGREDIENT:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return parseAddIngredientCommand(target.snd().strip(), args);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return Result.error(\"can only add recipes or ingredients (\u0027%s\u0027 invalid)\", target.fst());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            });"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Parses an \u0027add ingredient\u0027 command. Syntax:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * {@code add ingredient NAME [/qty QUANTITY] [/expiry DATE]}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private static Result\u003cAddIngredientCommand\u003e parseAddIngredientCommand(String name, CommandArguments args) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assert args.getCommand().equals(Strings.COMMAND_ADD);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        Optional\u003cArgName\u003e foo;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if ((foo \u003d getFirstUnknownArgument(args, List.of(Strings.ARG_QUANTITY,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            Strings.ARG_EXPIRY))).isPresent()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(\"\u0027add ingredient\u0027 command doesn\u0027t support \u0027%s\u0027\", foo.get());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var qtys \u003d args.getArgument(Strings.ARG_QUANTITY);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (qtys.size() \u003e 1) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(\"multiple quantities specified\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var exps \u003d args.getArgument(Strings.ARG_EXPIRY);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (exps.size() \u003e 1) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(\"multiple expiry dates specified\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // looks weird, but basically this extracts the /qty and /expiry arguments (if present),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // then constructs the command from it -- while returning any intermediate error messages."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return Result.transpose(qtys"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .findFirst()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .map(Quantity::parse))"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .then(qty -\u003e Result.transpose(exps"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                .map(e -\u003e Result.of(e)))"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                .map(exp -\u003e createAddIngredientCommand(name, qty, exp))"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            );"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Parses an \u0027add ingredient\u0027 command. Syntax:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * {@code add recipe NAME [/ingredient INGREDIENT_NAME [/qty QTY1]...]... [/step STEP]...}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private static Result\u003cAddRecipeCommand\u003e parseAddRecipeCommand(String name, CommandArguments args) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assert args.getCommand().equals(Strings.COMMAND_ADD);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        Optional\u003cArgName\u003e foo;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if ((foo \u003d getFirstUnknownArgument(args, List.of(Strings.ARG_QUANTITY,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            Strings.ARG_INGREDIENT, Strings.ARG_STEP))).isPresent()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(\"\u0027add recipe\u0027 command doesn\u0027t support \u0027%s\u0027\", foo.get());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return parseIngredientList(args)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .map(ingrs -\u003e createAddRecipeCommand(name, ingrs,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    args.getAllArguments()"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                        .stream()"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                        .filter(p -\u003e p.fst().equals(Strings.ARG_STEP))"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                        .map(p -\u003e p.snd())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                        .map(x -\u003e new Step(x))"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                        .collect(Collectors.toList()))"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            );"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Parse the list of ingredients."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private static Result\u003cList\u003cIngredientReference\u003e\u003e parseIngredientList(CommandArguments args) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // what is this, imperative code??"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var arglist \u003d args.getAllArguments();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var ingredients \u003d new ArrayList\u003cIngredientReference\u003e();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        for (int i \u003d 0; i \u003c arglist.size(); i++) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var p \u003d arglist.get(i);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (p.fst().equals(Strings.ARG_INGREDIENT)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                var name \u003d p.snd();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                Optional\u003cQuantity\u003e quantity \u003d Optional.empty();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                // check the next argument for a quantity (which is optional)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                if (i + 1 \u003c arglist.size()) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    var q \u003d arglist.get(i + 1);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    if (q.fst().equals(Strings.ARG_QUANTITY)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                        var qty \u003d Quantity.parse(q.snd());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                        if (qty.isError()) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                            return Result.error(qty.getError());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                            quantity \u003d Optional.of(qty.getValue());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                            // skip the quantity now that we\u0027ve handled it."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                            i++;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                ingredients.add(createIngredientReference(name, quantity));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            } else if (p.fst().equals(Strings.ARG_QUANTITY)) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                return Result.error(\"\u0027%s\u0027 without ingredient in argument %d [/qty %s...]\","
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    Strings.ARG_QUANTITY, i + 1, new StringView(p.snd()).take(4));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                // do nothing."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return Result.of(ingredients);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private static IngredientReference createIngredientReference(String name, Optional\u003cQuantity\u003e qty) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new IngredientReference(name, qty.orElse(Count.of(1)));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private static AddRecipeCommand createAddRecipeCommand(String name,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        List\u003cIngredientReference\u003e ingredients, List\u003cStep\u003e steps) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new AddRecipeCommand(new Recipe("
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            new Name(name), ingredients, steps"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private static AddIngredientCommand createAddIngredientCommand(String name,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        Optional\u003cQuantity\u003e qty, Optional\u003cString\u003e expiry) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new AddIngredientCommand(new Ingredient(new Name(name),"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            qty.orElse(Count.of(1)),"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            expiry.map(ExpiryDate::new).orElse(ExpiryDate.none())"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 210
    }
  },
  {
    "path": "src/main/java/chopchop/logic/parser/commands/CommandTarget.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// CommandTarget.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.logic.parser.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * Just a very simple enumeration to represent the \"target\" of a command, which is either"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * recipes (eg. add recipe) or ingredients (eg. add ingredient)."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public enum CommandTarget {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    RECIPE,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    INGREDIENT"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 12
    }
  },
  {
    "path": "src/main/java/chopchop/logic/parser/commands/CommonParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// CommonParser.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.logic.parser.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.util.Pair;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.util.Result;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.util.StringView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.parser.ArgName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.parser.CommandArguments;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class CommonParser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Finds the first named argument in the given {@code args} that isn\u0027t part of {@code knownArgs}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * and returns it so we can print a nice error message. If all names are part of the given list,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * then an empty optional is returned."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static Optional\u003cArgName\u003e getFirstUnknownArgument(CommandArguments args, List\u003cArgName\u003e knownArgs) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return args.getAllArguments()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .filter(p -\u003e !knownArgs.contains(p.fst()))"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .map(p -\u003e p.fst())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .findFirst();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Gets the \u0027target\u0027 of a command, which is either \u0027ingredient\u0027 or \u0027recipe\u0027. Returns either an error"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * if the target was invalid or empty, or a pair consisting of the {@code CommandTarget}, and the"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * rest of the unnamed arguments."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static Result\u003cPair\u003cCommandTarget, String\u003e\u003e getCommandTarget(CommandArguments args) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var str \u003d args.getRemaining();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (str.isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(\"no target specified (either \u0027recipe\u0027 or \u0027ingredient\u0027)\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var x \u003d new StringView(str).bisect(\u0027 \u0027).fst().trim();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var xs \u003d new StringView(str).bisect(\u0027 \u0027).snd().trim();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // any prefix of \"recipes\" and \"ingredients\" can be used."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (\"recipes\".startsWith(x.toString())) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.of(Pair.of(CommandTarget.RECIPE, xs.toString()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else if (\"ingredients\".startsWith(x.toString())) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.of(Pair.of(CommandTarget.INGREDIENT, xs.toString()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(\"unknown target \u0027%s...\u0027\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                x.takeWhile(c -\u003e !Character.isWhitespace(c))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            );"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 57
    }
  },
  {
    "path": "src/main/java/chopchop/logic/parser/commands/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// DeleteCommandParser.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.logic.parser.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.util.Result;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.util.Strings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.parser.ArgName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.parser.ItemReference;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.parser.CommandArguments;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.commands.DeleteRecipeCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.commands.DeleteIngredientCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.logic.parser.commands.CommonParser.getCommandTarget;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.logic.parser.commands.CommonParser.getFirstUnknownArgument;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class DeleteCommandParser {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private static final String commandName \u003d Strings.COMMAND_DELETE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Parses a \u0027delete\u0027 command. Syntax(es):"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * {@code delete recipe REF}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * {@code delete ingredient REF}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param args the parsed command arguments from the {@code CommandParser}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return     a DeleteCommand, if the input was valid."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static Result\u003c? extends Command\u003e parseDeleteCommand(CommandArguments args) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (!args.getCommand().equals(commandName)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(\"invalid command \u0027%s\u0027 (expected \u0027%s\u0027)\", args.getCommand(), commandName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // we expect no named arguments"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        Optional\u003cArgName\u003e foo;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if ((foo \u003d getFirstUnknownArgument(args, new ArrayList\u003c\u003e())).isPresent()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(\"\u0027delete\u0027 command doesn\u0027t support \u0027%s\u0027\", foo.get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return getCommandTarget(args)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .then(target -\u003e {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                if (target.snd().isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return Result.error(\"recipe or ingredient name cannot be empty\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                switch (target.fst()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                case RECIPE:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return parseDeleteRecipeCommand(target.snd().strip(), args);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                case INGREDIENT:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return parseDeleteIngredientCommand(target.snd().strip(), args);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return Result.error(\"can only add recipes or ingredients (\u0027%s\u0027 invalid)\", target.fst());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            });"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Parses a \u0027delete ingredient\u0027 command. Syntax:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * {@code delete ingredient REF}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private static Result\u003cDeleteIngredientCommand\u003e parseDeleteIngredientCommand(String name, CommandArguments args) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assert args.getCommand().equals(commandName);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return ItemReference.parse(name)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .map(DeleteIngredientCommand::new);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Parses a \u0027delete recipe\u0027 command. Syntax:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * {@code delete recipe REF}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private static Result\u003cDeleteRecipeCommand\u003e parseDeleteRecipeCommand(String name, CommandArguments args) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assert args.getCommand().equals(commandName);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return ItemReference.parse(name)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .map(DeleteRecipeCommand::new);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 86
    }
  },
  {
    "path": "src/main/java/chopchop/logic/parser/commands/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// FindCommandParser.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.logic.parser.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.util.Result;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.util.Strings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.util.StringView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.parser.ArgName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.parser.CommandArguments;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.commands.FindRecipeCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.commands.FindIngredientCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.logic.parser.commands.CommonParser.getCommandTarget;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.logic.parser.commands.CommonParser.getFirstUnknownArgument;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class FindCommandParser {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private static final String commandName \u003d Strings.COMMAND_FIND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Parses a \u0027find\u0027 command. Syntax(es):"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * {@code delete recipe (keywords)+}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * {@code delete ingredient (keywords)+}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param args the parsed command arguments from the {@code CommandParser}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return     a FindCommand, if the input was valid."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static Result\u003c? extends Command\u003e parseFindCommand(CommandArguments args) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (!args.getCommand().equals(commandName)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(\"invalid command \u0027%s\u0027 (expected \u0027%s\u0027)\", args.getCommand(), commandName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // we expect no named arguments"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        Optional\u003cArgName\u003e foo;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if ((foo \u003d getFirstUnknownArgument(args, new ArrayList\u003c\u003e())).isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(\"\u0027find\u0027 command doesn\u0027t support \u0027%s\u0027\", foo.get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return getCommandTarget(args)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .then(target -\u003e {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                var words \u003d new StringView(target.snd()).words();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                if (words.isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return Result.error(\"\u0027%s\u0027 command requires at least one search term\", commandName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                switch (target.fst()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                case RECIPE:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return Result.of(new FindRecipeCommand(new NameContainsKeywordsPredicate(words)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                case INGREDIENT:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return Result.of(new FindIngredientCommand(new NameContainsKeywordsPredicate(words)));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return Result.error(\"can only find recipes or ingredients (\u0027%s\u0027 invalid)\", target.fst());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            });"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 68
    }
  },
  {
    "path": "src/main/java/chopchop/logic/parser/commands/HelpCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// HelpCommandParser.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.logic.parser.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.util.Result;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.util.Strings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.parser.CommandArguments;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class HelpCommandParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private static final String commandName \u003d Strings.COMMAND_HELP;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Parses a \u0027help\u0027 command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param args the parsed command arguments from the {@code CommandParser}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return     a HelpCommand, if the input was valid."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static Result\u003c? extends Command\u003e parseHelpCommand(CommandArguments args) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (!args.getCommand().equals(commandName)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(\"invalid command \u0027%s\u0027 (expected \u0027%s\u0027)\", args.getCommand(), commandName);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // for now, instead of erroring on arguments, we just let it pass through."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // we might want to display command-specific help in the future."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return Result.of(new HelpCommand());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 33
    }
  },
  {
    "path": "src/main/java/chopchop/logic/parser/commands/ListCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// ListCommandParser.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.logic.parser.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.util.Result;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.util.Strings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.parser.ArgName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.parser.CommandArguments;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.commands.ListRecipeCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.commands.ListIngredientCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.logic.parser.commands.CommonParser.getCommandTarget;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.logic.parser.commands.CommonParser.getFirstUnknownArgument;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class ListCommandParser {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private static final String commandName \u003d Strings.COMMAND_LIST;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Parses a \u0027list\u0027 command. Syntax(es):"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * {@code list recipe}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * {@code list ingredient}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param args the parsed command arguments from the {@code CommandParser}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return     a ListCommand, if the input was valid."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static Result\u003c? extends Command\u003e parseListCommand(CommandArguments args) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (!args.getCommand().equals(commandName)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(\"invalid command \u0027%s\u0027 (expected \u0027%s\u0027)\", args.getCommand(), commandName);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // we expect no named arguments"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        Optional\u003cArgName\u003e foo;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if ((foo \u003d getFirstUnknownArgument(args, new ArrayList\u003c\u003e())).isPresent()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(\"\u0027list\u0027 command doesn\u0027t support \u0027%s\u0027\", foo.get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return getCommandTarget(args)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .then(target -\u003e {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                switch (target.fst()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                case RECIPE:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return Result.of(new ListRecipeCommand());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                case INGREDIENT:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return Result.of(new ListIngredientCommand());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return Result.error(\"can only list recipes or ingredients (\u0027%s\u0027 invalid)\", target.fst());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            });"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 59
    }
  },
  {
    "path": "src/main/java/chopchop/logic/parser/exceptions/ParseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// ParseException.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.logic.parser.exceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * An exception thrown when a parsing error occurs."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class ParseException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 12
    }
  },
  {
    "path": "src/main/java/chopchop/model/FoodEntry.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.attributes.Name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public abstract class FoodEntry {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    protected final Name name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    protected FoodEntry(Name name) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public abstract int hashCode();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 17,
      "seowalex": 3
    }
  },
  {
    "path": "src/main/java/chopchop/model/FoodEntryBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public abstract class FoodEntryBook implements ReadOnlyFoodEntryBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    protected final UniqueFoodEntryList entries;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public FoodEntryBook() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        entries \u003d new UniqueFoodEntryList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Creates an AddressBook using the Ingredients in the {@code toBeCopied}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public FoodEntryBook(ReadOnlyFoodEntryBook toBeCopied) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public void setFoodEntries(List\u003c? extends FoodEntry\u003e entries) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.entries.setFoodEntries(entries);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void resetData(ReadOnlyFoodEntryBook newData) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        setFoodEntries(newData.getFoodEntryList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public boolean hasIngredient(FoodEntry entry) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(entry);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return entries.contains(entry);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public boolean hasRecipe(FoodEntry entry) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(entry);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return entries.contains(entry);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void addIngredient(Ingredient p) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        entries.add(p);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Adds a recipe to the recipe book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * The recipe must not already exist in the recipe book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void addRecipe(Recipe r) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        entries.add(r);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedIngredient}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * The person identity of {@code editedIngredient} must not be the same as another existing person in the"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * address book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setIngredient(Ingredient target, Ingredient editedIngredient) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(editedIngredient);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        entries.setEntry(target, editedIngredient);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void setRecipe(Recipe target, Recipe editedRecipe) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(editedRecipe);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        entries.setEntry(target, editedRecipe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void removeIngredient(Ingredient key) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        entries.remove(key);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Removes {@code key} from this {@code RecipeBook}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * {@code key} must exist in the recipe book."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void removeRecipe(Recipe key) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        entries.remove(key);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return entries.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public ObservableList\u003cFoodEntry\u003e getFoodEntryList() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return entries.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            || (other instanceof FoodEntryBook // instanceof handles nulls"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            \u0026\u0026 entries.equals(((FoodEntryBook) other).entries));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return entries.hashCode();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 36,
      "zhiayang": 1,
      "Trav1sT": 104
    }
  },
  {
    "path": "src/main/java/chopchop/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.recipe.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.ingredient.ReadOnlyIngredientBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    Predicate\u003cFoodEntry\u003e PREDICATE_SHOW_ALL_RECIPES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    Predicate\u003cFoodEntry\u003e PREDICATE_SHOW_ALL_INGREDIENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns the user prefs\u0027 recipe book file path."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    Path getRecipeBookFilePath();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Sets the user prefs\u0027 recipe book file path."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    void setRecipeBookFilePath(Path recipeBookFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Replaces recipe book data with the data in {@code recipeBook}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    void setRecipeBook(ReadOnlyRecipeBook recipeBook);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /** Returns the RecipeBook */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    ReadOnlyRecipeBook getRecipeBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns true if a recipe with the same identity as {@code recipe} exists in the recipe book."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    boolean hasRecipe(Recipe recipe);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Finds a recipe by name."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    Optional\u003cRecipe\u003e findRecipeWithName(String name);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Finds a recipe by name."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    Optional\u003cRecipe\u003e findRecipeWithName(Name name);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Deletes the given recipe."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * The recipe must exist in the recipe book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    void deleteRecipe(Recipe target);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Adds the given recipe."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * {@code recipe} must not already exist in the recipe book."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    void addRecipe(Recipe recipe);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Replaces the given recipe {@code target} with {@code editedRecipe}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * {@code target} must exist in the recipe book."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * The recipe identity of {@code editedPerson} must not be the same as another existing recipe in the recipe book."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    void setRecipe(Recipe target, Recipe editedRecipe);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /** Returns an unmodifiable view of the filtered recipe list */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    ObservableList\u003cRecipe\u003e getFilteredRecipeList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Updates the filter of the filtered recipe list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    void updateFilteredRecipeList(Predicate\u003cFoodEntry\u003e predicate);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns the user prefs\u0027 ingredient book file path."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    Path getIngredientBookFilePath();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Sets the user prefs\u0027 ingredient book file path."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    void setIngredientBookFilePath(Path indBookFilePath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    void setIngredientBook(ReadOnlyIngredientBook book);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    ReadOnlyIngredientBook getIngredientBook();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    boolean hasIngredient(Ingredient ind);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    void deleteIngredient(Ingredient ind);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Finds an ingredient by name."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    Optional\u003cIngredient\u003e findIngredientWithName(String name);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Finds an ingredient by name."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    Optional\u003cIngredient\u003e findIngredientWithName(Name name);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    void addIngredient(Ingredient ind);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedIngredient}."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * The person identity of {@code editedIngredient} must not be the same as another existing person in the"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * address book."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    void setIngredient(Ingredient target, Ingredient editedIngredient);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    ObservableList\u003cIngredient\u003e getFilteredIngredientList();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    void updateFilteredIngredientList(Predicate\u003cFoodEntry\u003e predicate);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 86,
      "zhiayang": 28,
      "Trav1sT": 56
    }
  },
  {
    "path": "src/main/java/chopchop/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.recipe.RecipeBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.recipe.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.IngredientBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.ReadOnlyIngredientBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Represents the in-memory model of the recipe book data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private final RecipeBook recipeBook;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private final IngredientBook ingredientBook;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final FilteredList\u003cRecipe\u003e filteredRecipes;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final FilteredList\u003cIngredient\u003e filteredIngredients;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Initializes a ModelManager with the given recipeBook and userPrefs."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public ModelManager(ReadOnlyRecipeBook recipeBook, ReadOnlyIngredientBook ingredientBook,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                        ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireAllNonNull(recipeBook, ingredientBook, userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        logger.fine(\"Initializing with recipe book: \" + recipeBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.recipeBook \u003d new RecipeBook(recipeBook);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        filteredRecipes \u003d new FilteredList\u003cRecipe\u003e(this.recipeBook.getFoodEntryList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        logger.fine(\"Initializing with ingredient book: \" + ingredientBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.ingredientBook \u003d new IngredientBook(ingredientBook);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        filteredIngredients \u003d new FilteredList\u003cIngredient\u003e(this.ingredientBook.getFoodEntryList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this(new RecipeBook(), new IngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public Path getRecipeBookFilePath() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return userPrefs.getRecipeBookFilePath();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void setRecipeBookFilePath(Path recipeBookFilePath) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(recipeBookFilePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        userPrefs.setRecipeBookFilePath(recipeBookFilePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void setRecipeBook(ReadOnlyRecipeBook recipeBook) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.recipeBook.resetData(recipeBook);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public ReadOnlyRecipeBook getRecipeBook() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return recipeBook;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public boolean hasRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(recipe);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return recipeBook.hasRecipe(recipe);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void deleteRecipe(Recipe target) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        recipeBook.removeRecipe(target);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void addRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        recipeBook.addRecipe(recipe);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        updateFilteredRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void setRecipe(Recipe target, Recipe editedRecipe) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireAllNonNull(target, editedRecipe);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        recipeBook.setRecipe(target, editedRecipe);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Optional\u003cRecipe\u003e findRecipeWithName(String name) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.findRecipeWithName(new Name(name));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Optional\u003cRecipe\u003e findRecipeWithName(Name name) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.recipeBook.getFoodEntryList()"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .filter(r -\u003e r.getName().equals(name))"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .findFirst();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Recipe List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Recipe} backed by the internal list of"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * {@code versionedRecipeBook}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public ObservableList\u003cRecipe\u003e getFilteredRecipeList() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return filteredRecipes;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void updateFilteredRecipeList(Predicate\u003cFoodEntry\u003e predicate) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        filteredRecipes.setPredicate(predicate);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns the user prefs\u0027 ingredient book file path."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Path getIngredientBookFilePath() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return userPrefs.getIngredientBookFilePath();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param indBookFilePath"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public void setIngredientBookFilePath(Path indBookFilePath) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        requireNonNull(indBookFilePath);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        userPrefs.setIngredientBookFilePath(indBookFilePath);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Ingredient List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setIngredientBook(ReadOnlyIngredientBook ingredientBook) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.ingredientBook.resetData(ingredientBook);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public ReadOnlyIngredientBook getIngredientBook() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return ingredientBook;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public boolean hasIngredient(Ingredient ind) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(ind);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return ingredientBook.hasIngredient(ind);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void deleteIngredient(Ingredient target) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        ingredientBook.removeIngredient(target);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void addIngredient(Ingredient ind) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        ingredientBook.addIngredient(ind);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        updateFilteredIngredientList(PREDICATE_SHOW_ALL_INGREDIENTS);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setIngredient(Ingredient target, Ingredient editedIngredient) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireAllNonNull(target, editedIngredient);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        ingredientBook.setIngredient(target, editedIngredient);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Optional\u003cIngredient\u003e findIngredientWithName(String name) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.findIngredientWithName(new Name(name));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Optional\u003cIngredient\u003e findIngredientWithName(Name name) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.ingredientBook.getFoodEntryList()"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .filter(r -\u003e r.getName().equals(name))"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .findFirst();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Ingredient List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Ingredient} backed by the internal list of"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public ObservableList\u003cIngredient\u003e getFilteredIngredientList() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return filteredIngredients;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void updateFilteredIngredientList(Predicate\u003cFoodEntry\u003e predicate) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        filteredIngredients.setPredicate(predicate);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return recipeBook.equals(other.recipeBook)"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                \u0026\u0026 filteredRecipes.equals(other.filteredRecipes)"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                \u0026\u0026 ingredientBook.equals(other.ingredientBook)"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                \u0026\u0026 filteredIngredients.equals(other.filteredIngredients);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 144,
      "zhiayang": 50,
      "Trav1sT": 81,
      "seowalex": 1
    }
  },
  {
    "path": "src/main/java/chopchop/model/ReadOnlyFoodEntryBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * Unmodifiable view of a food entry book"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public interface ReadOnlyFoodEntryBook {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns an unmodifiable view of the food entry list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * This list will not contain any duplicate food entries."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    ObservableList\u003c? extends FoodEntry\u003e getFoodEntryList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 2,
      "Trav1sT": 13
    }
  },
  {
    "path": "src/main/java/chopchop/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    Path getIngredientBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    Path getRecipeBookFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 16,
      "Trav1sT": 2
    }
  },
  {
    "path": "src/main/java/chopchop/model/UniqueFoodEntryList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.exceptions.DuplicateEntryException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.exceptions.EntryNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class UniqueFoodEntryList implements Iterable\u003cFoodEntry\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final ObservableList\u003cFoodEntry\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final ObservableList\u003cFoodEntry\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns true if the list contains an equivalent food as the given argument."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public boolean contains(FoodEntry toCheck) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Adds a FoodEntry to the list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * The FoodEntry must not already exist in the list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void add(FoodEntry toAdd) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new DuplicateEntryException();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Replaces the FoodEntry {@code target} in the list with {@code editedFoodEntry}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * The FoodEntry identity of {@code editedFoodEntry} must not be the same as another existing"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * FoodEntry in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setEntry(FoodEntry target, FoodEntry editedFoodEntry) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireAllNonNull(target, editedFoodEntry);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new EntryNotFoundException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (!target.equals(editedFoodEntry) \u0026\u0026 contains(editedFoodEntry)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new DuplicateEntryException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        internalList.set(index, editedFoodEntry);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Removes the equivalent FoodEntry from the list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * The FoodEntry must exist in the list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void remove(FoodEntry toRemove) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new EntryNotFoundException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setFoodEntries(UniqueFoodEntryList replacement) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Replaces the contents of this list with {@code FoodEntries}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * {@code FoodEntries} must not contain duplicate FoodEntries."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public void setFoodEntries(List\u003c? extends FoodEntry\u003e entries) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireAllNonNull(entries);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        //if (!ingredientsAreUnique(entries)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (!foodEntriesAreUnique(entries)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new DuplicateEntryException();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        internalList.setAll(entries);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public ObservableList\u003cFoodEntry\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Iterator\u003cFoodEntry\u003e iterator() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            || (other instanceof UniqueFoodEntryList // instanceof handles nulls"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            \u0026\u0026 internalList.equals(((UniqueFoodEntryList) other).internalList));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns true if {@code FoodEntries} contains only unique FoodEntries."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private boolean ingredientsAreUnique(List\u003c? extends FoodEntry\u003e ingredients) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        for (int i \u003d 0; i \u003c ingredients.size() - 1; i++) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            for (int j \u003d i + 1; j \u003c ingredients.size(); j++) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                if (ingredients.get(i).equals(ingredients.get(j))) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns true if {@code FoodEntries} contains only unique FoodEntries."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private boolean recipesAreUnique(List\u003c? extends FoodEntry\u003e recipes) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        for (int i \u003d 0; i \u003c recipes.size() - 1; i++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            for (int j \u003d i + 1; j \u003c recipes.size(); j++) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                if (recipes.get(i).equals(recipes.get(j))) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns true if {@code FoodEntries} contains only unique FoodEntries."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private boolean foodEntriesAreUnique(List\u003c? extends FoodEntry\u003e foodEntries) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        for (int i \u003d 0; i \u003c foodEntries.size() - 1; i++) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            for (int j \u003d i + 1; j \u003c foodEntries.size(); j++) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                if (foodEntries.get(i).equals(foodEntries.get(j))) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 32,
      "zhiayang": 4,
      "Trav1sT": 119
    }
  },
  {
    "path": "src/main/java/chopchop/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private Path ingredientBookFilePath \u003d Paths.get(\"data\" , \"ingredientbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private Path recipeBookFilePath \u003d Paths.get(\"data\" , \"recipebook.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        setIngredientBookFilePath(newUserPrefs.getIngredientBookFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        setRecipeBookFilePath(newUserPrefs.getRecipeBookFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Path getIngredientBookFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return ingredientBookFilePath;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public Path getRecipeBookFilePath() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return this.recipeBookFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setIngredientBookFilePath(Path bookFilePath) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(bookFilePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.ingredientBookFilePath \u003d bookFilePath;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setRecipeBookFilePath(Path bookFilePath) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(bookFilePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.recipeBookFilePath \u003d bookFilePath;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            \u0026\u0026 ingredientBookFilePath.equals(o.ingredientBookFilePath)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            \u0026\u0026 recipeBookFilePath.equals(o.recipeBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return Objects.hash(guiSettings, ingredientBookFilePath, recipeBookFilePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        sb.append(\"\\nLocal data ingredient file location : \" + ingredientBookFilePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        sb.append(\"\\nLocal data recipe file location : \" + recipeBookFilePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 78,
      "Trav1sT": 21
    }
  },
  {
    "path": "src/main/java/chopchop/model/attributes/ExpiryDate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class ExpiryDate {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        \"Expiry date should be in the form, yyyy-MM-dd\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    //temporary using 1 fixed date format before parser is integrated."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final DateTimeFormatter FORMAT \u003d DateTimeFormatter.ISO_DATE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^\\\\d{4}-\\\\d{2}-\\\\d{2}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Constructs a {@code ExpiryDate}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param date A valid string in the date format, yyyy-MM-dd"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public ExpiryDate(String date) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        checkArgument(isValidDate(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.date \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Checks if the input date is valid."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param inputDate A string of unknown date format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @return true if the date format is valid. Otherwise, false."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static boolean isValidDate(String inputDate) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (!inputDate.matches(VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            LocalDate.parse(inputDate , FORMAT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return this.date.toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            || (other instanceof ExpiryDate // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            \u0026\u0026 this.date.equals(((ExpiryDate) other).date));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Creates an expiry date far in the future, to represent food that either doesn\u0027t expire,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * or where the expiry date was not given."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static ExpiryDate none() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new ExpiryDate(\"9999-12-31\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 9,
      "Trav1sT": 60
    }
  },
  {
    "path": "src/main/java/chopchop/model/attributes/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Represents a FoodEntry\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * Comparisons are case insensitive."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * The first character of the address must be a alphanumeric char. No restrictions on subsequent chars"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][a-zA-Z0-9\\\\s\\\\W]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    \u0026\u0026 this.fullName.toLowerCase().equals(((Name) other).fullName.toLowerCase()))"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                || (other instanceof String"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    \u0026\u0026 this.fullName.toLowerCase().equals(((String) other).toLowerCase()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.fullName.toLowerCase().hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 1,
      "zhiayang": 5,
      "Trav1sT": 55
    }
  },
  {
    "path": "src/main/java/chopchop/model/attributes/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.FoodEntry;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * Tests that a {@code FoodEntry}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cFoodEntry\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean test(FoodEntry fe) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(fe.getName().fullName, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 2,
      "zhiayang": 2,
      "Trav1sT": 28
    }
  },
  {
    "path": "src/main/java/chopchop/model/attributes/Quantity.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// Quantity.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model.attributes;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.function.BiFunction;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.util.Result;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.util.StringView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.units.Mass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.units.Count;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.units.Volume;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * The Quantity interface is an abstraction over various kinds of units, including but not limited to:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * mass, volume, and dimensionless counts."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * It has no knowledge of how each unit interacts and fits with the others; it simply provides a static"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * method that helps to parse an input, eg. \"300 ml\" into a {@code Quantity}. Note that the concept of"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * \"units\" is different from the idea of \"prefixes\"; eg. \u0027kg\u0027 and \u0027g\u0027 are conceptually the same unit of"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * mass, but they have different prefixes (1000 and 1), so it must be possible to add them together."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * Each class implementing Quantity is expected to be immutable. \"Type\" safety is expected to be enforced"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * by the implementation, unless it makes sense to add units of different types together (unlikely)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * There is no restriction on the actual value of the quantity, ie. they are allowed to be negative."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * Implementing classes should be responsible for implementing {@code add()} functionality between"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * different ratios (prefixes) of the same unit; eg. it should be possible to add 700g to 2kg to"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * obtain 2.7kg."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public interface Quantity {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Adds a quantity to this, and returns a new quantity (without modifying the original)."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * The input quantity can be negative to perform a subtraction. If the units are incompatible,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * it returns an appropriate error message."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param qty the addend"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return    a new Quantity after performing the addition."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Result\u003c? extends Quantity\u003e add(Quantity qty);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Parse a quantity and its associated unit."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param input the string input"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return      the parsed input, or an error message."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static Result\u003cQuantity\u003e parse(String input) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        final List\u003cBiFunction\u003cDouble, String, Result\u003cQuantity\u003e\u003e\u003e knownUnits \u003d List.of("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            Mass::of, Volume::of, Count::of"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (input.isEmpty()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(\"empty input\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // this is a bit iffy, but this condition will accept things like \"-31.4-48.145.201-4\"."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // it\u0027s up to parseDouble() to return us an intelligible error message from that."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var p \u003d new StringView(input).span(c -\u003e Character.isDigit(c) || c \u003d\u003d \u0027.\u0027 || c \u003d\u003d \u0027-\u0027);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var num \u003d p.fst().trim().parseDouble();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // do-notation would be really nice here."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (num.isError()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(\"couldn\u0027t parse number: %s\", num.getError());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var unit \u003d p.snd().trim();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // this loops through each known unit constructor, and returns the first one"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // that gives a non-error result. this way, the knowledge of unit names are"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // not duplicated here and in the actual implementation."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return Result.flatten("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            Result.ofOptional("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                knownUnits.stream()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    .map(fn -\u003e num.then(n -\u003e fn.apply(n, unit.toString())))"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    .filter(Result::hasValue)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    .findFirst(),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                String.format(\"unknown unit \u0027%s\u0027\", unit))"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            );"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Formats a decimal value in an intelligent manner; mainly by not showing the decimal places if"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * the input is a whole number."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param value the value to format"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return      the formatted value as a string"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    static String formatDecimalValue(double value) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (value \u003d\u003d (int) value) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return String.format(\"%d\", (int) value);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return String.format(\"%.3f\", value);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 84,
      "Trav1sT": 15
    }
  },
  {
    "path": "src/main/java/chopchop/model/attributes/Step.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.model.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * Represents a Recipe\u0027s name in ChopChop."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidStep(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class Step {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            \"Recipe steps should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][a-zA-Z0-9\\\\s\\\\W]*\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public final String step;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param step A valid step."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public Step(String step) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(step);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        checkArgument(isValidStep(step), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.step \u003d step;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static boolean isValidStep(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return this.step;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                || (other instanceof Step // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                \u0026\u0026 this.step.equals(((Step) other).step)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return this.step.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hjl99": 52,
      "Trav1sT": 2
    }
  },
  {
    "path": "src/main/java/chopchop/model/attributes/units/Count.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// Count.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.model.attributes.units;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.util.Result;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.Quantity;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class Count implements Quantity {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final double value;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private Count(double value) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Result\u003cCount\u003e add(Quantity qty) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (!(qty instanceof Count)) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(\"cannot add \u0027%s\u0027 to \u0027%s\u0027 (incompatible units)\", qty, this);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var cnt \u003d (Count) qty;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.of(new Count(this.value + cnt.value));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return Quantity.formatDecimalValue(this.value);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return (obj instanceof Count)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \u0026\u0026 (((Count) obj).value \u003d\u003d this.value);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns representation of the count."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param value the numerical value of the quantity"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param unit  the unit string, which should be empty."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return      the quantity, if the unit was valid."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static Result\u003cQuantity\u003e of(double value, String unit) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (unit.isEmpty()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.of(new Count(value));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(\"count should not have units (found \u0027%s\u0027)\", unit);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns a unitless count"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param value the number of things"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return      the quantity"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static Count of(double value) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new Count(value);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 62
    }
  },
  {
    "path": "src/main/java/chopchop/model/attributes/units/Mass.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// Mass.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.model.attributes.units;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.util.Result;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.Quantity;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * This class represents a quantity of mass, eg. grams, kilograms, etc. For the purposes of this class,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * a ratio of 1.0 represents the gram (because it is unlikely you will be cooking with kilograms of"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * ingredients)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class Mass implements Quantity {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final double value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final double ratio;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Constructs a new mass quantity with the given value and ratio."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private Mass(double value, double ratio) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // adjust the ratio if we have to. don\u0027t want to show 0.0001kg for 100mg,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // nor 15000g for 15kg. for now, the cutoff is 5; ie. if you have 5001g of something,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // it\u0027ll show as 5.00kg. if you have 0.499kg, it\u0027ll show as 499g. of course, this"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // only works for SI units. if you decide to be a dunce and use customary or imperial"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // units, ownself settle."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (ratio \u003d\u003d 1 || ratio \u003d\u003d 0.001) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (value \u003e 5000) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                ratio *\u003d 1000;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                value /\u003d 1000;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else if (ratio \u003d\u003d 1000) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (value \u003c 0.500) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                ratio /\u003d 1000;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                value *\u003d 1000;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.ratio \u003d ratio;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Result\u003cQuantity\u003e add(Quantity qty) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (!(qty instanceof Mass)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(\"cannot add \u0027%s\u0027 to \u0027%s\u0027 (incompatible units)\", qty, this);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var mass \u003d (Mass) qty;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var newval \u003d this.value + (mass.value * (mass.ratio / this.ratio));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.of(new Mass(newval, this.ratio));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var unit \u003d \"\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (this.ratio \u003d\u003d 1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            unit \u003d \"g\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else if (this.ratio \u003d\u003d 1000) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            unit \u003d \"kg\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else if (this.ratio \u003d\u003d 0.001) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            unit \u003d \"mg\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            unit \u003d \"?\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return String.format(\"%s%s\", Quantity.formatDecimalValue(this.value), unit);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (!(obj instanceof Mass)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var m \u003d (Mass) obj;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return (this.value * this.ratio) \u003d\u003d (m.value * m.ratio);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns representation of the mass."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param value the numerical value of the quantity"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param unit  the unit string, eg. \"kg\" or \"g\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return      the mass quantity, if the unit was valid."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static Result\u003cQuantity\u003e of(double value, String unit) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        switch (unit) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        case \"mg\":  return Result.of(milligrams(value));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        case \"g\":   return Result.of(grams(value));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        case \"kg\":  return Result.of(kilograms(value));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        default:    return Result.error(\"invalid unit \u0027%s\u0027\", unit);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns a mass in grams"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param value the number of grams"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return      the quantity"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static Mass grams(double value) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new Mass(value, 1.0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns a mass in milligrams"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param value the number of milligrams"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return      the quantity"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static Mass milligrams(double value) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new Mass(value, 0.001);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns a mass in kilograms"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param value the number of kilograms"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return      the quantity"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static Mass kilograms(double value) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new Mass(value, 1000);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 127
    }
  },
  {
    "path": "src/main/java/chopchop/model/attributes/units/Volume.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// Volume.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.model.attributes.units;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.util.Result;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.Quantity;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class Volume implements Quantity {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private static double RATIO_LITRE       \u003d 1.0;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private static double RATIO_MILLILITRE  \u003d 0.001;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private static double RATIO_CUP         \u003d 0.250;    // we\u0027re using the metric cup, for obvious reasons."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private static double RATIO_TEASPOON    \u003d 0.005;    // and metric tea and tablespoons."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private static double RATIO_TABLESPOON  \u003d 0.015;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private static String UNIT_LITRE        \u003d \"l\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private static String UNIT_MILLILITRE   \u003d \"ml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private static String UNIT_CUP          \u003d \"cup\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private static String UNIT_CUPS         \u003d \"cups\";   // this is for convenience."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private static String UNIT_TEASPOON     \u003d \"tsp\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private static String UNIT_TABLESPOON   \u003d \"tbsp\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final double value;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final double ratio;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private Volume(double value, double ratio) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // see the comment in Mass.java for an explanation of this."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (ratio \u003d\u003d 1 || ratio \u003d\u003d 0.001) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (value \u003e 5000) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                ratio *\u003d 1000;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                value /\u003d 1000;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            } else if (value \u003c 1.0) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                ratio /\u003d 1000;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                value *\u003d 1000;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.ratio \u003d ratio;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Result\u003cQuantity\u003e add(Quantity qty) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (!(qty instanceof Volume)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(\"cannot add \u0027%s\u0027 to \u0027%s\u0027 (incompatible units)\", qty, this);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var vol \u003d (Volume) qty;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var newval \u003d this.value + (vol.value * (vol.ratio / this.ratio));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.of(new Volume(newval, this.ratio));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        String unit \u003d \"\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (this.ratio \u003d\u003d RATIO_MILLILITRE) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            unit \u003d UNIT_MILLILITRE;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else if (this.ratio \u003d\u003d RATIO_LITRE) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            unit \u003d UNIT_LITRE;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else if (this.ratio \u003d\u003d RATIO_CUP) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            unit \u003d (this.value \u003d\u003d 1 ? UNIT_CUP : UNIT_CUPS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else if (this.ratio \u003d\u003d RATIO_TABLESPOON) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            unit \u003d UNIT_TABLESPOON;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else if (this.ratio \u003d\u003d RATIO_TEASPOON) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            unit \u003d UNIT_TEASPOON;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            unit \u003d \"?\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return String.format(\"%s%s\", Quantity.formatDecimalValue(this.value), unit);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (!(obj instanceof Volume)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var v \u003d (Volume) obj;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return (this.value * this.ratio) \u003d\u003d (v.value * v.ratio);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns representation of the volume."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param value the numerical value of the quantity"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param unit  the unit string, eg. \"l\" or \"cups\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return      the volume quantity, if the unit was valid."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static Result\u003cQuantity\u003e of(double value, String unit) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        double ratio \u003d 1;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (unit.equals(UNIT_MILLILITRE)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            ratio \u003d RATIO_MILLILITRE;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else if (unit.equals(UNIT_LITRE)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            ratio \u003d RATIO_LITRE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else if (unit.equals(UNIT_CUP) || unit.equals(UNIT_CUPS)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            ratio \u003d RATIO_CUP;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else if (unit.equals(UNIT_TABLESPOON)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            ratio \u003d RATIO_TABLESPOON;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else if (unit.equals(UNIT_TEASPOON)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            ratio \u003d RATIO_TEASPOON;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(\"unknown unit \u0027%s\u0027\", unit);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return Result.of(new Volume(value, ratio));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns a volume in millilitres"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param value the number of millilitres"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return      the quantity"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static Volume millilitres(double value) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new Volume(value, RATIO_MILLILITRE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns a volume in litres"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param value the number of litres"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return      the quantity"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static Volume litres(double value) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new Volume(value, RATIO_LITRE);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns a volume in (metric) cups -- 250ml."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param value the number of (metric) cups"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return      the quantity"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static Volume cups(double value) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new Volume(value, RATIO_CUP);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns a volume in (metric) teaspoons -- 5ml"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param value the number of (metric) teaspoons"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return      the quantity"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static Volume teaspoons(double value) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new Volume(value, RATIO_TEASPOON);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns a volume in (metric) tablespoons -- 15ml"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param value the number of (metric) tablespoons"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return      the quantity"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static Volume tablespoons(double value) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new Volume(value, RATIO_TABLESPOON);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 163
    }
  },
  {
    "path": "src/main/java/chopchop/model/exceptions/DuplicateEntryException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * Signals that the operation will result in duplicate Ingredients (Persons are considered duplicates if they have"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class DuplicateEntryException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public DuplicateEntryException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        super(\"Operation would result in duplicate food entry\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 11
    }
  },
  {
    "path": "src/main/java/chopchop/model/exceptions/EntryNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * Signals that the operation is unable to find the specified ingredient."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class EntryNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 6
    }
  },
  {
    "path": "src/main/java/chopchop/model/exceptions/IncompatibleIngredientsException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// IncompatibleIngredientsException.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.model.ingredient.exceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * An exception that is thrown when attempting to add ingredients with incompatible"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * quantities (eg. volume and mass) or names."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class IncompatibleIngredientsException extends Exception {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public IncompatibleIngredientsException(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 14
    }
  },
  {
    "path": "src/main/java/chopchop/model/ingredient/Ingredient.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.FoodEntry;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.attributes.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.Quantity;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.ExpiryDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.ingredient.exceptions.IncompatibleIngredientsException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * Represents an Ingredient in the recipe manager."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class Ingredient extends FoodEntry {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final ExpiryDate expiryDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final Quantity quantity;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Every field must be present and not null. Use this constructor if expiry date is not present."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public Ingredient(Name name, Quantity quantity) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        requireNonNull(quantity);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.expiryDate \u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Every field must be present and not null. If expiry date is not present, use other constructor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Ingredient(Name name, Quantity quantity, ExpiryDate expiryDate) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireAllNonNull(quantity, expiryDate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.expiryDate \u003d expiryDate;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Quantity getQuantity() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return quantity;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public Optional\u003cExpiryDate\u003e getExpiryDate() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return Optional.ofNullable(expiryDate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Combines the quantities of this ingredient and the provided ingredient."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param other the other ingredient"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return      a new {@code Ingredient} with the combined quantities"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @throws IncompatibleIngredientsException if the units of both ingredients were not compatible"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Ingredient combine(Ingredient other) throws IncompatibleIngredientsException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (!this.name.equals(other.name)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            throw new IncompatibleIngredientsException(String.format(\"cannot combine \u0027%s\u0027 with \u0027%s\u0027\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                this.name, other.name));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // TODO: expiry date handling! see #58"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.quantity.add(other.quantity)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .map(newQty -\u003e new Ingredient(this.name, newQty, this.expiryDate))"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .orElseThrow(err -\u003e new IncompatibleIngredientsException(err));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Returns true if both ingredients of the same name and expiry date."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (!(other instanceof Ingredient)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        Ingredient otherInd \u003d (Ingredient) other;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return otherInd.getName().equals(getName())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            \u0026\u0026 otherInd.getExpiryDate().get().equals(getExpiryDate().get());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return Objects.hash(name, quantity, expiryDate);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                .append(\" Quantity: \")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                .append(getQuantity());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        getExpiryDate().ifPresent(expiryDate -\u003e builder.append(\" Expiry Date: \").append(expiryDate));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 23,
      "Trav1sT": 63,
      "seowalex": 27
    }
  },
  {
    "path": "src/main/java/chopchop/model/ingredient/IngredientBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class IngredientBook implements ReadOnlyIngredientBook {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final UniqueIngredientList entries;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public IngredientBook() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        entries \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Creates an AddressBook using the Ingredients in the {@code toBeCopied}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public IngredientBook(ReadOnlyIngredientBook toBeCopied) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setFoodEntries(List\u003cIngredient\u003e entries) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.entries.setIngredientEntries(entries);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void resetData(ReadOnlyIngredientBook newData) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        setFoodEntries(newData.getFoodEntryList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public boolean hasIngredient(Ingredient entry) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(entry);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return entries.contains(entry);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Adds a recipe to the recipe book."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * The recipe must not already exist in the recipe book."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void addIngredient(Ingredient r) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        entries.add(r);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setIngredient(Ingredient target, Ingredient editedIngredient) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(editedIngredient);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        entries.setIngredient(target, editedIngredient);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Removes {@code key} from this {@code IngredientBook}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * {@code key} must exist in the recipe book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void removeIngredient(Ingredient key) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        entries.remove(key);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return entries.asUnmodifiableObservableList().size() + \" ingredients\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns an unmodifiable view of the ingredient list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * This list will not contain any duplicate ingredients."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public ObservableList\u003cIngredient\u003e getFoodEntryList() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return entries.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            || (other instanceof IngredientBook // instanceof handles nulls"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            \u0026\u0026 entries.equals(((IngredientBook) other).entries));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return entries.hashCode();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 109
    }
  },
  {
    "path": "src/main/java/chopchop/model/ingredient/IngredientReference.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// IngredientReference.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.model.ingredient;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.Quantity;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.util.Result;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * A reference to an ingredient. Not the actual {@code Ingredient}, and knows nothing about it."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class IngredientReference {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final Quantity quantity;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Constructs an ingredient reference with the given name and quantity."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public IngredientReference(String name, Quantity qty) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.quantity \u003d qty;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Parse an IngredientReference."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param source String input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @return the IngredientReference or an error message."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static Result\u003cIngredientReference\u003e parse(String source) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        String[] words \u003d source.split(\" \\\\(|\\\\)\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (words.length !\u003d 2) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return Result.error(\"Unable to parse string: %s\", source);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        Result\u003cQuantity\u003e qtyResult \u003d Quantity.parse(words[1]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (qtyResult.isError()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return Result.error(qtyResult.getError());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return Quantity.parse(words[1]).map(qty -\u003e new IngredientReference(words[0], qty));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Quantity getQuantity() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.quantity;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return String.format(\"%s (%s)\", this.name, this.quantity);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return obj \u003d\u003d this"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            || (obj instanceof IngredientReference"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                \u0026\u0026 ((IngredientReference) obj).name.equals(this.name)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                \u0026\u0026 ((IngredientReference) obj).quantity.equals(this.quantity)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            );"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 44,
      "Trav1sT": 19
    }
  },
  {
    "path": "src/main/java/chopchop/model/ingredient/ReadOnlyIngredientBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ReadOnlyFoodEntryBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public interface ReadOnlyIngredientBook extends ReadOnlyFoodEntryBook {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns an unmodifiable view of the ingredient list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * This list will not contain any duplicate ingredients."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    ObservableList\u003cIngredient\u003e getFoodEntryList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 1,
      "Trav1sT": 14
    }
  },
  {
    "path": "src/main/java/chopchop/model/ingredient/UniqueIngredientList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.ingredient.exceptions.DuplicateIngredientException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.ingredient.exceptions.IngredientNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class UniqueIngredientList implements Iterable\u003cIngredient\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final ObservableList\u003cIngredient\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final ObservableList\u003cIngredient\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns true if the list contains an equivalent Ingredient as the given argument."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public boolean contains(Ingredient toCheck) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Searches for an ingredient by name in this list, and returns its index. Returns -1"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * if an ingredient with the given name could not be found."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Name comparison is case-insensitive."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public int indexByName(String name) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        for (int i \u003d 0; i \u003c this.internalList.size(); i++) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (this.internalList.get(i).getName().equals(name)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                return i;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Adds a Ingredient to the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * The Ingredient must not already exist in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void add(Ingredient toAdd) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            throw new DuplicateIngredientException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Replaces the Ingredient {@code target} in the list with {@code editedIngredient}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * The Ingredient identity of {@code editedIngredient} must not be the same as another existing"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Ingredient in the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setIngredient(Ingredient target, Ingredient editedIngredient) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireAllNonNull(target, editedIngredient);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            throw new IngredientNotFoundException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (!target.equals(editedIngredient) \u0026\u0026 contains(editedIngredient)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            throw new DuplicateIngredientException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        internalList.set(index, editedIngredient);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Removes the equivalent Ingredient from the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * The Ingredient must exist in the list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void remove(Ingredient toRemove) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            throw new IngredientNotFoundException();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setIngredients(UniqueIngredientList replacement) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Replaces the contents of this list with {@code Ingredients}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * {@code Ingredients} must not contain duplicate Ingredients."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setIngredientEntries(List\u003cIngredient\u003e ingredients) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireAllNonNull(ingredients);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (!ingredientsAreUnique(ingredients)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            throw new DuplicateIngredientException();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        internalList.setAll(ingredients);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public ObservableList\u003cIngredient\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Iterator\u003cIngredient\u003e iterator() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            || (other instanceof UniqueIngredientList // instanceof handles nulls"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            \u0026\u0026 internalList.equals(((UniqueIngredientList) other).internalList));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns true if {@code Ingredients} contains only unique Ingredients."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private boolean ingredientsAreUnique(List\u003cIngredient\u003e ingredients) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        for (int i \u003d 0; i \u003c ingredients.size() - 1; i++) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            for (int j \u003d i + 1; j \u003c ingredients.size(); j++) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                if (ingredients.get(i).equals(ingredients.get(j))) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 8,
      "zhiayang": 15,
      "Trav1sT": 118
    }
  },
  {
    "path": "src/main/java/chopchop/model/ingredient/exceptions/DuplicateIngredientException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model.ingredient.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * Signals that the operation will result in duplicate Ingredients (Persons are considered duplicates if they have"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class DuplicateIngredientException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public DuplicateIngredientException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        super(\"Operation would result in duplicate ingredients\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 11
    }
  },
  {
    "path": "src/main/java/chopchop/model/ingredient/exceptions/IngredientNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model.ingredient.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * Signals that the operation is unable to find the specified ingredient."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class IngredientNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 6
    }
  },
  {
    "path": "src/main/java/chopchop/model/recipe/ReadOnlyRecipeBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ReadOnlyFoodEntryBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public interface ReadOnlyRecipeBook extends ReadOnlyFoodEntryBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns an unmodifiable view of the recipes list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * This list will not contain any duplicate recipes."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    ObservableList\u003cRecipe\u003e getFoodEntryList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 12,
      "zhiayang": 1,
      "Trav1sT": 4
    }
  },
  {
    "path": "src/main/java/chopchop/model/recipe/Recipe.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.concurrent.atomic.AtomicInteger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.FoodEntry;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.attributes.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.attributes.Step;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.ingredient.IngredientReference;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class Recipe extends FoodEntry {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final List\u003cIngredientReference\u003e ingredients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private final List\u003cStep\u003e steps \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Recipe(Name name, List\u003cIngredientReference\u003e ingredients, List\u003cStep\u003e steps) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireAllNonNull(name, ingredients, steps);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.ingredients.addAll(ingredients);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.steps.addAll(steps);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns an immutable ingredient set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public List\u003cIngredientReference\u003e getIngredients() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return Collections.unmodifiableList(ingredients);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns an immutable Step List, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public List\u003cStep\u003e getSteps() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return Collections.unmodifiableList(steps);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns true if both recipes have the same identity and data fields."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * This defines a stronger notion of equality between two recipes."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (!(other instanceof Recipe)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Recipe otherRecipe \u003d (Recipe) other;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return otherRecipe.getName().equals(getName());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return Objects.hash(name, ingredients, steps);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                .append(\" Ingredients: \");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        getIngredients().forEach(ingredient -\u003e builder.append(ingredient).append(\" \"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        builder.append(\" Steps:\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        AtomicInteger counter \u003d new AtomicInteger(1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        getSteps().forEach(step -\u003e {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            builder.append(\" \").append(counter.getAndIncrement()).append(\". \");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            builder.append(step);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        });"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hjl99": 74,
      "zhiayang": 5,
      "Trav1sT": 4,
      "seowalex": 5
    }
  },
  {
    "path": "src/main/java/chopchop/model/recipe/RecipeBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class RecipeBook implements ReadOnlyRecipeBook {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final UniqueRecipeList entries;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public RecipeBook() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        entries \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Creates an AddressBook using the Ingredients in the {@code toBeCopied}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public RecipeBook(ReadOnlyRecipeBook toBeCopied) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setFoodEntries(List\u003cRecipe\u003e entries) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.entries.setRecipeEntries(entries);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void resetData(ReadOnlyRecipeBook newData) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        setFoodEntries(newData.getFoodEntryList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public boolean hasRecipe(Recipe entry) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(entry);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return entries.contains(entry);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Adds a recipe to the recipe book."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * The recipe must not already exist in the recipe book."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void addRecipe(Recipe r) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        entries.add(r);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setRecipe(Recipe target, Recipe editedRecipe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(editedRecipe);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        entries.setRecipe(target, editedRecipe);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Removes {@code key} from this {@code RecipeBook}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * {@code key} must exist in the recipe book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void removeRecipe(Recipe key) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        entries.remove(key);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return entries.asUnmodifiableObservableList().size() + \" recipes\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            || (other instanceof RecipeBook // instanceof handles nulls"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            \u0026\u0026 entries.equals(((RecipeBook) other).entries));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return entries.hashCode();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns an unmodifiable view of the recipes list."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * This list will not contain any duplicate recipes."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public ObservableList\u003cRecipe\u003e getFoodEntryList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return entries.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 13,
      "Trav1sT": 93
    }
  },
  {
    "path": "src/main/java/chopchop/model/recipe/RecipeContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.util.StringUtil;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Tests that a {@code Recipe}\u0027s Content matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class RecipeContainsKeywordsPredicate implements Predicate\u003cRecipe\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public RecipeContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public boolean test(Recipe recipe) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(recipe.toString(), keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                || (other instanceof RecipeContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                \u0026\u0026 keywords.equals(((RecipeContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 30,
      "Trav1sT": 1
    }
  },
  {
    "path": "src/main/java/chopchop/model/recipe/UniqueRecipeList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.recipe.exceptions.DuplicateRecipeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.recipe.exceptions.RecipeNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class UniqueRecipeList implements Iterable\u003cRecipe\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private final ObservableList\u003cRecipe\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private final ObservableList\u003cRecipe\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public boolean contains(Recipe toCheck) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Adds a recipe to the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * The recipe must not already exist in the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void add(Recipe toAdd) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            throw new DuplicateRecipeException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Replaces the recipe {@code target} in the list with {@code editedRecipe}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * The recipe identity of {@code editedRecipe} must not be the same as another existing recipe in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void setRecipe(Recipe target, Recipe editedRecipe) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireAllNonNull(target, editedRecipe);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            throw new RecipeNotFoundException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (!target.equals(editedRecipe) \u0026\u0026 contains(editedRecipe)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            throw new DuplicateRecipeException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        internalList.set(index, editedRecipe);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void remove(Recipe toRemove) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            throw new RecipeNotFoundException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void setRecipes(UniqueRecipeList replacement) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Replaces the contents of this list with {@code recipes}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * {@code recipes} must not contain duplicate recipes."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setRecipeEntries(List\u003cRecipe\u003e recipes) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireAllNonNull(recipes);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (!recipesAreUnique(recipes)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            throw new DuplicateRecipeException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        internalList.setAll(recipes);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public ObservableList\u003cRecipe\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public Iterator\u003cRecipe\u003e iterator() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                || (other instanceof UniqueRecipeList // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueRecipeList) other).internalList));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private boolean recipesAreUnique(List\u003cRecipe\u003e recipes) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        for (int i \u003d 0; i \u003c recipes.size() - 1; i++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            for (int j \u003d i + 1; j \u003c recipes.size(); j++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                if (recipes.get(i).equals(recipes.get(j))) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 135,
      "Trav1sT": 1
    }
  },
  {
    "path": "src/main/java/chopchop/model/recipe/exceptions/DuplicateRecipeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.model.recipe.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Signals that the operation will result in duplicate Recipes (Recipes are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * identity and data)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class DuplicateRecipeException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public DuplicateRecipeException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        super(\"Operation would result in duplicate recipes\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 11
    }
  },
  {
    "path": "src/main/java/chopchop/model/recipe/exceptions/RecipeNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.model.recipe.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class RecipeNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 6
    }
  },
  {
    "path": "src/main/java/chopchop/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.attributes.ExpiryDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.attributes.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.attributes.Step;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.attributes.units.Count;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.attributes.units.Mass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.attributes.units.Volume;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.IngredientBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.IngredientReference;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.ReadOnlyIngredientBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.recipe.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.recipe.RecipeBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static Ingredient[] getSampleIngredients() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return new Ingredient[] {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            new Ingredient(new Name(\"Apple\"),  Mass.grams(10), new ExpiryDate(\"2020-04-04\")),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            new Ingredient(new Name(\"Blueberry\"), Count.of(5)),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            new Ingredient(new Name(\"Custard\"), Volume.millilitres(200.5)),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        };"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static ReadOnlyIngredientBook getSampleIngredientBook() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        IngredientBook sampleIndBook \u003d new IngredientBook();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        for (Ingredient sampleInd : getSampleIngredients()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            sampleIndBook.addIngredient(sampleInd);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return sampleIndBook;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static Recipe[] getSampleRecipe() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return new Recipe[] {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            new Recipe(new Name(\"Apple blue mix\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                Arrays.stream(getSampleIngredients())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                    .map((x)-\u003e new IngredientReference(x.getName().toString(), x.getQuantity()))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                    .collect(Collectors.toList()),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                new ArrayList\u003c\u003e(Arrays.asList(new Step(\"Put them on a table.\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                    new Step(\"Cut and chop them.\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                    new Step(\"Mix them.\")))),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            new Recipe(new Name(\"Blue custard cream\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                Arrays.stream(getSampleIngredients())"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                    .map((x)-\u003e new IngredientReference(x.getName().toString(), x.getQuantity()))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                    .collect(Collectors.toList()),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                new ArrayList\u003c\u003e(Arrays.asList(new Step(\"Blend them.\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                    new Step(\"Stir them well.\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                    new Step(\"Leave it in the refrigerator for 8 hours\"))))"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        };"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static ReadOnlyRecipeBook getSampleRecipeBook() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        RecipeBook sampleRecipeBook \u003d new RecipeBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        for (Recipe sampleRec : getSampleRecipe()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            sampleRecipeBook.addRecipe(sampleRec);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return sampleRecipeBook;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 63
    }
  },
  {
    "path": "src/main/java/chopchop/storage/IngredientBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.ReadOnlyIngredientBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public interface IngredientBookStorage {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    Path getIngredientBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns IngredientBook data as a {@link ReadOnlyIngredientBook}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    Optional\u003cReadOnlyIngredientBook\u003e readIngredientBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @see #getIngredientBookFilePath()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    Optional\u003cReadOnlyIngredientBook\u003e readIngredientBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Saves the given {@link ReadOnlyIngredientBook} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param ingredientBook cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    void saveIngredientBook(ReadOnlyIngredientBook ingredientBook) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @see #saveIngredientBook(ReadOnlyIngredientBook)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    void saveIngredientBook(ReadOnlyIngredientBook ingredientBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 41
    }
  },
  {
    "path": "src/main/java/chopchop/storage/JsonAdaptedIngredient.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.attributes.ExpiryDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.attributes.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.attributes.Quantity;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.util.Result;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class JsonAdaptedIngredient {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final String IND_MISSING_FIELD_MESSAGE_FORMAT \u003d \"Ingredients\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final String expiry;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final String qty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Constructs a {@code JsonAdaptedIngredient} with the given ingredient details."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public JsonAdaptedIngredient(@JsonProperty(\"name\") String name, @JsonProperty(\"quantity\") String qty,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                             @JsonProperty(\"expiry\") String expiry) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.qty \u003d qty;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.expiry \u003d expiry;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Converts a given {@code Ingredient} into this class for Jackson use."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public JsonAdaptedIngredient(Ingredient source) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        qty \u003d source.getQuantity().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        expiry \u003d source.getExpiryDate().isPresent()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            ? source.getExpiryDate().get().toString()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Converts this Jackson-friendly adapted ingredient object into the model\u0027s {@code Ingredient} object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted ingredient."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Ingredient toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new IllegalValueException(String.format(IND_MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (expiry \u003d\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new IllegalValueException(String.format(IND_MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                ExpiryDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (!ExpiryDate.isValidDate(expiry)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new IllegalValueException(ExpiryDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        final ExpiryDate modelExpiry \u003d new ExpiryDate(expiry);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (qty \u003d\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new IllegalValueException(String.format(IND_MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                Quantity.class.getSimpleName()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        Result\u003cQuantity\u003e qtyResult \u003d Quantity.parse(qty);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (qtyResult.isError()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new IllegalValueException(qtyResult.getError());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return new Ingredient(modelName, qtyResult.getValue(), modelExpiry);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 77
    }
  },
  {
    "path": "src/main/java/chopchop/storage/JsonAdaptedIngredientRef.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.attributes.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.attributes.Quantity;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.IngredientReference;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.util.Result;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class JsonAdaptedIngredientRef {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final String REF_MISSING_FIELD_MESSAGE_FORMAT \u003d \"Ingredient ref\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final String quantity;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Constructs a {@code JsonAdaptedIngredientRef} with the given details."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param name name of ingredient."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param quantity just quantity to string."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public JsonAdaptedIngredientRef(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                                    @JsonProperty(\"quantity\") String quantity) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Converts a given {@code IngredientReference} into this class for json use."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param source"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public JsonAdaptedIngredientRef(IngredientReference source) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.name \u003d source.getName();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.quantity \u003d source.getQuantity().toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Converts this into json-friendly adapted IngredientReference object into the model\u0027s."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted reference."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public IngredientReference toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new IllegalValueException(String.format(REF_MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (quantity \u003d\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new IllegalValueException(String.format(REF_MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                Quantity.class.getSimpleName()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        Result\u003cQuantity\u003e result \u003d Quantity.parse(quantity);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (result.isError()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return new IngredientReference(name, result.getValue());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 62
    }
  },
  {
    "path": "src/main/java/chopchop/storage/JsonAdaptedRecipe.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.attributes.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.attributes.Step;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.IngredientReference;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class JsonAdaptedRecipe {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final String RECIPE_MISSING_FIELD_MESSAGE_FORMAT \u003d \"Recipe\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final List\u003cJsonAdaptedIngredientRef\u003e ingredientRefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final List\u003cString\u003e steps;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Constructs a {@code JsonAdaptedRecipe} with the given recipe details."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public JsonAdaptedRecipe(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                             @JsonProperty(\"ingredients\") List\u003cJsonAdaptedIngredientRef\u003e ingredients,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                             @JsonProperty(\"steps\") List\u003cString\u003e steps) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (ingredients !\u003d null) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            this.ingredientRefs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            this.ingredientRefs.addAll(ingredients);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            this.ingredientRefs \u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (steps !\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            this.steps \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            this.steps.addAll(steps);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            this.steps \u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Converts a given {@code Recipe} into this class for Jackson use."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public JsonAdaptedRecipe(Recipe source) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        ingredientRefs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        ingredientRefs.addAll(source.getIngredients().stream()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            .map(JsonAdaptedIngredientRef::new)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        steps \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        steps.addAll(source.getSteps().stream()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            .map(x-\u003ex.toString())"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Converts this Jackson-friendly adapted recipe object into the model\u0027s {@code Recipe} object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted recipe."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Recipe toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (ingredientRefs \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new IllegalValueException(String.format(RECIPE_MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                IngredientReference.class.getSimpleName()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        final List\u003cIngredientReference\u003e modelIngredientRefs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        for (JsonAdaptedIngredientRef ref : ingredientRefs) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            modelIngredientRefs.add(ref.toModelType());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (steps \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new IllegalValueException(String.format(RECIPE_MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                Step.class.getSimpleName()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        final List\u003cStep\u003e modelSteps \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        for (String step : steps) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            modelSteps.add(new Step(step));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new IllegalValueException(String.format(RECIPE_MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return new Recipe(modelName, modelIngredientRefs, modelSteps);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 99
    }
  },
  {
    "path": "src/main/java/chopchop/storage/JsonIngredientBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.util.FileUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.ReadOnlyIngredientBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class JsonIngredientBookStorage implements IngredientBookStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonIngredientBookStorage.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public JsonIngredientBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Path getIngredientBookFilePath() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns IngredientBook data as a {@link ReadOnlyIngredientBook}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Optional\u003cReadOnlyIngredientBook\u003e readIngredientBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return readIngredientBook(filePath);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param filePath"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @see #getIngredientBookFilePath()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Optional\u003cReadOnlyIngredientBook\u003e readIngredientBook(Path filePath)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        Optional\u003cJsonSerializableIngredientBook\u003e jsonIndBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            filePath, JsonSerializableIngredientBook.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (!jsonIndBook.isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return Optional.of(jsonIndBook.get().toModelType());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Saves the given {@link ReadOnlyIngredientBook} to the storage."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param ingredientBook cannot be null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void saveIngredientBook(ReadOnlyIngredientBook ingredientBook) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        saveIngredientBook(ingredientBook, filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Updates the json file with the current state of ingredient book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param ingredientBook updated ingredient book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param filePath relative path where the json file is at."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @see #saveIngredientBook(ReadOnlyIngredientBook)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void saveIngredientBook(ReadOnlyIngredientBook ingredientBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(ingredientBook);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableIngredientBook(ingredientBook), filePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 94
    }
  },
  {
    "path": "src/main/java/chopchop/storage/JsonRecipeBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.recipe.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class JsonRecipeBookStorage implements RecipeBookStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonRecipeBookStorage.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public JsonRecipeBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Path getRecipeBookFilePath() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns RecipeBook data as a {@link ReadOnlyRecipeBook}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Optional\u003cReadOnlyRecipeBook\u003e readRecipeBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return readRecipeBook(filePath);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Read and parse the json file to a serializable recipe book"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param filePath the relative path where the json file of recipe book is saved."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @see #getRecipeBookFilePath()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Optional\u003cReadOnlyRecipeBook\u003e readRecipeBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        Optional\u003cJsonSerializableRecipeBook\u003e jsonIndBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            filePath, JsonSerializableRecipeBook.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (!jsonIndBook.isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return Optional.of(jsonIndBook.get().toModelType());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Saves the given {@link ReadOnlyRecipeBook} to the storage."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param recipeBook cannot be null."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void saveRecipeBook(ReadOnlyRecipeBook recipeBook) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        saveRecipeBook(recipeBook, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Updates the json file with the current state of recipe book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param recipeBook updated recipe book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param filePath relative path where the json file is at."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @see #saveRecipeBook(ReadOnlyRecipeBook)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void saveRecipeBook(ReadOnlyRecipeBook recipeBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(recipeBook);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableRecipeBook(recipeBook), filePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 95
    }
  },
  {
    "path": "src/main/java/chopchop/storage/JsonSerializableIngredientBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.IngredientBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.ReadOnlyIngredientBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class JsonSerializableIngredientBook {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_INGREDIENT \u003d \"Ingredient list contains duplicate ingredient(s).\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final List\u003cJsonAdaptedIngredient\u003e ingredients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Constructs a {@code JsonSerializableIngredientBook} with the given inds."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public JsonSerializableIngredientBook(@JsonProperty(\"ingredients\") List\u003cJsonAdaptedIngredient\u003e inds) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.ingredients.addAll(inds);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Converts a given {@code ReadOnlyIngredientBook} into this class for Jackson use."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableIngredientBook}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public JsonSerializableIngredientBook(ReadOnlyIngredientBook source) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        ingredients.addAll(source.getFoodEntryList().stream().map(JsonAdaptedIngredient::new)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Converts this ingredient book into the model\u0027s {@code IngredientBook} object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public IngredientBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        IngredientBook indBook \u003d new IngredientBook();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        for (JsonAdaptedIngredient jsonAdaptedIngredient : ingredients) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            Ingredient ind \u003d jsonAdaptedIngredient.toModelType();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            if (indBook.hasIngredient(ind)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_INGREDIENT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            indBook.addIngredient(ind);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return indBook;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 53
    }
  },
  {
    "path": "src/main/java/chopchop/storage/JsonSerializableRecipeBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.recipe.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.recipe.RecipeBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class JsonSerializableRecipeBook {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RECIPE \u003d \"Recipe list contains duplicate recipe(s).\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final List\u003cJsonAdaptedRecipe\u003e recipes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Constructs a {@code JsonSerializableRecipeBook} with the given recipes."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public JsonSerializableRecipeBook(@JsonProperty(\"recipes\") List\u003cJsonAdaptedRecipe\u003e recipes) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.recipes.addAll(recipes);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Converts a given {@code ReadOnlyRecipeBook} into this class for Jackson use."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableRecipeBook}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public JsonSerializableRecipeBook(ReadOnlyRecipeBook source) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        recipes.addAll(source.getFoodEntryList().stream().map(JsonAdaptedRecipe::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Converts this recipe book into the model\u0027s {@code RecipeBook} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public RecipeBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        RecipeBook recipeBook \u003d new RecipeBook();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        for (JsonAdaptedRecipe jsonAdaptedRecipe : recipes) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            Recipe recipe \u003d jsonAdaptedRecipe.toModelType();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            if (recipeBook.hasRecipe(recipe)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_RECIPE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            recipeBook.addRecipe(recipe);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return recipeBook;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 52
    }
  },
  {
    "path": "src/main/java/chopchop/storage/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 46
    }
  },
  {
    "path": "src/main/java/chopchop/storage/RecipeBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.recipe.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public interface RecipeBookStorage {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    Path getRecipeBookFilePath();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns RecipeBook data as a {@link ReadOnlyRecipeBook}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    Optional\u003cReadOnlyRecipeBook\u003e readRecipeBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @see #getRecipeBookFilePath()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    Optional\u003cReadOnlyRecipeBook\u003e readRecipeBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Saves the given {@link ReadOnlyRecipeBook} to the storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param recipeBook cannot be null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    void saveRecipeBook(ReadOnlyRecipeBook recipeBook) throws IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @see #saveRecipeBook(ReadOnlyRecipeBook)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    void saveRecipeBook(ReadOnlyRecipeBook recipeBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 40
    }
  },
  {
    "path": "src/main/java/chopchop/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.UserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.ReadOnlyIngredientBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.recipe.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public interface Storage extends IngredientBookStorage, RecipeBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    Path getIngredientBookFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    Optional\u003cReadOnlyRecipeBook\u003e readRecipeBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    Path getRecipeBookFilePath();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    Optional\u003cReadOnlyIngredientBook\u003e readIngredientBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    void saveIngredientBook(ReadOnlyIngredientBook ingredientBook) throws IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    void saveRecipeBook(ReadOnlyRecipeBook recipeBook) throws IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 38
    }
  },
  {
    "path": "src/main/java/chopchop/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.ReadOnlyIngredientBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.recipe.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private IngredientBookStorage ingredientBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private RecipeBookStorage recipeBookStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Constructs {@code StorageManagers}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public StorageManager(IngredientBookStorage ingredientBookStorage, RecipeBookStorage recipeBookStorage,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                          UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.ingredientBookStorage \u003d ingredientBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.recipeBookStorage \u003d recipeBookStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Path getIngredientBookFilePath() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return ingredientBookStorage.getIngredientBookFilePath();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Optional\u003cReadOnlyRecipeBook\u003e readRecipeBook()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return readRecipeBook(recipeBookStorage.getRecipeBookFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Read and parse json file into recipe book."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param filePath relative path where the json file is saved."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @see #getRecipeBookFilePath()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Optional\u003cReadOnlyRecipeBook\u003e readRecipeBook(Path filePath)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return recipeBookStorage.readRecipeBook(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Path getRecipeBookFilePath() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return recipeBookStorage.getRecipeBookFilePath();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Optional\u003cReadOnlyIngredientBook\u003e readIngredientBook()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return readIngredientBook(ingredientBookStorage.getIngredientBookFilePath());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Read and parse json file into ingredient book."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param filePath relative path where the json file is saved."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @see #getIngredientBookFilePath()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Optional\u003cReadOnlyIngredientBook\u003e readIngredientBook(Path filePath)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return ingredientBookStorage.readIngredientBook(filePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void saveIngredientBook(ReadOnlyIngredientBook ingredientBook) throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        saveIngredientBook(ingredientBook, ingredientBookStorage.getIngredientBookFilePath());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Write to ingredient book data file."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param ingredientBook the ingredient book to be written from."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param filePath the path where the data file is saved."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @see #saveIngredientBook(ReadOnlyIngredientBook)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void saveIngredientBook(ReadOnlyIngredientBook ingredientBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        ingredientBookStorage.saveIngredientBook(ingredientBook, filePath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void saveRecipeBook(ReadOnlyRecipeBook recipeBook) throws IOException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        saveRecipeBook(recipeBook, recipeBookStorage.getRecipeBookFilePath());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Write to recipe book data file."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param recipeBook the ingredient book to be written from."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param filePath the path where the data file is saved."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @see #saveIngredientBook(ReadOnlyIngredientBook)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void saveRecipeBook(ReadOnlyRecipeBook recipeBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        recipeBookStorage.saveRecipeBook(recipeBook, filePath);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 137
    }
  },
  {
    "path": "src/main/java/chopchop/storage/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.UserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * Represents a storage for {@link UserPrefs}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Saves the given {@link ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 35
    }
  },
  {
    "path": "src/main/java/chopchop/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package chopchop.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final String FXML \u003d \"CommandBox2.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private TextArea displayBox;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Constructs {@code CommandBox}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Displays the commandResult to the user."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * @param feedbackToUser"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        displayBox.setText(feedbackToUser);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fall9x"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fall9x"
        },
        "content": "         *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fall9x"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fall9x"
        },
        "content": "         */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 97
    }
  },
  {
    "path": "src/main/java/chopchop/ui/DisplayController.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package chopchop.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.logic.Logic;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": " * Controller class for the swappable display region."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class DisplayController extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final String FXML \u003d \"DisplayPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final String WELCOME_MESSAGE \u003d \"Welcome to ChopChop! If you need any help, press \u0027F1\u0027\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private final TextDisplay textDisplay;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private NotificationWindow notificationWindow;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private StackPane displayAreaPlaceholder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Creates a {@code DisplayController} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * @param logic"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public DisplayController(Logic logic) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        textDisplay \u003d new TextDisplay(WELCOME_MESSAGE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        notificationWindow \u003d new NotificationWindow();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        displayAreaPlaceholder.addEventFilter(KeyEvent.KEY_PRESSED, new EventHandler\u003cKeyEvent\u003e() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            public void handle(KeyEvent event) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                if (event.getCode().equals(KeyCode.ESCAPE)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                    displayWelcomeMessage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        });"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        displayWelcomeMessage();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Displays the RecipeViewPanel on the swappable display region."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    protected void displayWelcomeMessage() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        displayAreaPlaceholder.getChildren().setAll(textDisplay.getRoot());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Displays the RecipeViewPanel on the swappable display region."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    protected void displayRecipeList() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        RecipeViewPanel recipeViewPanel \u003d new RecipeViewPanel(logic.getFilteredRecipeList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        displayAreaPlaceholder.getChildren().setAll(recipeViewPanel.getRoot());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Displays the RecipeDisplay on the swappable display region."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    protected void displayRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        RecipeDisplay recipeDisplay \u003d new RecipeDisplay(recipe);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        displayAreaPlaceholder.getChildren().setAll(recipeDisplay.getRoot());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Displays the IngredientViewPanel on the swappable display region."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    protected void displayIngredientList() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        IngredientViewPanel ingredientViewPanel \u003d new IngredientViewPanel(logic.getFilteredIngredientList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        displayAreaPlaceholder.getChildren().setAll(ingredientViewPanel.getRoot());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Opens the notification window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void handleNotification() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        if (!notificationWindow.isShowing()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            notificationWindow.show();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            notificationWindow.focus();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Displays the recipe panel."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void handleRecipePanel(ActionEvent event) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        displayRecipeList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Displays the recipe panel."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void handleIngredientPanel(ActionEvent event) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        displayIngredientList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Displays the recommendations panel."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void handleRecommendations(ActionEvent event) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        // To add more code."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        handleNotification();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Displays the favourites panel."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void handleFavourites(ActionEvent event) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        // To add more code."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        handleNotification();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 124
    }
  },
  {
    "path": "src/main/java/chopchop/ui/DisplayNavigator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package chopchop.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": " * Utility class for controlling navigation between displays."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": " * All methods on the navigator are static to facilitate"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": " * simple access from the different displays."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class DisplayNavigator {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static DisplayController displayController;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Sets the displayController for the navigator."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    protected static void setDisplayController(DisplayController displayController) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        DisplayNavigator.displayController \u003d displayController;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Loads the RecipeViewPanel onto the swappable display region."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    protected static void loadRecipePanel() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        displayController.displayRecipeList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Loads the RecipeDisplay onto the swappable display region."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * @param recipe"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    protected static void loadRecipeDisplay(Recipe recipe) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        displayController.displayRecipe(recipe);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Loads the IngredientViewPanel into the swappable display region."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    protected static void loadIngredientPanel() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        displayController.displayIngredientList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 42
    }
  },
  {
    "path": "src/main/java/chopchop/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package chopchop.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103t-t10-3.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 103
    }
  },
  {
    "path": "src/main/java/chopchop/ui/IngredientCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package chopchop.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class IngredientCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final String FXML \u003d \"IngredientCard.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public final Ingredient ingredient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private Button cardPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Creates a {@code RecipeCard} with the given {@code Recipe}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public IngredientCard(Ingredient ingredient) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.ingredient \u003d ingredient;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        name.setText(displayFormatter(ingredient.toString()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Adds a new line to separate the ingredient name and the quantity."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private String displayFormatter(String string) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        String[] temp \u003d string.split(\" \", 2);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return String.join(\"\\n\", temp);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        if (!(other instanceof IngredientCard)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        IngredientCard card \u003d (IngredientCard) other;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return ingredient.equals(card.ingredient);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 54
    }
  },
  {
    "path": "src/main/java/chopchop/ui/IngredientViewPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package chopchop.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class IngredientViewPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final String FXML \u003d \"IngredientViewPanel.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final String EMPTY_PROMPT \u003d \"You do not have any ingredients yet.\\nAdd one today:)\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final int ROWS \u003d 3;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final int START_COL \u003d -1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private final TextDisplay textDisplay;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    // Only 3 rows of recipes will be displayed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private ObservableList\u003cIngredient\u003e ingredientObservableList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private ScrollPane ingredientPanel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private GridPane ingredientGridView;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Creates a {@code RecipeView} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public IngredientViewPanel(ObservableList\u003cIngredient\u003e ingredientList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        ingredientObservableList \u003d ingredientList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        textDisplay \u003d new TextDisplay(EMPTY_PROMPT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        ingredientObservableList.addListener(new ListChangeListener\u003cIngredient\u003e() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            public void onChanged(Change\u003c? extends Ingredient\u003e c) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                fillDisplay();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        });"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        fillDisplay();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private int calculate_row(int index) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return index % ROWS;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Populates the gridPane with recipes stored."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private void populate() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        int row;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        int col \u003d START_COL;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        for (int i \u003d 0; i \u003c ingredientObservableList.size(); i++) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            Ingredient ingredient \u003d ingredientObservableList.get(i);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            IngredientCard ingredientCard \u003d new IngredientCard(ingredient);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            row \u003d calculate_row(i);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            if (row \u003d\u003d 0) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                col++;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            ingredientGridView.add(ingredientCard.getRoot(), col, row);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Checks if the display contains any recipes, and fills the recipe grid view."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private void fillDisplay() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        ingredientGridView.getChildren().clear();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        if (isEmpty()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            displayPrompt();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            populate();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private void displayPrompt() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        ingredientGridView.add(textDisplay.getRoot(), 0, 0);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private boolean isEmpty() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return ingredientGridView.getChildren().contains(textDisplay) || ingredientObservableList.isEmpty();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 87
    }
  },
  {
    "path": "src/main/java/chopchop/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package chopchop.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.logic.Logic;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final String FXML \u003d \"MainWindow2.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private CommandBox commandBox;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private MenuItem handleMenuExit;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private StackPane displayPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private StackPane pinBoxPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        setAccelerator(handleMenuExit, KeyCombination.valueOf(\"F4\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fall9x"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fall9x"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fall9x"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fall9x"
        },
        "content": "         *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fall9x"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fall9x"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fall9x"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fall9x"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fall9x"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fall9x"
        },
        "content": "         *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fall9x"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fall9x"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fall9x"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fall9x"
        },
        "content": "         */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        });"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.commandBox \u003d commandBox;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        PinBox pinBox \u003d new PinBox();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        pinBoxPlaceholder.getChildren().add(pinBox.getRoot());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        DisplayController displayController \u003d new DisplayController(logic);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        DisplayNavigator.setDisplayController(displayController);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        displayPlaceholder.getChildren().setAll(displayController.getRoot());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            commandBox.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            commandBox.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 191
    }
  },
  {
    "path": "src/main/java/chopchop/ui/NotificationWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package chopchop.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class NotificationWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public static final String NOTIFICATION_MESSAGE \u003d \"Feature will be coming soon!!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(NotificationWindow.class);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final String FXML \u003d \"NotificationWindow.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private Label notificationMessage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Creates a new NotificationWindow."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * @param root Stage to use as the root of the NotificationWindow."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public NotificationWindow(Stage root) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        notificationMessage.setText(NOTIFICATION_MESSAGE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Creates a new NotificationWindow."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public NotificationWindow() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Shows the notification window."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        logger.fine(\"Showing notification page about the application.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Returns true if the notification window is currently being shown."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Hides the notification window."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Focuses on the notification window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 84
    }
  },
  {
    "path": "src/main/java/chopchop/ui/PinBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package chopchop.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": " * The UI component that is responsible for displaying pinned information."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class PinBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final String FXML \u003d \"PinBox.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private TextArea pins;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Creates a {@code PinBox}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public PinBox() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        // Have to decide what to do with this real estate uwu"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        pins.setText(\"Pins\\n To be implemented.\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 25
    }
  },
  {
    "path": "src/main/java/chopchop/ui/RecipeCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package chopchop.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": " * An UI component that displays information of a {@code Recipe}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class RecipeCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final String FXML \u003d \"RecipeCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public final Recipe recipe;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Creates a {@code RecipeCard} with the given {@code Recipe}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public RecipeCard(Recipe recipe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.recipe \u003d recipe;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        name.setText(recipe.getName().toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void handleSelectRecipe(ActionEvent event) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        DisplayNavigator.loadRecipeDisplay(recipe);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        if (!(other instanceof RecipeCard)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        RecipeCard card \u003d (RecipeCard) other;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return recipe.equals(card.recipe);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 50
    }
  },
  {
    "path": "src/main/java/chopchop/ui/RecipeDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package chopchop.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import java.util.concurrent.atomic.AtomicInteger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.model.attributes.Step;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.model.ingredient.IngredientReference;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class RecipeDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final String FXML \u003d \"RecipeDisplay.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private final Recipe recipe;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private String ingredients;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private String steps;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private TextArea recipeName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private TextArea instructionDisplay;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private TextArea ingredientDisplay;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Creates a {@code RecipeDisplay} with a {@code Recipe}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * @param recipe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public RecipeDisplay(Recipe recipe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.recipe \u003d recipe;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.name \u003d \"\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.ingredients \u003d \"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.steps \u003d \"\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        stringRepresentation();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        display();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Displays the recipe on the recipeDisplay."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private void display() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assert !name.isBlank();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        recipeName.clear();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        recipeName.setText(name);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        if (!ingredients.isEmpty()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            ingredientDisplay.clear();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            ingredientDisplay.setText(ingredients.trim());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        if (!steps.isEmpty()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            instructionDisplay.clear();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            instructionDisplay.setText(steps.trim());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Sets the Strings displayed in the {@code RecipeDisplay} page."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private void stringRepresentation() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        name \u003d recipe.getName().toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        List\u003cIngredientReference\u003e ingredientList \u003d recipe.getIngredients();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        if (!ingredientList.isEmpty()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            builder.append(\" Ingredients:\\n\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            ingredientList.forEach(ingredient -\u003e builder.append(ingredient).append(\"\\n\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            ingredients \u003d builder.toString();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        List\u003cStep\u003e stepsList \u003d recipe.getSteps();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        if (!stepsList.isEmpty()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            builder.setLength(0);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            builder.append(\" Steps:\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            AtomicInteger counter \u003d new AtomicInteger(1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            stepsList.forEach(step -\u003e {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                builder.append(\"\\n\").append(counter.getAndIncrement()).append(\". \");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                builder.append(step);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            steps \u003d builder.toString();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 93
    }
  },
  {
    "path": "src/main/java/chopchop/ui/RecipeViewPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package chopchop.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class RecipeViewPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final String FXML \u003d \"RecipeViewPanel.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final String EMPTY_PROMPT \u003d \"You do not have any recipes yet.\\nAdd one today:)\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final int ROWS \u003d 3;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final int START_COL \u003d -1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private final TextDisplay textDisplay;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private ObservableList\u003cRecipe\u003e recipeObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    // Only 3 rows of recipes will be displayed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private ScrollPane recipePanel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private GridPane recipeGridView;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Creates a {@code RecipeView} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public RecipeViewPanel(ObservableList\u003cRecipe\u003e recipeList) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        textDisplay \u003d new TextDisplay(EMPTY_PROMPT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        recipeObservableList \u003d recipeList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        recipeObservableList.addListener(new ListChangeListener\u003cRecipe\u003e() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            public void onChanged(Change\u003c? extends Recipe\u003e c) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                fillDisplay();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        });"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        fillDisplay();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Checks if the display contains any recipes, and fills the recipe grid view."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private void fillDisplay() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        recipeGridView.getChildren().clear();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        if (isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            displayPrompt();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            populate();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private int calculate_row(int index) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return index % ROWS;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Populates the gridPane with recipes stored."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private void populate() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        int row;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        int col \u003d START_COL;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        for (int i \u003d 0; i \u003c recipeObservableList.size(); i++) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            Recipe recipe \u003d recipeObservableList.get(i);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            RecipeCard recipeCard \u003d new RecipeCard(recipe);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            row \u003d calculate_row(i);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            if (row \u003d\u003d 0) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                col++;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            recipeGridView.add(recipeCard.getRoot(), col, row);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private void displayPrompt() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        recipeGridView.add(textDisplay.getRoot(), 0, 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private boolean isEmpty() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return recipeGridView.getChildren().contains(textDisplay) || recipeObservableList.isEmpty();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 86
    }
  },
  {
    "path": "src/main/java/chopchop/ui/TextDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package chopchop.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": " * Class for showing prompts to user when the main display area is empty."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class TextDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final String FXML \u003d \"TextDisplay.fxml\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private TextArea textDisplay;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Creates a {@code PinBox}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public TextDisplay(String text) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        // Have to decide what to do with this real estate uwu"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        textDisplay.setText(text);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 24
    }
  },
  {
    "path": "src/main/java/chopchop/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package chopchop.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 13
    }
  },
  {
    "path": "src/main/java/chopchop/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package chopchop.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.logic.Logic;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.util.StringUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/recipe.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    void showAlertDialogAndWait(AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        showAlertDialogAndWait(AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 3,
      "fall9x": 86
    }
  },
  {
    "path": "src/main/java/chopchop/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package chopchop.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 88
    }
  },
  {
    "path": "src/main/java/chopchop/util/Either.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// Either.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.util;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * A container class that wraps a value of either type L (the \u0027left\u0027 value), or"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * of type R (the \u0027right\u0027 value), but not both at once -- an Either contains only"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * either a left or a right value."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class Either\u003cL, R\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final L leftValue;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final R rightValue;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    protected Either(L leftVal, R rightVal) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.leftValue \u003d leftVal;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.rightValue \u003d rightVal;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assert this.leftValue \u003d\u003d null || this.rightValue \u003d\u003d null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns true if the Either contains a left value, false otherwise."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return true if this is a left value, false otherwise."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean isLeft() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.leftValue !\u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns true if the Either contains a right value, false otherwise."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return True if this is a right value, false otherwise."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean isRight() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.rightValue !\u003d null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Obtains the stored left value in the Either. If the Either contains a"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * right value, throws a NoSuchElementException."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return The left value contained in the Either."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @throws NoSuchElementException if the Either contains a right value"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public L fromLeft() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return Optional.ofNullable(this.leftValue)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .orElseThrow(() -\u003e new NoSuchElementException(\"Either was not left\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Obtains the stored right value in the Either. If the Either contains a"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * left value, throws a NoSuchElementException."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return The right value contained in the Either."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @throws NoSuchElementException if the Either contains a left value"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public R fromRight() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return Optional.ofNullable(this.rightValue)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .orElseThrow(() -\u003e new NoSuchElementException(\"Either was not right\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Obtains the stored left value in the Either. If the Either contains a"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * right value, returns an empty {@code Optional}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return The left value contained in the Either, optionally."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @throws NoSuchElementException if the Either contains a right value"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Optional\u003cL\u003e fromLeftOpt() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return Optional.ofNullable(this.leftValue);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Obtains the stored right value in the Either. If the Either contains a"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * left value, returns an empty {@code Optional}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return The right value contained in the Either, optionally."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @throws NoSuchElementException if the Either contains a left value"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Optional\u003cR\u003e fromRightOpt() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return Optional.ofNullable(this.rightValue);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Maps the given function onto the left value of the Either, returning a new Either with"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * the updated left value. If it contains a right value, it returns the Either unmodified."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param fn the function to map with."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return the new Either with the corresponding value."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public \u003cL1\u003e Either\u003cL1, R\u003e mapLeft(Function\u003c? super L, ? extends L1\u003e fn) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.isLeft()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            ? Either.left(fn.apply(this.leftValue))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            : Either.right(this.rightValue);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Maps the given function onto the right value of the Either, returning a new Either with"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * the updated right value. If it contains a left value, it returns the Either unmodified."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param fn the function to map with."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return the new Either with the corresponding value."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public \u003cR1\u003e Either\u003cL, R1\u003e mapRight(Function\u003c? super R, ? extends R1\u003e fn) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.isRight()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            ? Either.right(fn.apply(this.rightValue))"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            : Either.left(this.leftValue);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Creates an Either containing a left value."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return An Either containing a left value."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static \u003cL, R\u003e Either\u003cL, R\u003e left(L l) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new Either\u003cL, R\u003e(l, null);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Creates an Either containing a right value."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return An Either containing a right value."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static \u003cL, R\u003e Either\u003cL, R\u003e right(R r) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new Either\u003cL, R\u003e(null, r);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 134
    }
  },
  {
    "path": "src/main/java/chopchop/util/Pair.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// Pair.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.util;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.function.BiFunction;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * A container class with two values, of types L and R. No restrictions are"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * imposed on the types or their values."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class Pair\u003cT, U\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final T one;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final U two;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Constructs a new Pair with the specified values."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param a the first value."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param b the second value."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Pair(T a, U b) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.one \u003d a;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.two \u003d b;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Obtains the first value from the pair."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return the first value."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public T fst() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.one;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Obtains the second value from the pair."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return the second value."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public U snd() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.two;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Performs a map on both values of the pair, returning the new pair;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * the original pair is left unmodified. The BiFunction should return"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * the new pair."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param fn the function to map the values on."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return   the new Pair."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public \u003cT1, U1\u003e Pair\u003cT1, U1\u003e map(BiFunction\u003c? super T, ? super U, Pair\u003cT1, U1\u003e\u003e fn) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return fn.apply(this.one, this.two);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Performs a map on only the first value of the pair, returning the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * new pair; the original pair is left unmodified. The second value of"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * the pair is returned as-is."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param fn the function to map the first value on."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return   the new Pair."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public \u003cT1\u003e Pair\u003cT1, U\u003e mapFst(Function\u003c? super T, ? extends T1\u003e fn) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new Pair\u003cT1, U\u003e(fn.apply(this.one), this.two);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Performs a map on only the second value of the pair, returning the"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * new pair; the original pair is left unmodified. The first value of"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * the pair is returned as-is."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param fn the function to map the second value on."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return   the new Pair."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public \u003cU1\u003e Pair\u003cT, U1\u003e mapSnd(Function\u003c? super U, ? extends U1\u003e fn) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new Pair\u003cT, U1\u003e(this.one, fn.apply(this.two));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return String.format(\"(%s, %s)\", this.one, this.two);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (!(obj instanceof Pair\u003c?, ?\u003e)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var other \u003d (Pair\u003c?, ?\u003e) obj;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return other.one.equals(this.one)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \u0026\u0026 other.two.equals(this.two);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Creates a pair, consisting of the provided elements. This exists as a helper method"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * because it\u0027s shorter to type than {@code new Pair\u003c\u003e(a, b)}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param fst the first element of the pair"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param snd the second element of the pair"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return    the new Pair."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static \u003cT, U\u003e Pair\u003cT, U\u003e of(T fst, U snd) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new Pair\u003cT, U\u003e(fst, snd);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 109
    }
  },
  {
    "path": "src/main/java/chopchop/util/Result.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// Result.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.util;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * The Result class is used to encapsulate the result of some computation"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * producing a value of type {@code T} which may or may not fail. It also holds"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * a string value describing the reason for the failure or error, if indeed the"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * wanted value of {@code T} was not produced successfully."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * In other words, a {@code Result\u003cT\u003e} is an {@code Optional\u003cT\u003e} that also contains"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * a reason for the error."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class Result\u003cT\u003e extends Either\u003cString, T\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * This constructor is private; use the of() and error() methods to create"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Results."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private Result(T value, String message) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // note that, by convention, an Either\u003cL, R\u003e holds the failure case in the"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // left variant, and the success case in the right variant."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        super(message, value);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Gets the contained value."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return the contained value"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @throws NoSuchElementException if the Result was invalid (ie. does not have a value)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public T getValue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return super.fromRight();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Gets the contained value."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return the contained value, optionally"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Optional\u003cT\u003e getValueOpt() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return super.fromRightOpt();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Checks whether this Result contains a value."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return true iff the Result contains a value."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean hasValue() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return super.isRight();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Gets the error message."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return the error message"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @throws NoSuchElementException if the Result was valid (ie. does not have an error message)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public String getError() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return super.fromLeft();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Gets the error message."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return the error message, optionally"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Optional\u003cString\u003e getErrorOpt() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return super.fromLeftOpt();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Checks whether this Result contains an error message."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return true iff the Result contains an error message."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean isError() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return super.isLeft();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Performs a functor map on the value of this Result, returning a new result"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * with the modified value. If the original result was an error variant, then"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * the error message is forwarded unchanged."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param fn the function to apply"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return   the new result"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public \u003cR\u003e Result\u003cR\u003e map(Function\u003c? super T, ? extends R\u003e fn) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new Result\u003cR\u003e("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            super.fromRightOpt().map(fn).orElse(null),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            super.fromLeftOpt().orElse(null)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Calls the function with the contained value iff it was not an error. This method is equivalent"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * to {@code map}, but it does not return a new value. Use it to do things to the contained value"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * in the middle of an expression."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param fn the consumer"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return   the result, unmodified."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Result\u003cT\u003e perform(Consumer\u003c? super T\u003e fn) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (this.hasValue()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            fn.accept(this.getValue());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Performs a monadic bind (\u003e\u003e\u003d) on the value of this result. This is equivalent to"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * {@code flatMap} in Java (eg. Optional)."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param fn the function to bind; it should return a Result."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return   the new result"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public \u003cR\u003e Result\u003cR\u003e then(Function\u003c? super T, ? extends Result\u003c? extends R\u003e\u003e fn) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (this.hasValue()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            // well... this is what the jdk does."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var ret \u003d (Result\u003cR\u003e) fn.apply(this.getValue());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return ret;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(this.getError());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * If the Result contains a value, return it, otherwise return {@code other}."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param other the alternative value to use"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return      either the value contained in the result, or the alternative provided"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public T orElse(T other) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return super.fromRightOpt().orElse(other);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Converts a {@code Result\u003cT\u003e} into an {@code Optional\u003cT\u003e}. If the Result contained an error, it"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * is discarded, and an empty optional is returned."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return an Optional version of this result."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Optional\u003cT\u003e toOptional() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.isError()"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            ? Optional.empty()"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            : Optional.of(this.getValue());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * If the result contains an error, throws the exception gotten from the supplier; if not, it returns"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * the result unmodified."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param sup the supplier of the exception to throw"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return    the result"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @throws E  if the result contained an error."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public \u003cE extends Throwable\u003e Result\u003cT\u003e throwIfError(Function\u003cString, ? extends E\u003e sup) throws E {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (this.isError()) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            throw sup.apply(this.getError());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * If the result contains an error, throws the exception gotten from the supplier; if not, it returns"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * the value in the result."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param sup the supplier of the exception to throw"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return    the contained value in the result (if an exception was not thrown)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @throws E  if the result contained an error."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public \u003cE extends Throwable\u003e T orElseThrow(Function\u003cString, ? extends E\u003e sup) throws E {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (this.isError()) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            throw sup.apply(this.getError());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return this.getValue();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return String.format(\"%s(%s)\","
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            this.hasValue() ? \"Result\" : \"Error\","
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            this.hasValue() ? this.getValue() : this.getError());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (!(obj instanceof Result\u003c?\u003e)) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var other \u003d (Result\u003c?\u003e) obj;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (other.hasValue() !\u003d this.hasValue()) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.hasValue()"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            ? this.getValue().equals(other.getValue())"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            : this.getError().equals(other.getError());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Flattens a result containing another result into just a single-layer result; this does not"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * work recursively (eg. {@code flatten(Result\u003cResult\u003cResult\u003cInt\u003e\u003e\u003e)} will only give you"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * {@code Result\u003cResult\u003cInt\u003e\u003e}."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * NB: I would have liked this to be a non-static method so you could call {@code expr.flatten()},"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * but by the time you have an expression, generics are already type-erased so there is no way to"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * check if the value type (T) is actually a Result or not."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param result the result to flatten"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return       a Result with one level of nesting removed."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static \u003cT\u003e Result\u003cT\u003e flatten(Result\u003cResult\u003cT\u003e\u003e result) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return result.isError()"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            ? Result.error(result.getError())"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            : result.getValue();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Flattens an {@code Optional} containing a {@code Result} into just the optional; if the outer"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * optional was empty, or it was present but the inner result was an error, then an empty optional"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * is returned (the error message of the Result, if any, is discarded). Otherwise, it returns"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * an optional containing the Result\u0027s value."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param opt the optional to flatten"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return    the flattened optional."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e flattenOptional(Optional\u003c? extends Result\u003c? extends T\u003e\u003e opt) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return opt.isPresent() \u0026\u0026 opt.get().hasValue()"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            ? Optional.of(opt.get().getValue())"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            : Optional.empty();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Transposes an {@code Optional} containing a {@code Result} into a {@code Result} containing"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * an {@code Optional}. If the outer optional was empty, then the result is valid, but contains"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * an empty optional. Otherwise, if the inner result contains an error, then a new Result with"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * that error is returned. If not then the inner result\u0027s value is returned as an optional."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * {@code"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *      Result(valid: Optional(10))     \u003d transpose(Optional.of(Result.of(10)))"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *      Result(error: \"owo\")            \u003d transpose(Optional.of(Result.error(\"owo\")))"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *      Result(valid: Optiona(empty))   \u003d transpose(Optional.empty())"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param opt the optional to transpose."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return    the transposed result."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static \u003cT\u003e Result\u003cOptional\u003cT\u003e\u003e transpose(Optional\u003cResult\u003cT\u003e\u003e opt) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (opt.isEmpty()) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.of(Optional.empty());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (opt.get().isError()) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(opt.get().getError());"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.of(Optional.of(opt.get().getValue()));"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Extracts an exception from a {@code Result\u003cEither\u003cE, T\u003e\u003e}, where the left {@code Either} is the"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * exception to throw, and the right side is the value to keep. If the outer {@code Result} contained"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * an error message, then that error message is returned unmodified."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * If not, then the inner {@code Either} is inspected; if it was a left variant (ie. a"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * {@code Throwable}), then it is thrown. Else, a Result of the right variant is returned."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param result the result to extract an exception from."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return       the resulting value (if no exception was thrown)"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @throws E     if the result\u0027s inner value was a right-variant Either."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static \u003cE extends Throwable, T\u003e Result\u003cT\u003e extractException("
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        Result\u003c? extends Either\u003c? extends E, ? extends T\u003e\u003e result) throws E {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (result.isError()) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(result.getError());"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var value \u003d result.getValue();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (value.isLeft()) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                throw value.fromLeft();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                return Result.of(value.fromRight());"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Creates a new {@code Result} containing the successfully-computed value."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param value the value"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return      a {@code Result} containing the given value"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static \u003cT\u003e Result\u003cT\u003e of(T value) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new Result\u003cT\u003e(value, null);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Creates a new {@code Result} with an error message describing why a value"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * could not be computed."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param message   the error message"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return          a {@code Result} without a value, with the given error message."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static \u003cT\u003e Result\u003cT\u003e error(String message) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new Result\u003cT\u003e(null, message);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Creates a new {@code Result} with an error message describing why a value"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * could not be computed. This version functions like {@code String::format}."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param message   the error message (format string)"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param args      the variadic format args"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return          a {@code Result} without a value, with the given error message."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static \u003cT\u003e Result\u003cT\u003e error(String message, Object... args) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new Result\u003cT\u003e(null, String.format(message, args));"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Creates a new {@code Result} containing the successfully-computed value if it was"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * non-null, or an error result if it was null."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param value the value (may be null)"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param error the error message to use if the value was null"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return      a result."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static \u003cT\u003e Result\u003cT\u003e ofNullable(T value, String error) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new Result\u003cT\u003e(value, value \u003d\u003d null ? error : null);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Creates a new {@code Result} containing the successfully-computed value if the"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * optional contained a value, or the error message if it was empty."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param value the value-containing optional"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param error the error message to use if the optional was empty"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return      a result."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static \u003cT\u003e Result\u003cT\u003e ofOptional(Optional\u003cT\u003e value, String error) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new Result\u003cT\u003e(value.orElse(null), value.isPresent() ? null : error);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 359
    }
  },
  {
    "path": "src/main/java/chopchop/util/Slice.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// Slice.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.util;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * Represents a non-owning array-like reference. Allows for efficient"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * substring-like operations."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class Slice\u003cT\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public final T[] xs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public final int begin;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public final int length;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Constructs a new Slice from the backing array"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param xs     the backing array"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param begin  the starting index of the slice"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param length the length of the slice"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Slice(T[] xs, int begin, int length) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.xs     \u003d xs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.begin  \u003d begin;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.length \u003d length;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Constructs a new Slice from the backing array. The length of the slice is the"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * length of the backing array, minus the starting offset."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param xs     the backing array"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param begin  the starting index of the slice"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Slice(T[] xs, int begin) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.xs     \u003d xs;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.begin  \u003d begin;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (begin \u003e xs.length) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            this.length \u003d 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            this.length \u003d xs.length - begin;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Constructs a new Slice from the backing array. The slice spans the whole array."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param xs     the backing array"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Slice(T[] xs) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.xs     \u003d xs;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.begin  \u003d 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.length \u003d xs.length;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Get the starting index of the slice."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return the starting index of the slice."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public int begin() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.begin;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Get one-past-the-last index of the slice."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return one-past-the-index of the slice."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public int end() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.begin + this.length;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Get the length of the slice."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return the length of the slice."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.length;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Get the ith element of the slice."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param i the index of the element to get"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return the element at the specified index"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public T get(int i) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.xs[this.begin + i];"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Get the first element of the slice."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return the first element of the slice"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public T front() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assert this.size() \u003e 0;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.xs[this.begin];"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Get the last element of the slice."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return the last element of the slice"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public T back() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assert this.size() \u003e 0;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.xs[this.begin + this.length - 1];"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Return a new slice without the first n elements. If n is larger than the length of"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * the slice, an empty slice will be returned."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param n the number of elements to drop"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return the new subslice"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Slice\u003cT\u003e drop(int n) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (this.length \u003c n) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            n \u003d this.length;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new Slice\u003cT\u003e(this.xs, this.begin + n, this.length - n);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Return a new slice with only the first n elements. If n is larger than the length of"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * the slice, a copy of the original slice will be returned."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param n the number of elements to take"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return the new subslice"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Slice\u003cT\u003e take(int n) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (this.length \u003c n) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            n \u003d this.length;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new Slice\u003cT\u003e(this.xs, this.begin, n);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Return a new slice with only the last n elements. If n is larger than the length of"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * the slice, a copy of the original slice will be returned."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param n the number of elements to take (from the back)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return the new subslice"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Slice\u003cT\u003e takeLast(int n) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (this.length \u003c n) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            n \u003d this.length;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new Slice\u003cT\u003e(this.xs, this.begin + this.length - n, n);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Return a new slice with the given bounds."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param start the starting index of the new slice"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param len   the length of the new slice"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return the new subslice"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Slice\u003cT\u003e slice(int start, int len) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new Slice\u003cT\u003e(this.xs, this.begin + start, len);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Return a Stream from the elements in the slice"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return a Stream of elements"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Stream\u003cT\u003e stream() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return Arrays.stream(this.xs)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .skip(this.begin())"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .limit(this.size());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return Arrays.toString(Arrays.copyOfRange(this.xs, this.begin(), this.end()));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (!(other instanceof Slice\u003c?\u003e)) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return ((Slice\u003c?\u003e) other).stream().collect(Collectors.toList())"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .equals(this.stream().collect(Collectors.toList()));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // just cheat"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.stream()"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .collect(Collectors.toList())"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .hashCode();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 207
    }
  },
  {
    "path": "src/main/java/chopchop/util/StreamUtils.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// StreamUtils.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.util;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class StreamUtils {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Creates a stream by zipping two streams together. The length of the resulting"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * stream is the minimum of either of the inputs."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param s1 the first stream to zip"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param s2 the second stream to zip"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return a Stream of Pairs, comprising the elements from each stream."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static \u003cT, U\u003e Stream\u003cPair\u003cT, U\u003e\u003e zip(Stream\u003cT\u003e s1, Stream\u003cU\u003e s2) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var i2 \u003d s2.iterator();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return s1.map(x1 -\u003e i2.hasNext() ? new Pair\u003c\u003e(x1, i2.next()) : null)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .takeWhile(x -\u003e x !\u003d null);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Creates a stream by zipping the input stream together with a stream of indices,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * beginning at 0. This is implemented in terms of zip(). The index is the first"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * item in the pair."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param s the stream to use"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return a Stream of Pairs, with the first item being the 0-based index"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static \u003cT\u003e Stream\u003cPair\u003cInteger, T\u003e\u003e indexed(Stream\u003cT\u003e s) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return StreamUtils.zip(Stream.iterate(0, i -\u003e i + 1), s);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 35
    }
  },
  {
    "path": "src/main/java/chopchop/util/StringView.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// StringView.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.util;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * A class representing a view over a character array (ie. a String), that allows operations like"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * drop(), take(), substr(), etc. to be implemented efficiently (without copying the underlying data)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * The class behaves like an immutable class -- most methods will return a new copy of the StringView"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * with the appropriate bounds (the array itself is not copied), except for one method -- bisect()."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * See the documentation for bisect() to learn why."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class StringView {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private char[] chars;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private int begin;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private int end;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Constructs a new string view using the contents of the given string."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param string the string to use"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public StringView(String string) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.chars \u003d string.toCharArray();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.begin \u003d 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.end   \u003d this.chars.length;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Constructs a new string view using the provided array and bounds."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param chars the array of characters to use"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param begin the starting index (inclusive) of this string view"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param end   the ending index (exclusive) of this string view"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private StringView(char[] chars, int begin, int end) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.chars \u003d chars;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.begin \u003d Math.max(begin, 0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.end   \u003d Math.min(end, this.chars.length);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assert this.begin \u003c\u003d this.end;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Reseats this string view to point to the given character array and bounds. This method"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * is required for bisect(), and violates the immutability of the string view."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param chars the array of characters to use"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param begin the starting index (inclusive) of this string view"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param end   the ending index (exclusive) of this string view"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private void set(char[] chars, int begin, int end) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.chars \u003d chars;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.begin \u003d begin;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.end   \u003d end;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Reseats this string view to refer to the same array as the given other string view, with"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * the appropriate bounds etc. This violates the immutability of the string view."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param other the source string view"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private void replaceWith(StringView other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.set(other.chars, other.begin, other.end);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Bisects this string view into two parts using the given delimiter, by splitting at the first"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * instance of the delimiter in this view. If the delimiter does not exist, the second view returned"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * will be empty, and the first will be a copy of this."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Additionally, the second view will be front-trimmed of extra instances of {@code delim}, if they"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * exist."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * This version of {@code bisect()} does not violate any immutability constraints."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param delim the delimiter to use"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return      a {@code Pair} of string views"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Pair\u003cStringView, StringView\u003e bisect(char delim) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var fst \u003d this.take(this.find(delim));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var snd \u003d this.drop(fst.size() + 1).dropWhile(x -\u003e x \u003d\u003d delim);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new Pair\u003c\u003e(fst, snd);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Bisects this string view into two parts using the given delimiter, by splitting at the first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * instance of the delimiter in this view. If the delimiter does not exist, the second view returned"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * will be empty, and the first will be a copy of this."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Additionally, the second view will be front-trimmed of extra instances of {@code delim}, if they"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * exist."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * This version of {@code bisect()} will modify both parameters {@code x} and {@code xs}, and will"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * replace their contents with the appropriate first and second parts of the split."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * The reason that {@code bisect()} is implemented in this way is to allow writing code in this manner:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * {@code"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *      xs.bisect(x, \u0027 \u0027, xs);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *      var foo \u003d x;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *      xs.bisect(x, \u0027 \u0027, xs);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *      var bar \u003d x;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * It would not be necessary if this language had some semblance of pattern matching so one could do"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * {@code var (x, xs) \u003d sv.bisect(\u0027 \u0027)}, so we have to live with this."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param x     the view in which to place the first part of the bisection"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param delim the delimiter to use"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param xs    the view in which to place the second part of the bisection"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public void bisect(StringView x, char delim, StringView xs) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var fst \u003d this.take(this.find(delim));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var snd \u003d this.drop(fst.size() + 1).dropWhile(c -\u003e c \u003d\u003d delim);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        x.replaceWith(fst);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        xs.replaceWith(snd);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Bisects this string view into two parts using the given delimiter, by splitting at the first"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * instance of the delimiter in this view. If the delimiter does not exist, the second view returned"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * will be empty, and the first will be a copy of this."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Additionally, the second view will be front-trimmed of extra instances of {@code delim}, if they"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * exist."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * This version of {@code bisect()} will modify the {@code xs} parameter, and will"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * replace its content with the second part of the split. The first part is returned normally."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param delim the delimiter to use"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param xs    the view in which to place the second part of the bisection"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return      the first part of the bisection"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public StringView bisect(char delim, StringView xs) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var fst \u003d this.take(this.find(delim));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var snd \u003d this.drop(fst.size() + 1).dropWhile(c -\u003e c \u003d\u003d delim);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        xs.replaceWith(snd);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return fst;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Gets the size of the string view."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return the size"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.end - this.begin;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Checks if the string view is empty."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return true iff the view is empty"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.size() \u003d\u003d 0;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Finds the first index at which the substring occurs."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param sub the substring to search for"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return the index at which the given substring first occurs,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *         or {@code -1} if it does not exist"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public int find(String sub) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.find(new StringView(sub));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Finds the first index at which the substring occurs."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param sub the substring to search for"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return the index at which the given substring first occurs,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *         or {@code -1} if it does not exist"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public int find(StringView sub) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return Collections.indexOfSubList(Arrays.asList(this.chars), Arrays.asList(sub.chars));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Finds the first index at which the character occurs."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param ch the character to search for"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return the index of the character, or {@code -1} if it does not exist."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public int find(char ch) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        for (int i \u003d this.begin; i \u003c this.end; i++) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (this.chars[i] \u003d\u003d ch) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                return i - this.begin;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Checks if the string view starts with the given substring. This is equivalent to"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * {@code sv.find(sub) \u003d\u003d 0}."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param sub the substring to search for"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return true iff this string view starts with the substring."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean startsWith(String sub) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.find(sub) \u003d\u003d 0;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Checks if the string view starts with the given substring. This is equivalent to"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * {@code sv.find(sub) \u003d\u003d 0}."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param sub the substring to search for"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return true iff this string view starts with the substring."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean startsWith(StringView sub) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.find(sub) \u003d\u003d 0;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Obtains the character at the given index."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param idx the index"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return the character"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public char at(int idx) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.chars[this.begin + idx];"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Gets the first character; view must not be empty."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public char front() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assert this.size() \u003e 0;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.at(0);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Gets the last character; view must not be empty."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public char back() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assert this.size() \u003e 0;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.at(this.size() - 1);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns a new string view, without the first {@code n} characters. If {@code n} is larger"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * than the size of this view, then an empty view is returned. {@code n} cannot be negative."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param n the number of characters to drop."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return a new string view without the first {@code n} characters."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public StringView drop(int n) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assert n \u003e\u003d 0;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new StringView(this.chars, Math.min(this.begin + n, this.end), this.end);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns a new string view, with only the first {@code n} characters. If {@code n} is larger"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * than the size of this view or is negative, then a copy of this view is returned."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param n the number of characters to take."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return a new string view with only first {@code n} characters."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public StringView take(int n) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (n \u003c 0) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            n \u003d this.size();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new StringView(this.chars, this.begin, Math.min(this.begin + n, this.end));"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns a new string view, with only the last {@code n} characters. If {@code n} is larger"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * than the size of this view, then a copy of this view is returned. {@code n} cannot be negative."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param n the number of characters to take."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return a new string view with only the last {@code n} characters."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public StringView takeLast(int n) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assert n \u003e\u003d 0;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new StringView(this.chars, Math.min(this.begin + n, this.end), this.end);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns a new view by dropping characters as long as the given predicate holds true;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * at the first instance where the predicate returns true, the string is returned."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param pred the predicate to use"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return a new string view"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public StringView dropWhile(Predicate\u003cCharacter\u003e pred) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        int i \u003d this.begin;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        while (i \u003c this.end \u0026\u0026 pred.test(this.chars[i])) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            i +\u003d 1;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new StringView(this.chars, i, this.end);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns a new view by taking characters as long as the given predicate holds true;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * at the first instance where the predicate returns false, the string is returned."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param pred the predicate to use"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return a new string view"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public StringView takeWhile(Predicate\u003cCharacter\u003e pred) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        int n \u003d this.begin;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        while (n \u003c this.end \u0026\u0026 pred.test(this.chars[n])) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            n +\u003d 1;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new StringView(this.chars, this.begin, n);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns a pair of string views; the first one is equivalent to {@code this.takeWhile(pred)}, and"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * the second one is equivalent to {@code this.dropWhile(pred)}. Essentially this splits a string"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * into two based on the predicate."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param pred the predicate to use"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return a pair of string views"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Pair\u003cStringView, StringView\u003e span(Predicate\u003cCharacter\u003e pred) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new Pair\u003c\u003e("
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            this.takeWhile(pred),"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            this.dropWhile(pred)"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Removes whitespace from both the beginning and the end of the string view. \u0027Whitespace\u0027 is"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * determined by calling {@code Character::isWhitespace}."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public StringView trim() {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // there\u0027s a more efficient way, but i don\u0027t want to write dropWhileBack() right now."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new StringView(this.toString().strip());"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns a new view containing {@code n} characters at the front which were previously dropped."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * For example:"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * {@code"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *     var sv \u003d StringView(\"asdf\").drop(1);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *     assert sv.undrop(1).equals(\"asdf\");"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param n the number of characters to undrop"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return a new string view"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public StringView undrop(int n) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new StringView(this.chars, Math.max(0, this.begin - n), this.end);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns a lowercase version of this string view."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public StringView lowercase() {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new StringView(this.toString().toLowerCase());"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns an uppercase version of this string view."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public StringView uppercase() {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new StringView(this.toString().toUpperCase());"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Splits the given stringview into a list of words by whitespace."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public List\u003cString\u003e words() {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var ret \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var sv \u003d this;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        while (!sv.isEmpty()) {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            sv \u003d sv.dropWhile(Character::isWhitespace);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var word \u003d sv.takeWhile(x -\u003e !Character.isWhitespace(x));"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            ret.add(word.toString());"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            sv \u003d sv.dropWhile(x -\u003e !Character.isWhitespace(x));"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return ret;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Attempt to parse an integer from the contents of this string view."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return a Result containing either the parsed integer, or an error message."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Result\u003cInteger\u003e parseInt() {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.of(Integer.parseInt(this.toString()));"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(e.getMessage());"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Attempt to parse a double from the contents of this string view."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return a Result containing either the parsed double, or an error message."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Result\u003cDouble\u003e parseDouble() {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.of(Double.parseDouble(this.toString()));"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(e.getMessage());"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new String(this.chars, this.begin, this.size());"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Provides operator\u003d\u003d for StringView. This method works for both {@code String} instances"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * as well as {@code StringView} instances."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param obj the object to compare"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return true iff the string contents are equal"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (obj instanceof String) {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var other \u003d (String) obj;"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Arrays.equals("
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                this.chars, this.begin, this.end,"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                other.toCharArray(), 0, other.length()"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            );"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else if (obj instanceof StringView) {"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var other \u003d (StringView) obj;"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Arrays.equals("
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                this.chars, this.begin, this.end,"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                other.chars, other.begin, other.end"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            );"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.toString().hashCode();"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 465
    }
  },
  {
    "path": "src/main/java/chopchop/util/Strings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// Strings.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.util;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.parser.ArgName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * Defines user-facing strings for the whole program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class Strings {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    // argument names"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static final ArgName ARG_STEP            \u003d new ArgName(\"step\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static final ArgName ARG_INGREDIENT      \u003d new ArgName(\"ingredient\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static final ArgName ARG_QUANTITY        \u003d new ArgName(\"qty\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static final ArgName ARG_EXPIRY          \u003d new ArgName(\"expiry\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    // command names"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static final String COMMAND_ADD          \u003d \"add\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static final String COMMAND_HELP         \u003d \"help\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static final String COMMAND_LIST         \u003d \"list\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static final String COMMAND_FIND         \u003d \"find\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static final String COMMAND_DELETE       \u003d \"delete\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    // command targets"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    // public static final String TARGET_RECIPE        \u003d \"recipe\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    // public static final String TARGET_INGREDIENT    \u003d \"ingredient\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 7,
      "zhiayang": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Constructs {@code GuiSettings}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Constructs {@code GuiSettings}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 2,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Constructs {@code Version}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 1,
      "-": 115
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import seedu.address.logic.history.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import seedu.address.logic.history.History;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import seedu.address.logic.history.HistoryManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private final History history;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Constructs {@code LogicManager}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        history \u003d new HistoryManager();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        commandResult \u003d command.execute(model, history);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        if (!(command instanceof UndoCommand"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                || command instanceof RedoCommand"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                || command instanceof HistoryCommand)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            history.add(new CommandHistory(commandText, command));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 1,
      "seowalex": 15,
      "-": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import seedu.address.logic.history.History;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seowalex"
        },
        "content": "public class AddCommand extends Command implements Undoable {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public static final String MESSAGE_REVERSE_SUCCESS \u003d \"Person unadded: %1$s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public static final String MESSAGE_NONEXISTENT_PERSON \u003d \"This person does not exist in the address book\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public CommandResult execute(Model model, History history) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public CommandResult undo(Model model) throws CommandException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        if (!model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            throw new CommandException(MESSAGE_NONEXISTENT_PERSON);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        model.deletePerson(toAdd);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_REVERSE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public CommandResult redo(Model model, History history) throws CommandException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return execute(model, history);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seowalex": 22,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import seedu.address.logic.history.History;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seowalex"
        },
        "content": "public class ClearCommand extends Command implements Undoable {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public static final String MESSAGE_REVERSE_SUCCESS \u003d \"Address book has been restored!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public static final String MESSAGE_ADDRESSBOOK_NOT_CLEARED \u003d \"Address book was not cleared!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private ReadOnlyAddressBook addressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public CommandResult execute(Model model, History history) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        addressBook \u003d new AddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public CommandResult undo(Model model) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        if (model.getAddressBook().getPersonList().size() !\u003d 0 || addressBook \u003d\u003d null) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            throw new CommandException(MESSAGE_ADDRESSBOOK_NOT_CLEARED);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        model.setAddressBook(addressBook);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return new CommandResult(MESSAGE_REVERSE_SUCCESS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public CommandResult redo(Model model, History history) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return execute(model, history);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seowalex": 26,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import seedu.address.logic.history.History;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * @param history {@code History} which the command should record to."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * @return feedback message of the operation result for display."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public abstract CommandResult execute(Model model, History history) throws CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seowalex": 4,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import seedu.address.logic.history.History;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seowalex"
        },
        "content": "public class DeleteCommand extends Command implements Undoable {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public static final String MESSAGE_REVERSE_SUCCESS \u003d \"Person undeleted: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private Person personToDelete;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public CommandResult execute(Model model, History history) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public CommandResult undo(Model model) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        if (model.hasPerson(personToDelete)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        model.addPerson(personToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_REVERSE_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public CommandResult redo(Model model, History history) throws CommandException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return execute(model, history);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seowalex": 25,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import seedu.address.logic.history.History;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seowalex"
        },
        "content": "public class EditCommand extends Command implements Undoable {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public static final String MESSAGE_REVERSE_SUCCESS \u003d \"Unedited Person: %1$s\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public static final String MESSAGE_NONEXISTENT_PERSON \u003d \"This person does not exist in the address book\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private Person personToEdit;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private Person editedPerson;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public CommandResult execute(Model model, History history) throws CommandException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public CommandResult undo(Model model) throws CommandException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        if (!model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            throw new CommandException(MESSAGE_NONEXISTENT_PERSON);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        if (!editedPerson.isSamePerson(personToEdit) \u0026\u0026 model.hasPerson(personToEdit)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        model.setPerson(editedPerson, personToEdit);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_REVERSE_SUCCESS, personToEdit));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public CommandResult redo(Model model, History history) throws CommandException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return execute(model, history);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seowalex": 30,
      "-": 222
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import seedu.address.logic.history.History;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public CommandResult execute(Model model, History history) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seowalex": 2,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import seedu.address.logic.history.History;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public CommandResult execute(Model model, History history) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seowalex": 2,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import seedu.address.logic.history.History;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public CommandResult execute(Model model, History history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seowalex": 2,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HistoryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seowalex"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import seedu.address.logic.history.History;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seowalex"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seowalex"
        },
        "content": " * Lists all previous commands."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seowalex"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seowalex"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public static final String MESSAGE_NO_HISTORY \u003d \"No history found\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public CommandResult execute(Model model, History history) throws CommandException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        String historyResults \u003d history.getHistory();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        if (historyResults.isBlank()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            throw new CommandException(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return new CommandResult(historyResults);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seowalex": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import seedu.address.logic.history.History;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public CommandResult execute(Model model, History history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seowalex": 2,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seowalex"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import seedu.address.logic.history.History;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seowalex"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seowalex"
        },
        "content": " * Redo the last redoable command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seowalex"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seowalex"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public CommandResult execute(Model model, History history) throws CommandException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return history.redo(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seowalex": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seowalex"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import seedu.address.logic.history.History;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seowalex"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seowalex"
        },
        "content": " * Undo the last undoable command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seowalex"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seowalex"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public CommandResult execute(Model model, History history) throws CommandException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return history.undo(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seowalex": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/Undoable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seowalex"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import seedu.address.logic.history.History;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seowalex"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": " * Represents an undoable command with the ability to be undone and redone."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seowalex"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seowalex"
        },
        "content": "public interface Undoable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * @param history {@code History} which the command should record to."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    CommandResult execute(Model model, History history) throws CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Undo the command and returns the result message."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    CommandResult undo(Model model) throws CommandException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Redo the command and returns the result message."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * @param history {@code History} which the command should record to."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    CommandResult redo(Model model, History history) throws CommandException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seowalex": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/history/CommandHistory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seowalex"
        },
        "content": "package seedu.address.logic.history;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import seedu.address.logic.commands.Undoable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seowalex"
        },
        "content": " * Represents a command history."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seowalex"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seowalex"
        },
        "content": "public class CommandHistory {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private final String commandText;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private final Undoable command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * @param commandText of the command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * @param command the command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public CommandHistory(String commandText, Command command) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.commandText \u003d commandText;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        if (command instanceof Undoable) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            this.command \u003d (Undoable) command;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            this.command \u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Gets the command text."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public String getCommandText() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return commandText;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Gets the undoable command if it exists."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * @return An Optional of the undoable command."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public Optional\u003cUndoable\u003e getCommand() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return Optional.ofNullable(command);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seowalex": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/history/History.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seowalex"
        },
        "content": "package seedu.address.logic.history;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seowalex"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": " * API of the History component"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seowalex"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seowalex"
        },
        "content": "public interface History {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Adds an undoable command to the history."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    void add(CommandHistory command);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Undo a command and returns the result. Skips any commands that are not undoable."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * @param model {@code Model} which the undo should operate on."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * @return feedback message of the operation result for display."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * @throws CommandException If an error occurs during undo execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    CommandResult undo(Model model) throws CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Redo a command and returns the result. Skips any commands that are not redoable."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * @param model {@code Model} which the redo should operate on."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * @return feedback message of the operation result for display."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * @throws CommandException If an error occurs during redo execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    CommandResult redo(Model model) throws CommandException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Returns the command history in reverse chronological order."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    String getHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seowalex": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/history/HistoryManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seowalex"
        },
        "content": "package seedu.address.logic.history;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import java.util.ListIterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import java.util.StringJoiner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import seedu.address.logic.commands.Undoable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seowalex"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seowalex"
        },
        "content": " * The HistoryManager of the main LogicManager."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seowalex"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seowalex"
        },
        "content": "public class HistoryManager implements History {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public static final String MESSAGE_CANNOT_UNDO \u003d \"No commands to undo\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public static final String MESSAGE_CANNOT_REDO \u003d \"No commands to redo\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private final List\u003cCommandHistory\u003e commandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private int currentIndex;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Constructs a {@code HistoryManager}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public HistoryManager() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        commandHistory \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        currentIndex \u003d 0;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public void add(CommandHistory command) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        commandHistory.subList(currentIndex, commandHistory.size()).clear();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        commandHistory.add(command);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        currentIndex \u003d commandHistory.size();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public CommandResult undo(Model model) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        for (int i \u003d currentIndex - 1; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            Optional\u003cUndoable\u003e command \u003d commandHistory.get(i).getCommand();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            if (command.isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                currentIndex \u003d i;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                return command.get().undo(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        throw new CommandException(MESSAGE_CANNOT_UNDO);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public CommandResult redo(Model model) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        while (currentIndex \u003c commandHistory.size()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            Optional\u003cUndoable\u003e command \u003d commandHistory.get(currentIndex).getCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            currentIndex++;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            if (command.isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                return command.get().redo(model, this);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        throw new CommandException(MESSAGE_CANNOT_REDO);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public String getHistory() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        StringJoiner sj \u003d new StringJoiner(\"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        ListIterator\u003cCommandHistory\u003e reversedHistory \u003d commandHistory.listIterator(currentIndex);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        while (reversedHistory.hasPrevious()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            CommandHistory command \u003d reversedHistory.previous();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            sj.add(command.getCommandText());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return sj.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seowalex": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seowalex": 12,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Constructs {@code StorageManagers}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 1,
      "Trav1sT": 1,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Constructs {@code CommandBox}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 1,
      "-": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://se-education.org/addressbook-level3/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        root.sizeToScene();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 1,
      "-": 102
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Constructs {@code MainWindow}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 1,
      "-": 195
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Constructs {@code PersonCard}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 1,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListView\u003cPerson\u003e personListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Constructs {@code PersonListPanel}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setItems(personList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 1,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Constructs {@code StatusBarFooter}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 1,
      "Trav1sT": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/recipe.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Constructs {@code UiManager}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 1,
      "-": 87,
      "fall9x": 1
    }
  },
  {
    "path": "src/main/resources/view/CommandBox2.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?import java.net.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?import javafx.scene.shape.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003cStackPane alignment\u003d\"CENTER_LEFT\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        \u003cURL value\u003d\"@Style.css\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": "      \u003cRectangle arcHeight\u003d\"32.0\" arcWidth\u003d\"48.0\" fill\u003d\"#ebe1ce\" height\u003d\"262.0\" stroke\u003d\"BLACK\" strokeType\u003d\"INSIDE\" width\u003d\"290.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            \u003cStackPane alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                  \u003cTextField fx:id\u003d\"commandTextField\" maxHeight\u003d\"48.0\" maxWidth\u003d\"290.0\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            \u003cTextArea fx:id\u003d\"displayBox\" prefHeight\u003d\"208.0\" prefWidth\u003d\"304.0\" text\u003d\"\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "fall9x": 25
    }
  },
  {
    "path": "src/main/resources/view/DisplayPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?import javafx.scene.image.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003cBorderPane prefHeight\u003d\"520.0\" prefWidth\u003d\"624.0\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    \u003ccenter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        \u003cStackPane fx:id\u003d\"displayAreaPlaceholder\" prefHeight\u003d\"470.0\" prefWidth\u003d\"624.0\" BorderPane.alignment\u003d\"TOP_CENTER\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    \u003c/center\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": "   \u003cbottom\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        \u003cHBox fillHeight\u003d\"false\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"59.0\" prefWidth\u003d\"624.0\" BorderPane.alignment\u003d\"TOP_CENTER\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                \u003cButton maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleRecipePanel\" styleClass\u003d\"tab-button\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                    \u003cgraphic\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                        \u003cVBox alignment\u003d\"CENTER\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" mouseTransparent\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                                \u003cImageView fitHeight\u003d\"32.0\" fitWidth\u003d\"32.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                                    \u003cimage\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                                        \u003cImage url\u003d\"@../images/recipe.png\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                                    \u003c/image\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                                \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                                \u003cPane HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                                \u003cLabel styleClass\u003d\"label-button\" text\u003d\"Recipes\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                    \u003c/graphic\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                \u003c/Button\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                \u003cButton maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleIngredientPanel\" styleClass\u003d\"tab-button\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                    \u003cgraphic\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                        \u003cVBox alignment\u003d\"CENTER\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" mouseTransparent\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                                \u003cImageView fitHeight\u003d\"32.0\" fitWidth\u003d\"32.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                                    \u003cimage\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                                        \u003cImage url\u003d\"@../images/ingredients.png\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                                    \u003c/image\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                                \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                                \u003cPane HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                                \u003cLabel styleClass\u003d\"label-button\" text\u003d\"Ingredients\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                    \u003c/graphic\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                \u003c/Button\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                \u003cButton maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleRecommendations\" styleClass\u003d\"tab-button\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                    \u003cgraphic\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                        \u003cVBox alignment\u003d\"CENTER\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" mouseTransparent\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                                \u003cImageView fitHeight\u003d\"32.0\" fitWidth\u003d\"32.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                                    \u003cimage\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                                        \u003cImage url\u003d\"@../images/recommendations.png\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                                    \u003c/image\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                                \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                                \u003cPane HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                                \u003cLabel styleClass\u003d\"label-button\" text\u003d\"Recommendations\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                    \u003c/graphic\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                \u003c/Button\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                \u003cButton maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleFavourites\" styleClass\u003d\"tab-button\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                    \u003cgraphic\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                        \u003cVBox alignment\u003d\"CENTER\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" mouseTransparent\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                                \u003cImageView fitHeight\u003d\"32.0\" fitWidth\u003d\"32.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                                    \u003cimage\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                                        \u003cImage url\u003d\"@../images/favourites.png\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                                    \u003c/image\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                                \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                                \u003cPane HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                                \u003cLabel styleClass\u003d\"label-button\" text\u003d\"Favourites\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                    \u003c/graphic\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                \u003c/Button\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fall9x"
        },
        "content": "   \u003c/bottom\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c/BorderPane\u003e"
      }
    ],
    "authorContributionMap": {
      "fall9x": 77
    }
  },
  {
    "path": "src/main/resources/view/IngredientCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003cStackPane xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    \u003cButton mnemonicParsing\u003d\"false\" prefHeight\u003d\"140.0\" prefWidth\u003d\"168.0\" styleClass\u003d\"recipe-button\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        \u003cgraphic\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"recipe_name_label\" text\u003d\"\\$name\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        \u003c/graphic\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "fall9x": 11
    }
  },
  {
    "path": "src/main/resources/view/IngredientViewPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?import javafx.geometry.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003cBorderPane xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    \u003cbottom\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"ingredientPanel\" pannable\u003d\"true\" prefHeight\u003d\"470.0\" prefWidth\u003d\"624.0\" vbarPolicy\u003d\"NEVER\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                \u003cGridPane fx:id\u003d\"ingredientGridView\" gridLinesVisible\u003d\"true\" hgap\u003d\"20\" vgap\u003d\"10\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                        \u003cInsets bottom\u003d\"20.0\" left\u003d\"20.0\" right\u003d\"20.0\" top\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                    \u003c/padding\u003e\u003c/GridPane\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    \u003c/bottom\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c/BorderPane\u003e"
      }
    ],
    "authorContributionMap": {
      "fall9x": 18
    }
  },
  {
    "path": "src/main/resources/view/MainWindow2.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?import java.net.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?import javafx.stage.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003cfx:root onCloseRequest\u003d\"#handleExit\" title\u003d\"ChopChop\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": "   \u003cscene\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": "      \u003cScene\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": "         \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": "              \u003cURL value\u003d\"@Style.css\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": "         \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "         \u003cBorderPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"570.0\" prefWidth\u003d\"928.0\" styleClass\u003d\"main-pane\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            \u003ctop\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": "               \u003cMenuBar fx:id\u003d\"menuBar\" prefWidth\u003d\"928.0\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                 \u003cmenus\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                   \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                     \u003citems\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                       \u003cMenuItem fx:id\u003d\"handleMenuExit\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                     \u003c/items\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                   \u003c/Menu\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                   \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                     \u003citems\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                       \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Docs\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                     \u003c/items\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                   \u003c/Menu\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                 \u003c/menus\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fall9x"
        },
        "content": "               \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            \u003c/top\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            \u003cright\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fall9x"
        },
        "content": "               \u003cVBox prefHeight\u003d\"520.0\" prefWidth\u003d\"304.0\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                      \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" prefHeight\u003d\"262.0\" prefWidth\u003d\"304.0\" BorderPane.alignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                      \u003cPane prefHeight\u003d\"3.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                      \u003cStackPane fx:id\u003d\"pinBoxPlaceholder\" prefHeight\u003d\"270.0\" prefWidth\u003d\"304.0\" BorderPane.alignment\u003d\"TOP_CENTER\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fall9x"
        },
        "content": "               \u003c/VBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            \u003c/right\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            \u003cleft\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fall9x"
        },
        "content": "               \u003cStackPane fx:id\u003d\"displayPlaceholder\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"530.0\" prefWidth\u003d\"624.0\" BorderPane.alignment\u003d\"TOP_CENTER\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            \u003c/left\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fall9x"
        },
        "content": "         \u003c/BorderPane\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fall9x"
        },
        "content": "      \u003c/Scene\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fall9x"
        },
        "content": "   \u003c/scene\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "fall9x": 47
    }
  },
  {
    "path": "src/main/resources/view/NotificationWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Notification\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        \u003cImage url\u003d\"@/images/timer.png\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                    \u003cLabel fx:id\u003d\"notificationMessage\" text\u003d\"Label\" prefWidth\u003d\"250.0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                            \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "fall9x": 33
    }
  },
  {
    "path": "src/main/resources/view/PinBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?import java.net.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?import javafx.scene.shape.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003cStackPane alignment\u003d\"CENTER_LEFT\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        \u003cURL value\u003d\"@Style.css\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        \u003cRectangle styleClass\u003d\"pins-background\" arcHeight\u003d\"32.0\" arcWidth\u003d\"48.0\"  height\u003d\"270.0\" stroke\u003d\"BLACK\" strokeType\u003d\"INSIDE\" width\u003d\"290.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        \u003cTextArea fx:id\u003d\"pins\" maxHeight\u003d\"262.0\" maxWidth\u003d\"304.0\" prefHeight\u003d\"320.0\" prefWidth\u003d\"290.0\" text\u003d\"\\$pins\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "fall9x": 16
    }
  },
  {
    "path": "src/main/resources/view/RecipeCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?import java.net.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?import javafx.scene.image.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003cStackPane xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "   \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": "      \u003cURL value\u003d\"@Style.css\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": "   \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": "   \u003cButton mnemonicParsing\u003d\"false\" onAction\u003d\"#handleSelectRecipe\" prefHeight\u003d\"140.0\" prefWidth\u003d\"168.0\" styleClass\u003d\"recipe-button\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": "      \u003cgraphic\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": "         \u003cVBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": "               \u003cImageView fitHeight\u003d\"70.0\" fitWidth\u003d\"90.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" \u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                  \u003cimage\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                     \u003cImage url\u003d\"@../images/recipe.png\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                  \u003c/image\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "               \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": "               \u003cLabel fx:id\u003d\"name\" alignment\u003d\"CENTER\" styleClass\u003d\"recipe_name_label\" text\u003d\"\\$name\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": "               \u003cHBox prefHeight\u003d\"100.0\" prefWidth\u003d\"200.0\" alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                     \u003cImageView fitHeight\u003d\"20.0\" fitWidth\u003d\"20.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                        \u003cimage\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                           \u003cImage url\u003d\"@../images/pink_timer.png\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                        \u003c/image\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                     \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                     \u003cPane prefHeight\u003d\"4.0\" prefWidth\u003d\"4.0\"\u003e\u003c/Pane\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                     \u003cLabel text\u003d\"X mins\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                     \u003cPane prefHeight\u003d\"10.0\" prefWidth\u003d\"20.0\"\u003e\u003c/Pane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                     \u003cImageView fitHeight\u003d\"20.0\" fitWidth\u003d\"20.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                        \u003cimage\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                           \u003cImage url\u003d\"@../images/pax.png\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                        \u003c/image\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                     \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                     \u003cPane prefHeight\u003d\"4.0\" prefWidth\u003d\"4.0\"\u003e\u003c/Pane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                     \u003cLabel text\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                  \u003c/children\u003e\u003c/HBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fall9x"
        },
        "content": "         \u003c/VBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fall9x"
        },
        "content": "      \u003c/graphic\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "fall9x": 43
    }
  },
  {
    "path": "src/main/resources/view/RecipeDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003cBorderPane prefHeight\u003d\"470.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": "   \u003cleft\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": "      \u003cHBox BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            \u003cPane prefHeight\u003d\"400.0\" prefWidth\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            \u003cVBox prefHeight\u003d\"470.0\" prefWidth\u003d\"288.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                  \u003cVBox\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                        \u003cTextArea fx:id\u003d\"recipeName\" prefHeight\u003d\"230.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                  \u003cPane prefHeight\u003d\"5.0\" prefWidth\u003d\"300.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                  \u003cTextArea fx:id\u003d\"ingredientDisplay\" prefHeight\u003d\"233.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": "   \u003c/left\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": "   \u003cright\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": "      \u003cHBox BorderPane.alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fall9x"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            \u003cTextArea fx:id\u003d\"instructionDisplay\" prefHeight\u003d\"465.0\" prefWidth\u003d\"310.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            \u003cPane prefHeight\u003d\"400.0\" prefWidth\u003d\"8.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fall9x"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fall9x"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fall9x"
        },
        "content": "   \u003c/right\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c/BorderPane\u003e"
      }
    ],
    "authorContributionMap": {
      "fall9x": 33
    }
  },
  {
    "path": "src/main/resources/view/RecipeViewPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?import javafx.geometry.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003cBorderPane xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "   \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": "      \u003cURL value\u003d\"@Style.css\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": "   \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": "   \u003cbottom\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"recipePanel\" pannable\u003d\"true\" prefHeight\u003d\"470.0\" prefWidth\u003d\"610.0\" vbarPolicy\u003d\"NEVER\" BorderPane.alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            \u003cGridPane fx:id\u003d\"recipeGridView\" gridLinesVisible\u003d\"true\" hgap\u003d\"20\" vgap\u003d\"10\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                  \u003cInsets bottom\u003d\"20.0\" left\u003d\"20.0\" right\u003d\"20.0\" top\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": "               \u003c/padding\u003e\u003c/GridPane\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": "   \u003c/bottom\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c/BorderPane\u003e"
      }
    ],
    "authorContributionMap": {
      "fall9x": 22
    }
  },
  {
    "path": "src/main/resources/view/TextDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003cStackPane xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        \u003cURL value\u003d\"@Style.css\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    \u003cTextArea fx:id\u003d\"textDisplay\" text\u003d\"\\$text\" prefHeight\u003d\"300.0\" prefWidth\u003d\"300.0\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "fall9x": 12
    }
  },
  {
    "path": "src/test/java/chopchop/logic/commands/AddIngredientCommandIntTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.getTypicalIngredientBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.recipe.RecipeBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.testutil.IngredientBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class AddIngredientCommandIntTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        model \u003d new ModelManager(new RecipeBook(), getTypicalIngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void execute_newIngredient_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        Ingredient validIngredient \u003d new IngredientBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new RecipeBook(), model.getIngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        expectedModel.addIngredient(validIngredient);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertCommandSuccess(new AddIngredientCommand(validIngredient), model,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            String.format(AddIngredientCommand.MESSAGE_SUCCESS, validIngredient), expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 32
    }
  },
  {
    "path": "src/test/java/chopchop/logic/commands/AddIngredientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ModelStub;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.units.Volume;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.IngredientBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.ReadOnlyIngredientBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.testutil.IngredientBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class AddIngredientCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void constructor_nullIngredient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddIngredientCommand(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void execute_ingredientAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var modelStub \u003d new ModelStubAcceptingIngredientAdded();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var validIngredient \u003d new IngredientBuilder().build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var commandResult \u003d new AddIngredientCommand(validIngredient).execute(modelStub);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertEquals(String.format(AddIngredientCommand.MESSAGE_SUCCESS, validIngredient),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertEquals(Arrays.asList(validIngredient), modelStub.ingredientsAdded);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public void add_ingredients_combine() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var milk1 \u003d new IngredientBuilder().withName(\"milk\").withQuantity(Volume.litres(0.7)).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var milk2 \u003d new IngredientBuilder().withName(\"MILK\").withQuantity(Volume.cups(1)).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var milk3 \u003d new IngredientBuilder().withName(\"milk\").withQuantity(Volume.millilitres(950)).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var modelStub \u003d new ModelStubAcceptingIngredientAdded();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(String.format(AddIngredientCommand.MESSAGE_SUCCESS, milk1),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            new AddIngredientCommand(milk1).execute(modelStub).getFeedbackToUser());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var out2 \u003d new AddIngredientCommand(milk2).execute(modelStub).getFeedbackToUser();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        System.err.println(out2);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(String.format(AddIngredientCommand.MESSAGE_COMBINED, milk3), out2);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var apple \u003d new IngredientBuilder().withName(\"Apple\").build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var banana \u003d new IngredientBuilder().withName(\"Banana\").build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var addAppleCommand \u003d new AddIngredientCommand(apple);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var addBananaCommand \u003d new AddIngredientCommand(banana);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(addAppleCommand.equals(addAppleCommand));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var addAliceCommandCopy \u003d new AddIngredientCommand(apple);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(addAppleCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(addAppleCommand.equals(1));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(addAppleCommand.equals(null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // different ingredient -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(addAppleCommand.equals(addBananaCommand));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * A Model stub that contains a single ingredient."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private class ModelStubWithIngredient extends ModelStub {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        private final Ingredient ingredient;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        ModelStubWithIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            requireNonNull(ingredient);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            this.ingredient \u003d ingredient;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        public boolean hasIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            requireNonNull(ingredient);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return this.ingredient.equals(ingredient);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        public Optional\u003cIngredient\u003e findIngredientWithName(Name name) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            requireNonNull(name);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return this.ingredient.getName().equals(name)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                ? Optional.of(this.ingredient)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                : Optional.empty();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * A Model stub that always accept the ingredient being added."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private class ModelStubAcceptingIngredientAdded extends ModelStub {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        final ArrayList\u003cIngredient\u003e ingredientsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        public boolean hasIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            requireNonNull(ingredient);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return ingredientsAdded.stream().anyMatch(ingredient::equals);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        public void addIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            requireNonNull(ingredient);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            ingredientsAdded.add(ingredient);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        public Optional\u003cIngredient\u003e findIngredientWithName(Name name) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            requireNonNull(name);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return this.ingredientsAdded"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                .filter(i -\u003e i.getName().equals(name))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        public void setIngredient(Ingredient target, Ingredient editedIngredient) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var i \u003d this.ingredientsAdded.indexOf(target);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (i \u003d\u003d -1) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                throw new NoSuchElementException(\"ingredient not found\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            this.ingredientsAdded.set(i, editedIngredient);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        public ReadOnlyIngredientBook getIngredientBook() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return new IngredientBook();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 67,
      "Trav1sT": 87
    }
  },
  {
    "path": "src/test/java/chopchop/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.parser.ItemReference;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.attributes.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.IngredientBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final String VALID_INGREDIENT_NAME_APRICOT \u003d \"Apricot\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final String VALID_INGREDIENT_NAME_BANANA \u003d \"Banana\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final String VALID_INGREDIENT_NAME_CUSTARD \u003d \"Custard\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final double VALID_INGREDIENT_QTY_APRICOT \u003d 1000000;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static final double VALID_INGREDIENT_QTY_BANANA \u003d 17;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final double VALID_INGREDIENT_QTY_CUSTARD \u003d 18;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final String VALID_INGREDIENT_EXPIRY_APRICOT \u003d \"2020-12-01\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final String VALID_INGREDIENT_EXPIRY_BANANA \u003d \"2021-10-13\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final String VALID_INGREDIENT_EXPIRY_CUSTARD \u003d \"2020-04-04\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final String VALID_RECIPE_NAME_APRICOT_SALAD \u003d \"Apricot Salad\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final String VALID_RECIPE_NAME_BANANA_SALAD \u003d \"Banana Salad\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final String VALID_RECIPE_NAME_CUSTARD_SALAD \u003d \"Custard Salad\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        IngredientBook expectedIndBook \u003d new IngredientBook(actualModel.getIngredientBook());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        List\u003cIngredient\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredIngredientList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertEquals(expectedIndBook, actualModel.getIngredientBook());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredIngredientList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static void showPersonAtIndex(Model model, ItemReference targetIndex) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertTrue(targetIndex.getZeroIndex() \u003c model.getFilteredIngredientList().size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        Ingredient person \u003d model.getFilteredIngredientList().get(targetIndex.getZeroIndex());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        model.updateFilteredIngredientList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertEquals(1, model.getFilteredIngredientList().size());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 2,
      "zhiayang": 5,
      "Trav1sT": 78
    }
  },
  {
    "path": "src/test/java/chopchop/logic/commands/DeleteIngredientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.ModelManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.UserPrefs;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.recipe.RecipeBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.parser.ItemReference;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.testutil.TypicalReferences.INDEXED_FIRST;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.testutil.TypicalReferences.INDEXED_SECOND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.getTypicalIngredientBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class DeleteIngredientCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private Model model \u003d new ModelManager(new RecipeBook(), getTypicalIngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var indToDelete \u003d model.getFilteredIngredientList().get(INDEXED_FIRST.getZeroIndex());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var deleteCommand \u003d new DeleteIngredientCommand(INDEXED_FIRST);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteIngredientCommand.MESSAGE_DELETE_INGREDIENT_SUCCESS, indToDelete);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var expectedModel \u003d new ModelManager(new RecipeBook(), model.getIngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        expectedModel.deleteIngredient(indToDelete);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var outOfBoundIndex \u003d ItemReference.ofOneIndex(model.getFilteredIngredientList().size() + 1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var deleteCommand \u003d new DeleteIngredientCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_INGREDIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        showPersonAtIndex(model, INDEXED_FIRST);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var indToDelete \u003d model.getFilteredIngredientList().get(INDEXED_FIRST.getZeroIndex());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var deleteCommand \u003d new DeleteIngredientCommand(INDEXED_FIRST);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var expectedMessage \u003d String.format(DeleteIngredientCommand.MESSAGE_DELETE_INGREDIENT_SUCCESS, indToDelete);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var expectedModel \u003d new ModelManager(new RecipeBook(), model.getIngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        expectedModel.deleteIngredient(indToDelete);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        showNoIngredient(expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        showPersonAtIndex(model, INDEXED_FIRST);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var outOfBoundIndex \u003d INDEXED_SECOND;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of ingredient book list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroIndex() \u003c model.getIngredientBook().getFoodEntryList().size());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        DeleteIngredientCommand deleteCommand \u003d new DeleteIngredientCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_INGREDIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var deleteFirstCommand \u003d new DeleteIngredientCommand(INDEXED_FIRST);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var deleteSecondCommand \u003d new DeleteIngredientCommand(INDEXED_SECOND);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var deleteFirstCommandCopy \u003d new DeleteIngredientCommand(INDEXED_FIRST);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private void showNoIngredient(Model model) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        model.updateFilteredIngredientList(p -\u003e false);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(model.getFilteredIngredientList().isEmpty());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 27,
      "Trav1sT": 78
    }
  },
  {
    "path": "src/test/java/chopchop/logic/commands/FindIngredientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.commons.core.Messages.MESSAGE_INGREDIENTS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.APRICOT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.BANANA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.getTypicalIngredientBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.attributes.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.recipe.RecipeBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class FindIngredientCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private Model model \u003d new ModelManager(new RecipeBook(), getTypicalIngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(new RecipeBook(), getTypicalIngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var firstPredicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var secondPredicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var findFirstCommand \u003d new FindIngredientCommand(firstPredicate);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var findSecondCommand \u003d new FindIngredientCommand(secondPredicate);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var findFirstCommandCopy \u003d new FindIngredientCommand(firstPredicate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var expectedMessage \u003d String.format(MESSAGE_INGREDIENTS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var command \u003d new FindIngredientCommand(predicate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        expectedModel.updateFilteredIngredientList(predicate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredIngredientList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void execute_multipleKeywords_multipleIngredientsFound() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var expectedMessage \u003d String.format(MESSAGE_INGREDIENTS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var predicate \u003d preparePredicate(\"apricot banana\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var command \u003d new FindIngredientCommand(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        expectedModel.updateFilteredIngredientList(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertEquals(Arrays.asList(APRICOT, BANANA), model.getFilteredIngredientList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 11,
      "Trav1sT": 64
    }
  },
  {
    "path": "src/test/java/chopchop/logic/commands/ListIngredientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.testutil.TypicalReferences.INDEXED_FIRST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.getTypicalIngredientBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.recipe.RecipeBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class ListIngredientCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        model \u003d new ModelManager(new RecipeBook(), getTypicalIngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        expectedModel \u003d new ModelManager(new RecipeBook(), model.getIngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertCommandSuccess(new ListIngredientCommand(), model, ListIngredientCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        showPersonAtIndex(model, INDEXED_FIRST);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertCommandSuccess(new ListIngredientCommand(), model, ListIngredientCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 2,
      "Trav1sT": 33
    }
  },
  {
    "path": "src/test/java/chopchop/logic/parser/CommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// CommandParserTest.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.logic.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class CommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    void parse_validCommands_success() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var parser \u003d new CommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var tests \u003d Map.of("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \"add ingredient squid /qty 30g /expiry 2020-12-24\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \"Result(AddIngredientCommand: squid Quantity: 30g Expiry Date: 2020-12-24)\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \"add ingredient milk /qty 600ml\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \"Result(AddIngredientCommand: milk Quantity: 600ml Expiry Date: 9999-12-31)\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \"add recipe cake /ingredient milk /qty 400ml /ingredient flour /qty 500g \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                + \"/ingredient egg /qty 7 /step mix /step bake /step eat\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \"Result(AddRecipeCommand: cake Ingredients: milk (400ml) flour (500g) \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                + \"egg (7)  Steps: 1. mix 2. bake 3. eat)\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        tests.forEach((k, v) -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var x \u003d parser.parse(k);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            System.err.println(x);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            assertEquals(v, x.toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 38
    }
  },
  {
    "path": "src/test/java/chopchop/model/DuplicatesTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class DuplicatesTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 5
    }
  },
  {
    "path": "src/test/java/chopchop/model/IngredientBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.testutil.IngredientBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.units.Count;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.IngredientBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.ReadOnlyIngredientBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.exceptions.DuplicateIngredientException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.APRICOT;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.getTypicalIngredientBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.VALID_INGREDIENT_QTY_BANANA;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.VALID_INGREDIENT_EXPIRY_BANANA;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class IngredientBookTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final IngredientBook ingredientBook \u003d new IngredientBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertEquals(Collections.emptyList(), ingredientBook.getFoodEntryList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ingredientBook.resetData(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void resetData_withValidReadOnlyIngredientBook_replacesData() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        IngredientBook newData \u003d getTypicalIngredientBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        ingredientBook.resetData(newData);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertEquals(newData, ingredientBook);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void resetData_withDuplicateIngredients_throwsDuplicateIngredientException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        Ingredient editedAlice \u003d new IngredientBuilder(APRICOT)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .withQuantity(Count.of(VALID_INGREDIENT_QTY_BANANA))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        List\u003cIngredient\u003e newIngredients \u003d Arrays.asList(APRICOT, editedAlice);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        IngredientBookTest.IngredientBookStub newData \u003d new IngredientBookTest.IngredientBookStub(newIngredients);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(DuplicateIngredientException.class, () -\u003e ingredientBook.resetData(newData));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void hasIngredient_nullIngredient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ingredientBook.hasIngredient(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void hasIngredient_personNotInIngredientBook_returnsFalse() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(ingredientBook.hasIngredient(APRICOT));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void hasIngredient_personInIngredientBook_returnsTrue() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        ingredientBook.addIngredient(APRICOT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(ingredientBook.hasIngredient(APRICOT));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void hasIngredient_personWithSameIdentityFieldsInIngredientBook_returnsTrue() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        ingredientBook.addIngredient(APRICOT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        Ingredient editedAlice \u003d new IngredientBuilder(APRICOT)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .withQuantity(Count.of(VALID_INGREDIENT_QTY_BANANA))"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            .withDate(VALID_INGREDIENT_EXPIRY_BANANA)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(ingredientBook.hasIngredient(editedAlice)); //Both identity fields must be equal"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void getIngredientList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e ingredientBook.getFoodEntryList().remove(0));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * A stub ReadOnlyIngredientBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private static class IngredientBookStub implements ReadOnlyIngredientBook {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        private final ObservableList\u003cIngredient\u003e ingredients \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        IngredientBookStub(Collection\u003cIngredient\u003e ingredients) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            this.ingredients.setAll(ingredients);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        public ObservableList\u003cIngredient\u003e getFoodEntryList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return ingredients;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 19,
      "Trav1sT": 90
    }
  },
  {
    "path": "src/test/java/chopchop/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.model.Model.PREDICATE_SHOW_ALL_RECIPES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.model.Model.PREDICATE_SHOW_ALL_INGREDIENTS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.APRICOT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.BANANA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.testutil.TypicalRecipes.APRICOT_SALAD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.testutil.TypicalRecipes.BANANA_SALAD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.attributes.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.IngredientBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.recipe.RecipeBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.testutil.IngredientBookBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.testutil.RecipeBookBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertEquals(new IngredientBook(), new IngredientBook(modelManager.getIngredientBook()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertEquals(new RecipeBook(), new RecipeBook(modelManager.getRecipeBook()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void hasIngredient_nullIngredient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasIngredient(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void hasIngredient_indNotInIngredientBook_returnsFalse() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(modelManager.hasIngredient(APRICOT));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void hasIngredient_ingredientInIngredientBook_returnsTrue() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        modelManager.addIngredient(APRICOT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(modelManager.hasIngredient(APRICOT));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void getFilteredPIngredientList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredIngredientList().remove(0));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void hasRecipe_nullRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasRecipe(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void hasRecipe_recipeNotInRecipeBook_returnsFalse() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(modelManager.hasRecipe(APRICOT_SALAD));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void hasRecipe_recipeInRecipeBook_returnsTrue() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        modelManager.addRecipe(APRICOT_SALAD);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(modelManager.hasRecipe(APRICOT_SALAD));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void getFilteredRecipeList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredRecipeList().remove(0));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        IngredientBook ingredientBook \u003d new IngredientBookBuilder()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            .withIngredient(APRICOT).withIngredient(BANANA).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        IngredientBook differentIngredientBook \u003d new IngredientBook();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        RecipeBook recipeBook \u003d new RecipeBookBuilder()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .withRecipe(APRICOT_SALAD).withRecipe(BANANA_SALAD).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        RecipeBook differentRecipeBook \u003d new RecipeBook();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        UserPrefs userPrefs \u003d new chopchop.model.UserPrefs();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        modelManager \u003d new ModelManager(recipeBook, ingredientBook, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(recipeBook, ingredientBook, userPrefs);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // different ingredientBook -\u003e returns false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager("
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            recipeBook, differentIngredientBook, userPrefs)));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // different recipeBook -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            differentRecipeBook, ingredientBook, userPrefs)));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // different filteredIngredientList -\u003e returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        final String[] indKeywords \u003d APRICOT.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        modelManager.updateFilteredIngredientList(new NameContainsKeywordsPredicate(Arrays.asList(indKeywords)));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(recipeBook, ingredientBook, userPrefs)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // different filteredRecipeList -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        final String[] recKeywords \u003d APRICOT_SALAD.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        modelManager.updateFilteredRecipeList(new NameContainsKeywordsPredicate(Arrays.asList(recKeywords)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(recipeBook, ingredientBook, userPrefs)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        modelManager.updateFilteredIngredientList(PREDICATE_SHOW_ALL_INGREDIENTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        modelManager.updateFilteredRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 44,
      "zhiayang": 4,
      "Trav1sT": 81
    }
  },
  {
    "path": "src/test/java/chopchop/model/ModelStub.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.recipe.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.ReadOnlyIngredientBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public abstract class ModelStub implements Model {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Path getIngredientBookFilePath() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setIngredientBookFilePath(Path indBookFilePath) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void addIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setIngredientBook(ReadOnlyIngredientBook newData) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public ReadOnlyIngredientBook getIngredientBook() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public boolean hasIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void deleteIngredient(Ingredient target) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setIngredient(Ingredient target, Ingredient editedIngredient) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public ObservableList\u003cIngredient\u003e getFilteredIngredientList() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void updateFilteredIngredientList(Predicate\u003cFoodEntry\u003e predicate) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Path getRecipeBookFilePath() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setRecipeBookFilePath(Path indBookFilePath) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void addRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setRecipeBook(ReadOnlyRecipeBook newData) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public ReadOnlyRecipeBook getRecipeBook() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public boolean hasRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void deleteRecipe(Recipe target) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setRecipe(Recipe target, Recipe editedRecipe) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public ObservableList\u003cRecipe\u003e getFilteredRecipeList() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void updateFilteredRecipeList(Predicate\u003cFoodEntry\u003e predicate) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Optional\u003cRecipe\u003e findRecipeWithName(String name) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.findRecipeWithName(new Name(name));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Optional\u003cRecipe\u003e findRecipeWithName(Name name) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Optional\u003cIngredient\u003e findIngredientWithName(String name) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.findIngredientWithName(new Name(name));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Optional\u003cIngredient\u003e findIngredientWithName(Name name) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 28,
      "Trav1sT": 134
    }
  },
  {
    "path": "src/test/java/chopchop/model/RecipeBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.recipe.RecipeBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.recipe.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.recipe.exceptions.DuplicateRecipeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.BANANA_REF;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.testutil.TypicalRecipes.APRICOT_SALAD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.testutil.TypicalRecipes.STEP_BANANA_SALAD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.testutil.TypicalRecipes.getTypicalRecipeBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class RecipeBookTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private final RecipeBook recipeBook \u003d new RecipeBook();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertEquals(Collections.emptyList(), recipeBook.getFoodEntryList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e recipeBook.resetData(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void resetData_withValidReadOnlyRecipeBook_replacesData() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        RecipeBook newData \u003d getTypicalRecipeBook();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        recipeBook.resetData(newData);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertEquals(newData, recipeBook);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void resetData_withDuplicateRecipes_throwsDuplicateRecipeException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // Two recipes with the same identity fields"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Recipe editedRecipe \u003d new RecipeBuilder(APRICOT_SALAD).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        List\u003cRecipe\u003e newRecipes \u003d Arrays.asList(APRICOT_SALAD, editedRecipe);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        RecipeBookTest.RecipeBookStub newData \u003d new RecipeBookTest.RecipeBookStub(newRecipes);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertThrows(DuplicateRecipeException.class, () -\u003e recipeBook.resetData(newData));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void hasRecipe_nullRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e recipeBook.hasRecipe(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void hasRecipe_recipeNotInRecipeBook_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(recipeBook.hasRecipe(APRICOT_SALAD));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void hasRecipe_recipeInRecipeBook_returnsTrue() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        recipeBook.addRecipe(APRICOT_SALAD);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(recipeBook.hasRecipe(APRICOT_SALAD));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void hasRecipe_recipeWithSameIdentityFieldsInRecipeBook_returnsTrue() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        recipeBook.addRecipe(APRICOT_SALAD);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Recipe editedRecipe \u003d new RecipeBuilder(APRICOT_SALAD)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .withIngredients(new ArrayList\u003c\u003e(Arrays.asList(BANANA_REF)))"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .withSteps(new ArrayList\u003c\u003e(Arrays.asList(STEP_BANANA_SALAD)))"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        assertTrue(recipeBook.hasRecipe(editedRecipe)); //Both identity fields must be equal"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void getRecipeList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e recipeBook.getFoodEntryList().remove(0));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * A stub ReadOnlyRecipeBook whose recipes list can violate interface constraints."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private static class RecipeBookStub implements ReadOnlyRecipeBook {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        private final ObservableList\u003cRecipe\u003e recipes \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        RecipeBookStub(Collection\u003cRecipe\u003e recipes) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            this.recipes.setAll(recipes);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        public ObservableList\u003cRecipe\u003e getFoodEntryList() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return recipes;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 103,
      "zhiayang": 2,
      "seowalex": 1
    }
  },
  {
    "path": "src/test/java/chopchop/model/attributes/ExpiryDateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class ExpiryDateTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ExpiryDate(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void constructor_invalidExpiryDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        String invalidDate \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ExpiryDate(invalidDate));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void isValidDate() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ExpiryDate.isValidDate(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(ExpiryDate.isValidDate(\"\")); // empty string"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(ExpiryDate.isValidDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(ExpiryDate.isValidDate(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(ExpiryDate.isValidDate(\"2020:12-01\")); // invalid date format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(ExpiryDate.isValidDate(\"2020-13-32\")); // valid date format but invalid date"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(ExpiryDate.isValidDate(\"1990-12-01\")); // a date that has passed, yyyy-MM-dd"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(ExpiryDate.isValidDate(\"2021-12-01\")); // a future date, yyyy-MM-dd"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 37
    }
  },
  {
    "path": "src/test/java/chopchop/model/attributes/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.BANANA_REF;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.testutil.TypicalRecipes.STEP_BANANA_SALAD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.testutil.IngredientBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                                                            .singletonList(\"Apricot\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(predicate.test(new IngredientBuilder().withName(\"Apricot\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(predicate.test(new RecipeBuilder().withName(\"Apricot\").build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Apricot\", \"Banana\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(predicate.test(new IngredientBuilder().withName(\"Apricot Banana\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(predicate.test(new RecipeBuilder().withName(\"Apricot Banana\").build()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Apricot\", \"Caramel\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(predicate.test(new IngredientBuilder().withName(\"Alice Caramel\").build()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(predicate.test(new RecipeBuilder().withName(\"Apricot Salad\").build()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aPRIcot\", \"bAnAnA\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(predicate.test(new IngredientBuilder().withName(\"Apricot banana\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(predicate.test(new RecipeBuilder().withName(\"Apricot Banana\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(predicate.test(new IngredientBuilder().withName(\"Apricot\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(predicate.test(new RecipeBuilder().withName(\"Apricot\").build()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Caramel\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(predicate.test(new IngredientBuilder().withName(\"Apricot Banana\").build()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(predicate.test(new RecipeBuilder().withName(\"Apricot Banana\").build()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(predicate.test(new IngredientBuilder().withName(\"Alice\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            .withDate(\"2020-05-10\").build()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // For Recipe, keywords match ingredient name and step content, but does not match name"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                \"Banana\", \"Cut\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(predicate.test(new RecipeBuilder().withName(\"Apricot Salad\")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .withIngredients(new ArrayList\u003c\u003e(Arrays.asList(BANANA_REF)))"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .withSteps(new ArrayList\u003c\u003e(Arrays.asList(STEP_BANANA_SALAD)))"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .build()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hjl99": 21,
      "zhiayang": 2,
      "Trav1sT": 73
    }
  },
  {
    "path": "src/test/java/chopchop/model/attributes/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(Name.isValidName(\"corn*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(Name.isValidName(\"egg plant\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(Name.isValidName(\"eggplant the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(Name.isValidName(\"Corn Starch\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(Name.isValidName(\"The Great 2nd Corn Starch of the U.K.\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public void caseInsensitiveComparison() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(new Name(\"aaaaa\"), new Name(\"aAaAa\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(new Name(\"aaaaa\"), \"AAAAA\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 7,
      "Trav1sT": 8,
      "-": 32
    }
  },
  {
    "path": "src/test/java/chopchop/model/attributes/QuantityTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// QuantityTest.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model.attributes;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.util.Pair;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.util.Result;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.units.Mass;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.units.Count;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.units.Volume;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class QuantityTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    void equals_sameUnits_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(Mass.grams(133),       Mass.kilograms(0.133));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(Mass.kilograms(23),    Mass.grams(23000));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(Volume.cups(3.2),      Volume.millilitres(800));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(Volume.teaspoons(3),   Volume.litres(0.015));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(Count.of(3),           Count.of(3));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    void equals_notSameUnits_failure() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertNotEquals(Mass.grams(133),        Mass.kilograms(133));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertNotEquals(Mass.kilograms(23),     Mass.grams(23));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertNotEquals(Volume.cups(3.2),       Volume.millilitres(3.2));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertNotEquals(Volume.teaspoons(3),    Volume.litres(2));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertNotEquals(Count.of(3),            Count.of(1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertNotEquals(Mass.grams(133),        Count.of(133));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertNotEquals(Mass.kilograms(23),     Volume.tablespoons(23));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    void parse_validUnits_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var tests \u003d Map.of("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \"10 g\",     Mass.grams(10),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \"3.1kg\",    Mass.grams(3100),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \"60kg\",     Mass.grams(60000),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \"40ml\",     Volume.millilitres(40),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \"3.7tbsp\",  Volume.tablespoons(3.7),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \"1 cup\",    Volume.teaspoons(50),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \"2 cups\",   Volume.litres(0.5),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \"3\",        Count.of(3)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        tests.forEach((k, v) -\u003e {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var parsed \u003d Quantity.parse(k);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            assertTrue(parsed.hasValue());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            assertEquals(v, parsed.getValue());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    void parse_invalidUnits_failure() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var tests \u003d Map.of("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \"10 lg\",        \"unknown unit \u0027lg\u0027\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \"3.1.4 cups\",   \"couldn\u0027t parse number: multiple points\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \"\",             \"empty input\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        tests.forEach((k, v) -\u003e {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            assertEquals(Result.error(v), Quantity.parse(k));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    void add_compatibleUnits_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var tests \u003d Map.of("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            Pair.of(\"185 g\", \"3.7 kg\"),     Mass.kilograms(3.885),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            Pair.of(\"185 g\", \"-53g\"),       Mass.grams(132),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            Pair.of(\"45ml\", \"3tsp\"),        Volume.tablespoons(4),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            Pair.of(\"3 cups\", \"1 cup\"),     Volume.litres(1),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            Pair.of(\"1\", \"7\"),              Count.of(8)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        tests.forEach((k, v) -\u003e {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var a \u003d k.fst();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var b \u003d k.snd();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            assertEquals(Result.of(v), Quantity.parse(a)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                .then(x -\u003e Quantity.parse(b).then(y -\u003e x.add(y)))"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            );"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    void add_incompatibleUnits_failure() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var tests \u003d Map.of("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            Pair.of(\"185 g\", \"3.7 ml\"),     \"cannot add \u00273.700ml\u0027 to \u0027185g\u0027 (incompatible units)\","
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            Pair.of(\"1\", \"7g\"),             \"cannot add \u00277g\u0027 to \u00271\u0027 (incompatible units)\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        tests.forEach((k, v) -\u003e {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var a \u003d k.fst();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var b \u003d k.snd();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            assertEquals(Result.error(v), Quantity.parse(a)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                .then(x -\u003e Quantity.parse(b).then(y -\u003e x.add(y)))"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            );"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 105,
      "Trav1sT": 13
    }
  },
  {
    "path": "src/test/java/chopchop/model/attributes/StepTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.model.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class StepTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Step(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void constructor_invalidStep_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        String invalidStep \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Step(invalidStep));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void isValidStep() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // null Step"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Step.isValidStep(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // invalid Step"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(Step.isValidStep(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(Step.isValidStep(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(Step.isValidStep(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // valid Step"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(Step.isValidStep(\"recipe*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(Step.isValidStep(\"rec recipe\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(Step.isValidStep(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(Step.isValidStep(\"recipe number seven\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(Step.isValidStep(\"The Most Unhealthy Recipe\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(Step.isValidStep("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                \"First, place eggs in a large saucepan and cover them with cool water by 1 inch.\")); // long Step"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 40,
      "Trav1sT": 1
    }
  },
  {
    "path": "src/test/java/chopchop/model/ingredient/IngredientTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.testutil.IngredientBuilder;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.units.Count;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.APRICOT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.BANANA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class IngredientTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        Ingredient apricotCopy \u003d new IngredientBuilder(APRICOT).build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(APRICOT.equals(apricotCopy));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(APRICOT.equals(APRICOT));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(APRICOT.equals(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(APRICOT.equals(5));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // different ingredient -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(APRICOT.equals(BANANA));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        Ingredient editedApricot \u003d new IngredientBuilder(APRICOT).withName(\"DD\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(APRICOT.equals(editedApricot));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // different date -\u003e returns false. Different ingredients can be of the same name but different expiry"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        editedApricot \u003d new IngredientBuilder(APRICOT).withDate(\"2020-12-02\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(APRICOT.equals(editedApricot));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // different qty -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        editedApricot \u003d new IngredientBuilder(APRICOT).withQuantity(Count.of(5)).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(APRICOT.equals(editedApricot));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 1,
      "zhiayang": 8,
      "Trav1sT": 37
    }
  },
  {
    "path": "src/test/java/chopchop/model/recipe/RecipeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.testutil.TypicalRecipes.APRICOT_SALAD;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.testutil.TypicalRecipes.BANANA_SALAD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.testutil.IngredientBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class RecipeTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Recipe apricotSaladCopy \u003d new RecipeBuilder(APRICOT_SALAD).build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(APRICOT_SALAD.equals(apricotSaladCopy));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(APRICOT_SALAD.equals(APRICOT_SALAD));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(APRICOT_SALAD.equals(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(APRICOT_SALAD.equals(new IngredientBuilder().build()));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // different recipe -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(APRICOT_SALAD.equals(BANANA_SALAD));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        Recipe editedApricotSalad \u003d new RecipeBuilder(APRICOT_SALAD).withName(\"DD\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(APRICOT_SALAD.equals(editedApricotSalad));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 35,
      "Trav1sT": 1
    }
  },
  {
    "path": "src/test/java/chopchop/storage/JsonAdaptedIngredientTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.storage.JsonAdaptedIngredient.IND_MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.BANANA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.attributes.ExpiryDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.attributes.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.attributes.Quantity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class JsonAdaptedIngredientTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private static final String INVALID_NAME \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private static final String INVALID_EXPIRY \u003d \"20-10-20\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private static final String INVALID_QTY \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private static final String VALID_NAME \u003d BANANA.getName().toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private static final String VALID_EXPIRY \u003d BANANA.getExpiryDate().get().toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private static final String VALID_QTY \u003d BANANA.getQuantity().toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void toModelType_validIngredientDetails_returnsIngredient() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        JsonAdaptedIngredient ingredient \u003d new JsonAdaptedIngredient(BANANA);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertEquals(BANANA, ingredient.toModelType());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        JsonAdaptedIngredient ingredient \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            new JsonAdaptedIngredient(INVALID_NAME, VALID_QTY, VALID_EXPIRY);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, ingredient::toModelType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        JsonAdaptedIngredient ingredient \u003d new JsonAdaptedIngredient(null, VALID_QTY, VALID_EXPIRY);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        String expectedMessage \u003d String.format(IND_MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, ingredient::toModelType);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void toModelType_invalidQuantity_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        JsonAdaptedIngredient ingredient \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            new JsonAdaptedIngredient(VALID_NAME, INVALID_QTY, VALID_EXPIRY);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        String expectedMessage \u003d Quantity.parse(INVALID_QTY).getError();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, ingredient::toModelType);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void toModelType_nullQuantity_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        JsonAdaptedIngredient ingredient \u003d new JsonAdaptedIngredient(VALID_NAME, null, VALID_EXPIRY);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        String expectedMessage \u003d String.format(IND_MISSING_FIELD_MESSAGE_FORMAT, Quantity.class.getSimpleName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, ingredient::toModelType);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        JsonAdaptedIngredient ingredient \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            new JsonAdaptedIngredient(VALID_NAME, VALID_QTY, INVALID_EXPIRY);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        String expectedMessage \u003d ExpiryDate.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, ingredient::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        JsonAdaptedIngredient ingredient \u003d new JsonAdaptedIngredient(VALID_NAME, VALID_QTY, null);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        String expectedMessage \u003d String.format(IND_MISSING_FIELD_MESSAGE_FORMAT, ExpiryDate.class.getSimpleName());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, ingredient::toModelType);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 75
    }
  },
  {
    "path": "src/test/java/chopchop/storage/JsonAdaptedRecipeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.storage.JsonAdaptedRecipe.RECIPE_MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalRecipes.APRICOT_SALAD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalRecipes.BANANA_SALAD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.attributes.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.attributes.Step;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.IngredientReference;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class JsonAdaptedRecipeTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private static final String INVALID_NAME \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private static final JsonAdaptedIngredientRef INVALID_REF \u003d new JsonAdaptedIngredientRef(null, null);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private static final String INVALID_STEP \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private static final String VALID_NAME \u003d APRICOT_SALAD.getName().toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private static final List\u003cJsonAdaptedIngredientRef\u003e VALID_REFS \u003d BANANA_SALAD.getIngredients()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        .stream().map(JsonAdaptedIngredientRef::new).collect(Collectors.toList());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private static final List\u003cString\u003e VALID_STEPS \u003d BANANA_SALAD.getSteps()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        .stream().map(Step::toString).collect(Collectors.toList());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void toModelType_validRecipeDetails_returnsRecipe() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        JsonAdaptedRecipe recipe \u003d new JsonAdaptedRecipe(BANANA_SALAD);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertEquals(BANANA_SALAD, recipe.toModelType());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        JsonAdaptedRecipe recipe \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            new JsonAdaptedRecipe(INVALID_NAME, VALID_REFS,  VALID_STEPS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        JsonAdaptedRecipe recipe \u003d new JsonAdaptedRecipe(null, VALID_REFS, VALID_STEPS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        String expectedMessage \u003d String.format(RECIPE_MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    //IngredientReference has null values."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void toModelType_invalidReference_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        JsonAdaptedRecipe recipe \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            new JsonAdaptedRecipe(VALID_NAME, Collections.singletonList(INVALID_REF), VALID_STEPS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            JsonAdaptedIngredientRef.REF_MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            Name.class.getSimpleName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void toModelType_nullReference_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        JsonAdaptedRecipe recipe \u003d new JsonAdaptedRecipe(VALID_NAME, null, VALID_STEPS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        String expectedMessage \u003d String.format(RECIPE_MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            IngredientReference.class.getSimpleName());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void toModelType_nullStep_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        JsonAdaptedRecipe recipe \u003d new JsonAdaptedRecipe(VALID_NAME, VALID_REFS, null);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        String expectedMessage \u003d String.format(RECIPE_MISSING_FIELD_MESSAGE_FORMAT, Step.class.getSimpleName());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 75
    }
  },
  {
    "path": "src/test/java/chopchop/storage/JsonIngredientBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.BANANA;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.CUSTARD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.getTypicalIngredientBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.IngredientBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.ReadOnlyIngredientBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class JsonIngredientBookStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonIndBookStorageTest\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void readIngredientBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readIngredientBook(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private java.util.Optional\u003cReadOnlyIngredientBook\u003e readIngredientBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return new JsonIngredientBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            .readIngredientBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(readIngredientBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readIngredientBook(\"notJsonFormatIndBook.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void readIngredientBook_invalidPersonIngredientBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readIngredientBook(\"invalidIndBook.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void readIngredientBook_invalidAndValidPersonIngredientBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readIngredientBook(\"invalidAndValidIndBook.json\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void readAndSaveIngredientBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempIngredientBook.json\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        IngredientBook original \u003d getTypicalIngredientBook();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        JsonIngredientBookStorage jsonIngredientBookStorage \u003d new JsonIngredientBookStorage(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        jsonIngredientBookStorage.saveIngredientBook(original, filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        ReadOnlyIngredientBook readBack \u003d jsonIngredientBookStorage.readIngredientBook(filePath).get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertEquals(original.getFoodEntryList(), new IngredientBook(readBack).getFoodEntryList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        System.out.println(original.getFoodEntryList().stream().map(x-\u003e x.toString()).collect(Collectors.joining()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        original.addIngredient(CUSTARD);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        original.removeIngredient(BANANA);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        jsonIngredientBookStorage.saveIngredientBook(original, filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        readBack \u003d jsonIngredientBookStorage.readIngredientBook(filePath).get();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertEquals(original, new IngredientBook(readBack));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        original.addIngredient(BANANA);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        jsonIngredientBookStorage.saveIngredientBook(original); // file path not specified"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        readBack \u003d jsonIngredientBookStorage.readIngredientBook().get(); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertEquals(original, new IngredientBook(readBack));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void saveIngredientBook_nullIngredientBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveIngredientBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private void saveIngredientBook(ReadOnlyIngredientBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            new JsonIngredientBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                .saveIngredientBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void saveIngredientBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveIngredientBook(new IngredientBook(), null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 110
    }
  },
  {
    "path": "src/test/java/chopchop/storage/JsonRecipeBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalRecipes.BANANA_SALAD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalRecipes.CUSTARD_SALAD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalRecipes.getTypicalRecipeBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.recipe.RecipeBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.recipe.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class JsonRecipeBookStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonRecipeBookStorageTest\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void readRecipeBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readRecipeBook(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private java.util.Optional\u003cReadOnlyRecipeBook\u003e readRecipeBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return new JsonRecipeBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            .readRecipeBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(readRecipeBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readRecipeBook(\"notJsonRecBook.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void readRecipeBook_invalidPersonRecipeBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readRecipeBook(\"invalidRecBook.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void readRecipeBook_invalidAndValidPersonRecipeBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readRecipeBook(\"invalidAndValidRecBook.json\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void readAndSaveRecipeBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempRecipeBook.json\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        RecipeBook original \u003d getTypicalRecipeBook();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        JsonRecipeBookStorage jsonRecipeBookStorage \u003d new JsonRecipeBookStorage(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        jsonRecipeBookStorage.saveRecipeBook(original, filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        ReadOnlyRecipeBook readBack \u003d jsonRecipeBookStorage.readRecipeBook(filePath).get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertEquals(original.getFoodEntryList(), new RecipeBook(readBack).getFoodEntryList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        System.out.println(original.getFoodEntryList().stream().map(x-\u003e x.toString()).collect(Collectors.joining()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        original.addRecipe(CUSTARD_SALAD);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        original.removeRecipe(BANANA_SALAD);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        jsonRecipeBookStorage.saveRecipeBook(original, filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        readBack \u003d jsonRecipeBookStorage.readRecipeBook(filePath).get();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertEquals(original, new RecipeBook(readBack));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        original.addRecipe(BANANA_SALAD);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        jsonRecipeBookStorage.saveRecipeBook(original); // file path not specified"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        readBack \u003d jsonRecipeBookStorage.readRecipeBook().get(); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertEquals(original, new RecipeBook(readBack));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void saveRecipeBook_nullRecipeBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveRecipeBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private void saveRecipeBook(ReadOnlyRecipeBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            new JsonRecipeBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                .saveRecipeBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void saveRecipeBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveRecipeBook(new RecipeBook(), null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 109
    }
  },
  {
    "path": "src/test/java/chopchop/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.getTypicalIngredientBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalRecipes.getTypicalRecipeBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.IngredientBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.ReadOnlyIngredientBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.recipe.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.recipe.RecipeBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        JsonIngredientBookStorage ingredientBookStorage \u003d new JsonIngredientBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        JsonRecipeBookStorage recipeBookStorage \u003d new JsonRecipeBookStorage(getTempFilePath(\"abc\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        storageManager \u003d new StorageManager(ingredientBookStorage, recipeBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "         */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void ingredientBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "         */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        IngredientBook original \u003d getTypicalIngredientBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        storageManager.saveIngredientBook(original);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        ReadOnlyIngredientBook retrieved \u003d storageManager.readIngredientBook().get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertEquals(original, new IngredientBook(retrieved));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void getIngredientBookFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertNotNull(storageManager.getIngredientBookFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void recipeBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "         */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        RecipeBook original \u003d getTypicalRecipeBook();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        storageManager.saveRecipeBook(original);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        ReadOnlyRecipeBook retrieved \u003d storageManager.readRecipeBook().get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertEquals(original, new RecipeBook(retrieved));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void getRecipeBookFilePath() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertNotNull(storageManager.getRecipeBookFilePath());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 86
    }
  },
  {
    "path": "src/test/java/chopchop/testutil/Assert.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 34
    }
  },
  {
    "path": "src/test/java/chopchop/testutil/IngredientBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.IngredientBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class IngredientBookBuilder {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private IngredientBook ingredientBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public IngredientBookBuilder() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        ingredientBook \u003d new IngredientBook();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public IngredientBookBuilder(IngredientBook ingredientBook) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.ingredientBook \u003d ingredientBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Adds a new {@code Person} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public IngredientBookBuilder withIngredient(Ingredient ind) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        ingredientBook.addIngredient(ind);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public IngredientBook build() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return ingredientBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 29
    }
  },
  {
    "path": "src/test/java/chopchop/testutil/IngredientBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.attributes.Name;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.attributes.Quantity;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.ExpiryDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.units.Count;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class IngredientBuilder {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Egg\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final int DEFAULT_QTY \u003d 3;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final String DEFAULT_EXPIRY \u003d \"2020-10-12\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private Quantity qty;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private ExpiryDate expDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Creates a {@code PersonBuilder} with the default details."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public IngredientBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        qty     \u003d Count.of(DEFAULT_QTY);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        name    \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        expDate \u003d new ExpiryDate(DEFAULT_EXPIRY);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public IngredientBuilder(Ingredient indToCopy) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        name \u003d indToCopy.getName();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        qty \u003d indToCopy.getQuantity();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        expDate \u003d indToCopy.getExpiryDate().orElse(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public IngredientBuilder withName(String name) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public IngredientBuilder withQuantity(Quantity qty) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.qty \u003d qty;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public IngredientBuilder withDate(String date) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.expDate \u003d new ExpiryDate(date);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Ingredient build() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return new Ingredient(name, qty, expDate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 6,
      "Trav1sT": 60,
      "seowalex": 1
    }
  },
  {
    "path": "src/test/java/chopchop/testutil/IngredientUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.util.Strings.ARG_EXPIRY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.util.Strings.ARG_QUANTITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.logic.commands.AddIngredientCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * A utility class for Ingredient."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class IngredientUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns an add command string for adding the {@code ingredient}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static String getAddCommand(Ingredient ind) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return AddIngredientCommand.COMMAND_WORD + \" \" + getIngredientDetails(ind);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns the part of command string for the given {@code ingredient}\u0027s details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static String getIngredientDetails(Ingredient ind) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        sb.append(ind.getName().fullName + \" \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        sb.append(ARG_QUANTITY + \" \" + ind.getQuantity().toString() + \" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        sb.append(ARG_EXPIRY + \" \" +  ind.getExpiryDate().toString() + \" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 4,
      "Trav1sT": 28
    }
  },
  {
    "path": "src/test/java/chopchop/testutil/RecipeBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.recipe.RecipeBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class RecipeBookBuilder {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private RecipeBook recipeBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public RecipeBookBuilder() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        recipeBook \u003d new RecipeBook();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public RecipeBookBuilder(RecipeBook recipeBook) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.recipeBook \u003d recipeBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Adds a new {@code Person} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public RecipeBookBuilder withRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        recipeBook.addRecipe(recipe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public RecipeBook build() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return recipeBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 29
    }
  },
  {
    "path": "src/test/java/chopchop/testutil/RecipeBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.attributes.Name;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.attributes.Step;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.ingredient.IngredientReference;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class RecipeBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Egg\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final String DEFAULT_STEP \u003d \"Heat it for 15 minutes.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private List\u003cIngredientReference\u003e ingredients;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private List\u003cStep\u003e steps;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Creates a {@code RecipeBuilder} with the default details."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public RecipeBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        ingredients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        steps \u003d new ArrayList\u003c\u003e(Arrays.asList(new Step(DEFAULT_STEP)));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Initializes the RecipeBuilder with the data of {@code recToCopy}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public RecipeBuilder(Recipe recToCopy) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        name \u003d recToCopy.getName();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        ingredients \u003d recToCopy.getIngredients();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        steps \u003d recToCopy.getSteps();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public RecipeBuilder withName(String name) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public RecipeBuilder withIngredients(List\u003cIngredientReference\u003e ingredients) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.ingredients \u003d ingredients;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public RecipeBuilder withSteps(List\u003cStep\u003e steps) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.steps \u003d steps;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public Recipe build() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return new Recipe(name, ingredients, steps);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 62,
      "zhiayang": 5
    }
  },
  {
    "path": "src/test/java/chopchop/testutil/RecipeUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.util.Strings.ARG_INGREDIENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.util.Strings.ARG_STEP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.logic.commands.AddRecipeCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * A utility class for Ingredient."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class RecipeUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns an add command string for adding the {@code ingredient}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static String getAddCommand(Recipe recipe) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return AddRecipeCommand.COMMAND_WORD + \" \" + getRecipeDetails(recipe);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns the part of command string for the given {@code ingredient}\u0027s details."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static String getRecipeDetails(Recipe recipe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        sb.append(recipe.getName().fullName + \" \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        recipe.getIngredients().stream().forEach(ind -\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                        sb.append(ARG_INGREDIENT + \" \" + ind.getQuantity().toString() + \" \"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        recipe.getSteps().stream().forEach(step -\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                sb.append(ARG_STEP + step.toString() + \" \"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 30,
      "zhiayang": 4
    }
  },
  {
    "path": "src/test/java/chopchop/testutil/SerializableTestClass.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 72
    }
  },
  {
    "path": "src/test/java/chopchop/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 31
    }
  },
  {
    "path": "src/test/java/chopchop/testutil/TypicalIngredients.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.units.Count;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.IngredientBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.ingredient.IngredientReference;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.VALID_INGREDIENT_EXPIRY_CUSTARD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.VALID_INGREDIENT_NAME_CUSTARD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.VALID_INGREDIENT_QTY_BANANA;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.VALID_INGREDIENT_QTY_APRICOT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.VALID_INGREDIENT_NAME_BANANA;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.VALID_INGREDIENT_NAME_APRICOT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.VALID_INGREDIENT_EXPIRY_BANANA;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.VALID_INGREDIENT_EXPIRY_APRICOT;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.VALID_INGREDIENT_QTY_CUSTARD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class TypicalIngredients {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static final Ingredient APRICOT \u003d new IngredientBuilder()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        .withName(VALID_INGREDIENT_NAME_APRICOT)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        .withDate(VALID_INGREDIENT_EXPIRY_APRICOT)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        .withQuantity(Count.of(VALID_INGREDIENT_QTY_APRICOT))"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static final Ingredient BANANA \u003d new IngredientBuilder()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        .withName(VALID_INGREDIENT_NAME_BANANA)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        .withDate(VALID_INGREDIENT_EXPIRY_BANANA)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        .withQuantity(Count.of(VALID_INGREDIENT_QTY_BANANA))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final Ingredient CUSTARD \u003d new IngredientBuilder()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        .withName(VALID_INGREDIENT_NAME_CUSTARD)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        .withDate(VALID_INGREDIENT_EXPIRY_CUSTARD)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        .withQuantity(Count.of(VALID_INGREDIENT_QTY_CUSTARD))"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static final IngredientReference APRICOT_REF \u003d new IngredientReference("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        VALID_INGREDIENT_NAME_APRICOT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        Count.of(VALID_INGREDIENT_QTY_APRICOT)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static final IngredientReference BANANA_REF \u003d new IngredientReference("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        VALID_INGREDIENT_NAME_BANANA,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        Count.of(VALID_INGREDIENT_QTY_BANANA)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final IngredientReference CUSTARD_REF \u003d new IngredientReference("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        VALID_INGREDIENT_NAME_CUSTARD,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        Count.of(VALID_INGREDIENT_QTY_CUSTARD)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    );"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns an {@code IngredientBook} with all the typical ingredients."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static IngredientBook getTypicalIngredientBook() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        IngredientBook ab \u003d new IngredientBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        for (Ingredient ind : getTypicalIngredients()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            ab.addIngredient(ind);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static List\u003cIngredient\u003e getTypicalIngredients() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(APRICOT, BANANA));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static List\u003cIngredientReference\u003e getTypicalIngredientReferences() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(APRICOT_REF, BANANA_REF));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 33,
      "Trav1sT": 41
    }
  },
  {
    "path": "src/test/java/chopchop/testutil/TypicalRecipes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.attributes.Step;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.recipe.RecipeBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.VALID_RECIPE_NAME_APRICOT_SALAD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.VALID_RECIPE_NAME_BANANA_SALAD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.VALID_RECIPE_NAME_CUSTARD_SALAD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.APRICOT_REF;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.BANANA_REF;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.CUSTARD_REF;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class TypicalRecipes {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final Step STEP_APRICOT_SALAD \u003d new Step("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            \"Cut the apricot, add salad dressing, and mix well in a bowl.\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final Step STEP_BANANA_SALAD \u003d new Step("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            \"Cut the banana, add salad dressing, and mix well in a bowl.\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final Step STEP_CUSTARD_SALAD \u003d new Step("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            \"Cut the custard, add salad dressing, and mix well in a bowl.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final Recipe APRICOT_SALAD \u003d new RecipeBuilder().withName(VALID_RECIPE_NAME_APRICOT_SALAD)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .withIngredients(new ArrayList\u003c\u003e(Arrays.asList(APRICOT_REF)))"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .withSteps(new ArrayList\u003c\u003e(Arrays.asList(STEP_APRICOT_SALAD)))"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final Recipe BANANA_SALAD \u003d new RecipeBuilder().withName(VALID_RECIPE_NAME_BANANA_SALAD)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .withIngredients(new ArrayList\u003c\u003e(Arrays.asList(BANANA_REF)))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .withSteps(new ArrayList\u003c\u003e(Arrays.asList(STEP_BANANA_SALAD)))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final Recipe CUSTARD_SALAD \u003d new RecipeBuilder().withName(VALID_RECIPE_NAME_CUSTARD_SALAD)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        .withIngredients(new ArrayList\u003c\u003e(Arrays.asList(CUSTARD_REF)))"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        .withSteps(new ArrayList\u003c\u003e(Arrays.asList(STEP_CUSTARD_SALAD)))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns an {@code IngredientBook} with all the typical ingredients."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static RecipeBook getTypicalRecipeBook() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        RecipeBook rb \u003d new RecipeBook();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        for (Recipe recipe : getTypicalRecipes()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            rb.addRecipe(recipe);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return rb;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static List\u003cRecipe\u003e getTypicalRecipes() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(APRICOT_SALAD, BANANA_SALAD));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 44,
      "zhiayang": 4,
      "Trav1sT": 9
    }
  },
  {
    "path": "src/test/java/chopchop/testutil/TypicalReferences.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// TypicalReferences.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.testutil;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.parser.ItemReference;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * A utility class containing a list of {@code ItemReference} objects to be used in tests."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class TypicalReferences {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static final ItemReference INDEXED_FIRST         \u003d ItemReference.ofOneIndex(1);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static final ItemReference INDEXED_SECOND        \u003d ItemReference.ofOneIndex(2);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static final ItemReference INDEXED_THIRD         \u003d ItemReference.ofOneIndex(3);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static final ItemReference NAMED_BANANA          \u003d ItemReference.ofName(\"banana\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static final ItemReference NAMED_APRICOT         \u003d ItemReference.ofName(\"apricot\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static final ItemReference NAMED_BANANA_SALAD    \u003d ItemReference.ofName(\"Banana Salad\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static final ItemReference NAMED_APRICOT_SALAD   \u003d ItemReference.ofName(\"Apricot Salad\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub, new CommandTestUtil.HistoryStub());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                addCommand.execute(modelStub, new CommandTestUtil.HistoryStub()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seowalex": 3,
      "-": 192
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import seedu.address.logic.history.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import seedu.address.logic.history.History;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, new HistoryStub());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                command.execute(actualModel, new HistoryStub()));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * A default history stub that have all of the methods failing."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public static class HistoryStub implements History {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        public void add(CommandHistory command) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        public CommandResult undo(Model model) throws CommandException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        public CommandResult redo(Model model) throws CommandException {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        public String getHistory() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seowalex": 30,
      "-": 126
    }
  }
]
